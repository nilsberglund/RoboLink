
Communication_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  00000374  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000746  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000022a  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000506  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001dc  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000378  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	e3 c0       	rjmp	.+454    	; 0x1d0 <__vector_2>
   a:	00 00       	nop
   c:	9e c0       	rjmp	.+316    	; 0x14a <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 31       	cpi	r26, 0x1B	; 27
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	18 c1       	rjmp	.+560    	; 0x2dc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "Communication_Module.h"
#include "Master_communication.h"

int main(void)
{
	SPI_Init_Master();
  ae:	03 d0       	rcall	.+6      	; 0xb6 <SPI_Init_Master>
    while(1)
    {
     RX_sensor_data();
  b0:	08 d1       	rcall	.+528    	; 0x2c2 <RX_sensor_data>
	 TX_sensor_data();
  b2:	f5 d0       	rcall	.+490    	; 0x29e <TX_sensor_data>
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <main+0x2>

000000b6 <SPI_Init_Master>:

/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{
	//Sets all the D ports as outputs
	DDRD = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	//Sets MOSI, SCK and SS as outputs
	DDRB = 0xB0;
  ba:	80 eb       	ldi	r24, 0xB0	; 176
  bc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB3)|(1 << PORTB4);
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	85 b9       	out	0x05, r24	; 5
	//Sets the SPI-control register. Master settings and interrupt enable. SPR0, SPR1 sets clock to f/128.. 
	SPCR |= (1 << SPE)|(1 << MSTR)|(1 << SPR0)|(1 << SPR1);
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	83 65       	ori	r24, 0x53	; 83
  c8:	8c bd       	out	0x2c, r24	; 44
	//Enables interrupt 2
	EICRA = 0x30;
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x04;
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	8d bb       	out	0x1d, r24	; 29
	//Enable global interrupt
	sei();
  d4:	78 94       	sei
	
	Sensor_Slave = 1;
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	20 93 14 01 	sts	0x0114, r18
	Control_Slave = 2;
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	90 93 1a 01 	sts	0x011A, r25
	No_Slave = 0;
  e2:	10 92 18 01 	sts	0x0118, r1
	ss = 1;
  e6:	20 93 0e 01 	sts	0x010E, r18
	sr = 2;
  ea:	90 93 19 01 	sts	0x0119, r25
	ws = 3;
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	90 93 0d 01 	sts	0x010D, r25
	wr = 4;
  f4:	80 93 16 01 	sts	0x0116, r24
	as = 5;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	80 93 13 01 	sts	0x0113, r24
	ar = 6;
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 17 01 	sts	0x0117, r24
	rs = 7;
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	80 93 10 01 	sts	0x0110, r24
 10a:	08 95       	ret

0000010c <Master_TX>:
			
}

//Master transmission to slave
void Master_TX(volatile uint8_t data)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01
		/* Start transmission */

		SPDR = data;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <Master_TX+0x10>

}
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <Master_RX>:

uint8_t Master_RX(volatile uint8_t data){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	1f 92       	push	r1
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	89 83       	std	Y+1, r24	; 0x01

		/* Start transmission */
		SPDR = data;
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 13a:	0d b4       	in	r0, 0x2d	; 45
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <Master_RX+0x10>
		
		return SPDR;
 140:	8e b5       	in	r24, 0x2e	; 46
}
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <__vector_3>:
	sensor_data = Master_RX(0x01);	//sending dummy
}

//Receive function. Data is transmitted from the control slave
ISR(INT2_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 170:	2c 98       	cbi	0x05, 4	; 5
	//case wanted data : 0x01 = wheel, 0x10 = arm, 0x11 = RFID, 0x02 = sensor_data
	if(wanted_data == wr)
 172:	80 91 0c 01 	lds	r24, 0x010C
 176:	90 91 16 01 	lds	r25, 0x0116
 17a:	89 13       	cpse	r24, r25
 17c:	05 c0       	rjmp	.+10     	; 0x188 <__vector_3+0x3e>
	{
		wheel_steering_data = Master_RX(0x01);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	d4 df       	rcall	.-88     	; 0x12a <Master_RX>
 182:	80 93 0f 01 	sts	0x010F, r24
 186:	11 c0       	rjmp	.+34     	; 0x1aa <__vector_3+0x60>
	}
	else if(wanted_data == sr)
 188:	90 91 19 01 	lds	r25, 0x0119
 18c:	89 13       	cpse	r24, r25
 18e:	05 c0       	rjmp	.+10     	; 0x19a <__vector_3+0x50>
	{
		sensor_data = Master_RX(0x01);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	cb df       	rcall	.-106    	; 0x12a <Master_RX>
 194:	80 93 01 01 	sts	0x0101, r24
 198:	08 c0       	rjmp	.+16     	; 0x1aa <__vector_3+0x60>
	}
	else if(wanted_data == ar)
 19a:	90 91 17 01 	lds	r25, 0x0117
 19e:	89 13       	cpse	r24, r25
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__vector_3+0x60>
	{
		robot_arm_data = Master_RX(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	c2 df       	rcall	.-124    	; 0x12a <Master_RX>
 1a6:	80 93 00 01 	sts	0x0100, r24
	}
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_2>:
*/


//Receive function. Data is transmitted from the sensor slave.
ISR(INT1_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	0b b6       	in	r0, 0x3b	; 59
 1dc:	0f 92       	push	r0
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB3);		//slave select
 1f6:	2b 98       	cbi	0x05, 3	; 5
	sensor_data = Master_RX(0x01);	//sending dummy
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	97 df       	rcall	.-210    	; 0x12a <Master_RX>
 1fc:	80 93 01 01 	sts	0x0101, r24
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0b be       	out	0x3b, r0	; 59
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <Slave_Select>:


//Selects slave. PORTB4 = Control_Slave, PORTB3 = Sensor_Slave
void Slave_Select(uint8_t slave)
{
	if(slave == Control_Slave)
 226:	90 91 1a 01 	lds	r25, 0x011A
 22a:	89 13       	cpse	r24, r25
 22c:	03 c0       	rjmp	.+6      	; 0x234 <Slave_Select+0xe>
	{
		PORTB |= (1 << PORTB3);
 22e:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << PORTB4);
 230:	2c 98       	cbi	0x05, 4	; 5
 232:	08 95       	ret

	}
	else if (slave == Sensor_Slave)
 234:	90 91 14 01 	lds	r25, 0x0114
 238:	89 13       	cpse	r24, r25
 23a:	03 c0       	rjmp	.+6      	; 0x242 <Slave_Select+0x1c>
	{
		PORTB |= (1 << PORTB4);
 23c:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= ~(1 << PORTB3);
 23e:	2b 98       	cbi	0x05, 3	; 5
 240:	08 95       	ret
		
	}
	else
	{
		PORTB |= (1 << PORTB4);
 242:	2c 9a       	sbi	0x05, 4	; 5
		PORTB |= (1 << PORTB3);
 244:	2b 9a       	sbi	0x05, 3	; 5
 246:	08 95       	ret

00000248 <TX_Protocol>:

// a = arm, s = sensor data, w = wheel data, r = rfid data
void TX_Protocol(uint8_t component)
{

	if(component == ss)
 248:	90 91 0e 01 	lds	r25, 0x010E
 24c:	89 13       	cpse	r24, r25
 24e:	02 c0       	rjmp	.+4      	; 0x254 <TX_Protocol+0xc>
	{
		Master_TX(0b10000100);
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	5c cf       	rjmp	.-328    	; 0x10c <Master_TX>
	}
	else if(component == ws)
 254:	90 91 0d 01 	lds	r25, 0x010D
 258:	89 13       	cpse	r24, r25
 25a:	02 c0       	rjmp	.+4      	; 0x260 <TX_Protocol+0x18>
	{
		Master_TX(0b10000101);
 25c:	85 e8       	ldi	r24, 0x85	; 133
 25e:	56 cf       	rjmp	.-340    	; 0x10c <Master_TX>
	}
	else if(component == as)
 260:	90 91 13 01 	lds	r25, 0x0113
 264:	89 13       	cpse	r24, r25
 266:	02 c0       	rjmp	.+4      	; 0x26c <TX_Protocol+0x24>
	{
		Master_TX(0b10000110);
 268:	86 e8       	ldi	r24, 0x86	; 134
 26a:	50 cf       	rjmp	.-352    	; 0x10c <Master_TX>
	}
	else if(component == sr)
 26c:	90 91 19 01 	lds	r25, 0x0119
 270:	89 13       	cpse	r24, r25
 272:	02 c0       	rjmp	.+4      	; 0x278 <TX_Protocol+0x30>
	{
		Master_TX(0b00000100);
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	4a cf       	rjmp	.-364    	; 0x10c <Master_TX>
	}
	else if(component == wr)
 278:	90 91 16 01 	lds	r25, 0x0116
 27c:	89 13       	cpse	r24, r25
 27e:	02 c0       	rjmp	.+4      	; 0x284 <TX_Protocol+0x3c>
	{
		Master_TX(0b00000101);
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	44 cf       	rjmp	.-376    	; 0x10c <Master_TX>
	}
	else if(component == ar)
 284:	90 91 17 01 	lds	r25, 0x0117
 288:	89 13       	cpse	r24, r25
 28a:	02 c0       	rjmp	.+4      	; 0x290 <TX_Protocol+0x48>
	{
		Master_TX(0b00000110);
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	3e cf       	rjmp	.-388    	; 0x10c <Master_TX>
	}
	else if(component == rs)
 290:	90 91 10 01 	lds	r25, 0x0110
 294:	89 13       	cpse	r24, r25
 296:	02 c0       	rjmp	.+4      	; 0x29c <TX_Protocol+0x54>
	{
		Master_TX(0b10101011);
 298:	8b ea       	ldi	r24, 0xAB	; 171
 29a:	38 cf       	rjmp	.-400    	; 0x10c <Master_TX>
 29c:	08 95       	ret

0000029e <TX_sensor_data>:


/* Function that transmits sensor data to the control slave. */
void TX_sensor_data()
{
	Slave_Select(Control_Slave);
 29e:	80 91 1a 01 	lds	r24, 0x011A
 2a2:	c1 df       	rcall	.-126    	; 0x226 <Slave_Select>
	TX_Protocol(ss);
 2a4:	80 91 0e 01 	lds	r24, 0x010E
 2a8:	cf df       	rcall	.-98     	; 0x248 <TX_Protocol>
	sensor_data = 0xAA;
 2aa:	8a ea       	ldi	r24, 0xAA	; 170
 2ac:	80 93 01 01 	sts	0x0101, r24
	Slave_Select(No_Slave);
 2b0:	80 91 18 01 	lds	r24, 0x0118
 2b4:	b8 df       	rcall	.-144    	; 0x226 <Slave_Select>
	Slave_Select(Control_Slave);
 2b6:	80 91 1a 01 	lds	r24, 0x011A
 2ba:	b5 df       	rcall	.-150    	; 0x226 <Slave_Select>
	Master_TX(sensor_data);
 2bc:	80 91 01 01 	lds	r24, 0x0101
 2c0:	25 cf       	rjmp	.-438    	; 0x10c <Master_TX>

000002c2 <RX_sensor_data>:


/* Function that tells the sensor slave to transmit sensor data. */
void RX_sensor_data()
{
	wanted_data = sr;
 2c2:	80 91 19 01 	lds	r24, 0x0119
 2c6:	80 93 0c 01 	sts	0x010C, r24
	Slave_Select(Sensor_Slave);
 2ca:	80 91 14 01 	lds	r24, 0x0114
 2ce:	ab df       	rcall	.-170    	; 0x226 <Slave_Select>
	TX_Protocol(sr);
 2d0:	80 91 19 01 	lds	r24, 0x0119
 2d4:	b9 df       	rcall	.-142    	; 0x248 <TX_Protocol>
	Slave_Select(No_Slave);
 2d6:	80 91 18 01 	lds	r24, 0x0118
 2da:	a5 cf       	rjmp	.-182    	; 0x226 <Slave_Select>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
