
Communication_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00000390  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000079e  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028f  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000517  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ec  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000211  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003df  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	52 c0       	rjmp	.+164    	; 0xae <__vector_2>
   a:	00 00       	nop
   c:	83 c0       	rjmp	.+262    	; 0x114 <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 31       	cpi	r26, 0x1C	; 28
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6f d0       	rcall	.+222    	; 0x188 <main>
  aa:	26 c1       	rjmp	.+588    	; 0x2f8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_2>:
#include "Communication_Module.h"
#include "Master_communication.h"
#include <avr/interrupt.h>

ISR(INT1_vect)			//Receive function. Data is transmitted from the control slave
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	Slave_Select(Sensor_Slave);	//slave select
  d4:	80 91 14 01 	lds	r24, 0x0114
  d8:	ac d0       	rcall	.+344    	; 0x232 <Slave_Select>
	sensor_data = Master_RX(0x01);	//sending dummy
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	9a d0       	rcall	.+308    	; 0x212 <Master_RX>
  de:	80 93 01 01 	sts	0x0101, r24
	Slave_Select(Control_Slave);
  e2:	80 91 1a 01 	lds	r24, 0x011A
  e6:	a5 d0       	rcall	.+330    	; 0x232 <Slave_Select>
	received = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 1b 01 	sts	0x011B, r24
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0b be       	out	0x3b, r0	; 59
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_3>:

ISR(INT2_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	0b b6       	in	r0, 0x3b	; 59
 120:	0f 92       	push	r0
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 13a:	2c 98       	cbi	0x05, 4	; 5
	//case wanted data : 0x01 = wheel, 0x10 = arm, 0x11 = RFID, 0x02 = sensor_data
	if(wanted_data == wr)
 13c:	80 91 0c 01 	lds	r24, 0x010C
 140:	90 91 16 01 	lds	r25, 0x0116
 144:	89 13       	cpse	r24, r25
 146:	05 c0       	rjmp	.+10     	; 0x152 <__vector_3+0x3e>
	{
		wheel_steering_data = Master_RX(0x01);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	63 d0       	rcall	.+198    	; 0x212 <Master_RX>
 14c:	80 93 0f 01 	sts	0x010F, r24
 150:	08 c0       	rjmp	.+16     	; 0x162 <__vector_3+0x4e>
	}
	else if(wanted_data == ar)
 152:	90 91 17 01 	lds	r25, 0x0117
 156:	89 13       	cpse	r24, r25
 158:	04 c0       	rjmp	.+8      	; 0x162 <__vector_3+0x4e>
	{
		robot_arm_data = Master_RX(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	5a d0       	rcall	.+180    	; 0x212 <Master_RX>
 15e:	80 93 00 01 	sts	0x0100, r24
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:

int main(void)
{
	SPI_Init_Master();
 188:	0a d0       	rcall	.+20     	; 0x19e <SPI_Init_Master>
	sei();
 18a:	78 94       	sei
	
    while(1)
    {
		RX_sensor_data();
 18c:	a8 d0       	rcall	.+336    	; 0x2de <RX_sensor_data>
		while(received == 0)
 18e:	80 91 1b 01 	lds	r24, 0x011B
 192:	88 23       	and	r24, r24
 194:	e1 f3       	breq	.-8      	; 0x18e <main+0x6>
		{
			
		}
		TX_sensor_data();
 196:	94 d0       	rcall	.+296    	; 0x2c0 <TX_sensor_data>
		received = 0;
 198:	10 92 1b 01 	sts	0x011B, r1
    }
 19c:	f7 cf       	rjmp	.-18     	; 0x18c <main+0x4>

0000019e <SPI_Init_Master>:
/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{

	//Sets MOSI, SCK and SS as outputs
	DDRB = 0xB8;
 19e:	88 eb       	ldi	r24, 0xB8	; 184
 1a0:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<PORTD3);
 1a2:	53 98       	cbi	0x0a, 3	; 10
	PORTB |= (1 << PORTB3)|(1 << PORTB4);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	88 61       	ori	r24, 0x18	; 24
 1a8:	85 b9       	out	0x05, r24	; 5
	//Sets the SPI-control register. Master settings and interrupt enable. SPR0, SPR1 sets clock to f/128.. 
	SPCR |= (1 << SPE)|(1 << MSTR)|(1 << SPR0)|(1 << SPR1);
 1aa:	8c b5       	in	r24, 0x2c	; 44
 1ac:	83 65       	ori	r24, 0x53	; 83
 1ae:	8c bd       	out	0x2c, r24	; 44
	//Enables interrupt 2
	EICRA = 0b00111100;
 1b0:	8c e3       	ldi	r24, 0x3C	; 60
 1b2:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000110;
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	8d bb       	out	0x1d, r24	; 29
	//Enable global interrupt
	
	
	Sensor_Slave = 1;
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	20 93 14 01 	sts	0x0114, r18
	Control_Slave = 2;
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	90 93 1a 01 	sts	0x011A, r25
	No_Slave = 0;
 1c6:	10 92 18 01 	sts	0x0118, r1
	ss = 1;
 1ca:	20 93 0e 01 	sts	0x010E, r18
	sr = 2;
 1ce:	90 93 19 01 	sts	0x0119, r25
	ws = 3;
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	90 93 0d 01 	sts	0x010D, r25
	wr = 4;
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	90 93 16 01 	sts	0x0116, r25
	as = 5;
 1de:	95 e0       	ldi	r25, 0x05	; 5
 1e0:	90 93 13 01 	sts	0x0113, r25
	ar = 6;
 1e4:	80 93 17 01 	sts	0x0117, r24
	rs = 7;
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	80 93 10 01 	sts	0x0110, r24
	received = 0;
 1ee:	10 92 1b 01 	sts	0x011B, r1
 1f2:	08 95       	ret

000001f4 <Master_TX>:
			
}

//Master transmission to slave
void Master_TX(volatile uint8_t data)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	89 83       	std	Y+1, r24	; 0x01
		/* Start transmission */

		SPDR = data;
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <Master_TX+0x10>

}
 20a:	0f 90       	pop	r0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <Master_RX>:

uint8_t Master_RX(volatile uint8_t data){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	89 83       	std	Y+1, r24	; 0x01

		/* Start transmission */
		SPDR = data;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 222:	0d b4       	in	r0, 0x2d	; 45
 224:	07 fe       	sbrs	r0, 7
 226:	fd cf       	rjmp	.-6      	; 0x222 <Master_RX+0x10>
		
		return SPDR;
 228:	8e b5       	in	r24, 0x2e	; 46
}
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <Slave_Select>:



//Selects slave. PORTB4 = Control_Slave, PORTB3 = Sensor_Slave
void Slave_Select(volatile uint8_t slave)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	89 83       	std	Y+1, r24	; 0x01
	if(slave == Control_Slave)
 23e:	99 81       	ldd	r25, Y+1	; 0x01
 240:	80 91 1a 01 	lds	r24, 0x011A
 244:	98 13       	cpse	r25, r24
 246:	03 c0       	rjmp	.+6      	; 0x24e <Slave_Select+0x1c>
	{
		PORTB |= (1 << PORTB3);
 248:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << PORTB4);
 24a:	2c 98       	cbi	0x05, 4	; 5
 24c:	0a c0       	rjmp	.+20     	; 0x262 <Slave_Select+0x30>

	}
	else if (slave == Sensor_Slave)
 24e:	99 81       	ldd	r25, Y+1	; 0x01
 250:	80 91 14 01 	lds	r24, 0x0114
 254:	98 13       	cpse	r25, r24
 256:	03 c0       	rjmp	.+6      	; 0x25e <Slave_Select+0x2c>
	{
		PORTB |= (1 << PORTB4);
 258:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= ~(1 << PORTB3);
 25a:	2b 98       	cbi	0x05, 3	; 5
 25c:	02 c0       	rjmp	.+4      	; 0x262 <Slave_Select+0x30>
		
	}
	else
	{
		PORTB |= (1 << PORTB4);
 25e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB |= (1 << PORTB3);
 260:	2b 9a       	sbi	0x05, 3	; 5
	}
}
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <TX_Protocol>:

// a = arm, s = sensor data, w = wheel data, r = rfid data
void TX_Protocol(uint8_t component)
{

	if(component == ss)
 26a:	90 91 0e 01 	lds	r25, 0x010E
 26e:	89 13       	cpse	r24, r25
 270:	02 c0       	rjmp	.+4      	; 0x276 <TX_Protocol+0xc>
	{
		Master_TX(0b10000100);
 272:	84 e8       	ldi	r24, 0x84	; 132
 274:	bf cf       	rjmp	.-130    	; 0x1f4 <Master_TX>
	}
	else if(component == ws)
 276:	90 91 0d 01 	lds	r25, 0x010D
 27a:	89 13       	cpse	r24, r25
 27c:	02 c0       	rjmp	.+4      	; 0x282 <TX_Protocol+0x18>
	{
		Master_TX(0b10000101);
 27e:	85 e8       	ldi	r24, 0x85	; 133
 280:	b9 cf       	rjmp	.-142    	; 0x1f4 <Master_TX>
	}
	else if(component == as)
 282:	90 91 13 01 	lds	r25, 0x0113
 286:	89 13       	cpse	r24, r25
 288:	02 c0       	rjmp	.+4      	; 0x28e <TX_Protocol+0x24>
	{
		Master_TX(0b10000110);
 28a:	86 e8       	ldi	r24, 0x86	; 134
 28c:	b3 cf       	rjmp	.-154    	; 0x1f4 <Master_TX>
	}
	else if(component == sr)
 28e:	90 91 19 01 	lds	r25, 0x0119
 292:	89 13       	cpse	r24, r25
 294:	02 c0       	rjmp	.+4      	; 0x29a <TX_Protocol+0x30>
	{
		Master_TX(0b00000100);
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	ad cf       	rjmp	.-166    	; 0x1f4 <Master_TX>
	}
	else if(component == wr)
 29a:	90 91 16 01 	lds	r25, 0x0116
 29e:	89 13       	cpse	r24, r25
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <TX_Protocol+0x3c>
	{
		Master_TX(0b00000101);
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	a7 cf       	rjmp	.-178    	; 0x1f4 <Master_TX>
	}
	else if(component == ar)
 2a6:	90 91 17 01 	lds	r25, 0x0117
 2aa:	89 13       	cpse	r24, r25
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <TX_Protocol+0x48>
	{
		Master_TX(0b00000110);
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	a1 cf       	rjmp	.-190    	; 0x1f4 <Master_TX>
	}
	else if(component == rs)
 2b2:	90 91 10 01 	lds	r25, 0x0110
 2b6:	89 13       	cpse	r24, r25
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <TX_Protocol+0x54>
	{
		Master_TX(0b10101011);
 2ba:	8b ea       	ldi	r24, 0xAB	; 171
 2bc:	9b cf       	rjmp	.-202    	; 0x1f4 <Master_TX>
 2be:	08 95       	ret

000002c0 <TX_sensor_data>:


/* Function that transmits sensor data to the control slave. */
void TX_sensor_data()
{
	Slave_Select(Control_Slave);
 2c0:	80 91 1a 01 	lds	r24, 0x011A
 2c4:	b6 df       	rcall	.-148    	; 0x232 <Slave_Select>
	TX_Protocol(ss);
 2c6:	80 91 0e 01 	lds	r24, 0x010E
 2ca:	cf df       	rcall	.-98     	; 0x26a <TX_Protocol>
	Slave_Select(No_Slave);
 2cc:	80 91 18 01 	lds	r24, 0x0118
 2d0:	b0 df       	rcall	.-160    	; 0x232 <Slave_Select>
	Slave_Select(Control_Slave);
 2d2:	80 91 1a 01 	lds	r24, 0x011A
 2d6:	ad df       	rcall	.-166    	; 0x232 <Slave_Select>
	Master_TX(sensor_data);
 2d8:	80 91 01 01 	lds	r24, 0x0101
 2dc:	8b cf       	rjmp	.-234    	; 0x1f4 <Master_TX>

000002de <RX_sensor_data>:


/* Function that tells the sensor slave to transmit sensor data. */
void RX_sensor_data()
{
	wanted_data = sr;
 2de:	80 91 19 01 	lds	r24, 0x0119
 2e2:	80 93 0c 01 	sts	0x010C, r24
	Slave_Select(Sensor_Slave);
 2e6:	80 91 14 01 	lds	r24, 0x0114
 2ea:	a3 df       	rcall	.-186    	; 0x232 <Slave_Select>
	TX_Protocol(sr);
 2ec:	80 91 19 01 	lds	r24, 0x0119
 2f0:	bc df       	rcall	.-136    	; 0x26a <TX_Protocol>
	Slave_Select(No_Slave);
 2f2:	80 91 18 01 	lds	r24, 0x0118
 2f6:	9d cf       	rjmp	.-198    	; 0x232 <Slave_Select>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
