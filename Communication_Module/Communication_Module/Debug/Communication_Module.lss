
Communication_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000074b  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000231  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004fa  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001dc  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000378  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	e1 c0       	rjmp	.+450    	; 0x1cc <__vector_2>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 31       	cpi	r26, 0x1B	; 27
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	13 c1       	rjmp	.+550    	; 0x2d2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "Communication_Module.h"
#include "Master_communication.h"

int main(void)
{
	SPI_Init_Master();
  ae:	03 d0       	rcall	.+6      	; 0xb6 <SPI_Init_Master>
    while(1)
    {
     RX_sensor_data();
  b0:	03 d1       	rcall	.+518    	; 0x2b8 <RX_sensor_data>
	 TX_sensor_data();
  b2:	f3 d0       	rcall	.+486    	; 0x29a <TX_sensor_data>
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <main+0x2>

000000b6 <SPI_Init_Master>:
/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{

	//Sets MOSI, SCK and SS as outputs
	DDRB = 0xB0;
  b6:	80 eb       	ldi	r24, 0xB0	; 176
  b8:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB3)|(1 << PORTB4);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	88 61       	ori	r24, 0x18	; 24
  be:	85 b9       	out	0x05, r24	; 5
	//Sets the SPI-control register. Master settings and interrupt enable. SPR0, SPR1 sets clock to f/128.. 
	SPCR |= (1 << SPE)|(1 << MSTR)|(1 << SPR0)|(1 << SPR1);
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	83 65       	ori	r24, 0x53	; 83
  c4:	8c bd       	out	0x2c, r24	; 44
	//Enables interrupt 2
	EICRA = 0x3C;
  c6:	8c e3       	ldi	r24, 0x3C	; 60
  c8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x06;
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	8d bb       	out	0x1d, r24	; 29
	//Enable global interrupt
	sei();
  d0:	78 94       	sei
	
	Sensor_Slave = 1;
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	20 93 14 01 	sts	0x0114, r18
	Control_Slave = 2;
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	90 93 1a 01 	sts	0x011A, r25
	No_Slave = 0;
  de:	10 92 18 01 	sts	0x0118, r1
	ss = 1;
  e2:	20 93 0e 01 	sts	0x010E, r18
	sr = 2;
  e6:	90 93 19 01 	sts	0x0119, r25
	ws = 3;
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	90 93 0d 01 	sts	0x010D, r25
	wr = 4;
  f0:	94 e0       	ldi	r25, 0x04	; 4
  f2:	90 93 16 01 	sts	0x0116, r25
	as = 5;
  f6:	95 e0       	ldi	r25, 0x05	; 5
  f8:	90 93 13 01 	sts	0x0113, r25
	ar = 6;
  fc:	80 93 17 01 	sts	0x0117, r24
	rs = 7;
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	80 93 10 01 	sts	0x0110, r24
 106:	08 95       	ret

00000108 <Master_TX>:
			
}

//Master transmission to slave
void Master_TX(volatile uint8_t data)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
		/* Start transmission */

		SPDR = data;
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <Master_TX+0x10>

}
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <Master_RX>:

uint8_t Master_RX(volatile uint8_t data){
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	89 83       	std	Y+1, r24	; 0x01

		/* Start transmission */
		SPDR = data;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 136:	0d b4       	in	r0, 0x2d	; 45
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <Master_RX+0x10>
		
		return SPDR;
 13c:	8e b5       	in	r24, 0x2e	; 46
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <__vector_3>:
	sensor_data = Master_RX(0x01);	//sending dummy
}

//Receive function. Data is transmitted from the control slave
ISR(INT2_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 16c:	2c 98       	cbi	0x05, 4	; 5
	//case wanted data : 0x01 = wheel, 0x10 = arm, 0x11 = RFID, 0x02 = sensor_data
	if(wanted_data == wr)
 16e:	80 91 0c 01 	lds	r24, 0x010C
 172:	90 91 16 01 	lds	r25, 0x0116
 176:	89 13       	cpse	r24, r25
 178:	05 c0       	rjmp	.+10     	; 0x184 <__vector_3+0x3e>
	{
		wheel_steering_data = Master_RX(0x01);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	d4 df       	rcall	.-88     	; 0x126 <Master_RX>
 17e:	80 93 0f 01 	sts	0x010F, r24
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <__vector_3+0x60>
	}
	else if(wanted_data == sr)
 184:	90 91 19 01 	lds	r25, 0x0119
 188:	89 13       	cpse	r24, r25
 18a:	05 c0       	rjmp	.+10     	; 0x196 <__vector_3+0x50>
	{
		sensor_data = Master_RX(0x01);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	cb df       	rcall	.-106    	; 0x126 <Master_RX>
 190:	80 93 01 01 	sts	0x0101, r24
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <__vector_3+0x60>
	}
	else if(wanted_data == ar)
 196:	90 91 17 01 	lds	r25, 0x0117
 19a:	89 13       	cpse	r24, r25
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__vector_3+0x60>
	{
		robot_arm_data = Master_RX(0x01);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	c2 df       	rcall	.-124    	; 0x126 <Master_RX>
 1a2:	80 93 00 01 	sts	0x0100, r24
	}
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0b be       	out	0x3b, r0	; 59
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_2>:
*/


//Receive function. Data is transmitted from the sensor slave.
ISR(INT1_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	0b b6       	in	r0, 0x3b	; 59
 1d8:	0f 92       	push	r0
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB3);	//slave select
 1f2:	2b 98       	cbi	0x05, 3	; 5
	sensor_data = Master_RX(0x01);	//sending dummy
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	97 df       	rcall	.-210    	; 0x126 <Master_RX>
 1f8:	80 93 01 01 	sts	0x0101, r24
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0b be       	out	0x3b, r0	; 59
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <Slave_Select>:


//Selects slave. PORTB4 = Control_Slave, PORTB3 = Sensor_Slave
void Slave_Select(uint8_t slave)
{
	if(slave == Control_Slave)
 222:	90 91 1a 01 	lds	r25, 0x011A
 226:	89 13       	cpse	r24, r25
 228:	03 c0       	rjmp	.+6      	; 0x230 <Slave_Select+0xe>
	{
		PORTB |= (1 << PORTB3);
 22a:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << PORTB4);
 22c:	2c 98       	cbi	0x05, 4	; 5
 22e:	08 95       	ret

	}
	else if (slave == Sensor_Slave)
 230:	90 91 14 01 	lds	r25, 0x0114
 234:	89 13       	cpse	r24, r25
 236:	03 c0       	rjmp	.+6      	; 0x23e <Slave_Select+0x1c>
	{
		PORTB |= (1 << PORTB4);
 238:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= ~(1 << PORTB3);
 23a:	2b 98       	cbi	0x05, 3	; 5
 23c:	08 95       	ret
		
	}
	else
	{
		PORTB |= (1 << PORTB4);
 23e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB |= (1 << PORTB3);
 240:	2b 9a       	sbi	0x05, 3	; 5
 242:	08 95       	ret

00000244 <TX_Protocol>:

// a = arm, s = sensor data, w = wheel data, r = rfid data
void TX_Protocol(uint8_t component)
{

	if(component == ss)
 244:	90 91 0e 01 	lds	r25, 0x010E
 248:	89 13       	cpse	r24, r25
 24a:	02 c0       	rjmp	.+4      	; 0x250 <TX_Protocol+0xc>
	{
		Master_TX(0b10000100);
 24c:	84 e8       	ldi	r24, 0x84	; 132
 24e:	5c cf       	rjmp	.-328    	; 0x108 <Master_TX>
	}
	else if(component == ws)
 250:	90 91 0d 01 	lds	r25, 0x010D
 254:	89 13       	cpse	r24, r25
 256:	02 c0       	rjmp	.+4      	; 0x25c <TX_Protocol+0x18>
	{
		Master_TX(0b10000101);
 258:	85 e8       	ldi	r24, 0x85	; 133
 25a:	56 cf       	rjmp	.-340    	; 0x108 <Master_TX>
	}
	else if(component == as)
 25c:	90 91 13 01 	lds	r25, 0x0113
 260:	89 13       	cpse	r24, r25
 262:	02 c0       	rjmp	.+4      	; 0x268 <TX_Protocol+0x24>
	{
		Master_TX(0b10000110);
 264:	86 e8       	ldi	r24, 0x86	; 134
 266:	50 cf       	rjmp	.-352    	; 0x108 <Master_TX>
	}
	else if(component == sr)
 268:	90 91 19 01 	lds	r25, 0x0119
 26c:	89 13       	cpse	r24, r25
 26e:	02 c0       	rjmp	.+4      	; 0x274 <TX_Protocol+0x30>
	{
		Master_TX(0b00000100);
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	4a cf       	rjmp	.-364    	; 0x108 <Master_TX>
	}
	else if(component == wr)
 274:	90 91 16 01 	lds	r25, 0x0116
 278:	89 13       	cpse	r24, r25
 27a:	02 c0       	rjmp	.+4      	; 0x280 <TX_Protocol+0x3c>
	{
		Master_TX(0b00000101);
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	44 cf       	rjmp	.-376    	; 0x108 <Master_TX>
	}
	else if(component == ar)
 280:	90 91 17 01 	lds	r25, 0x0117
 284:	89 13       	cpse	r24, r25
 286:	02 c0       	rjmp	.+4      	; 0x28c <TX_Protocol+0x48>
	{
		Master_TX(0b00000110);
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	3e cf       	rjmp	.-388    	; 0x108 <Master_TX>
	}
	else if(component == rs)
 28c:	90 91 10 01 	lds	r25, 0x0110
 290:	89 13       	cpse	r24, r25
 292:	02 c0       	rjmp	.+4      	; 0x298 <TX_Protocol+0x54>
	{
		Master_TX(0b10101011);
 294:	8b ea       	ldi	r24, 0xAB	; 171
 296:	38 cf       	rjmp	.-400    	; 0x108 <Master_TX>
 298:	08 95       	ret

0000029a <TX_sensor_data>:


/* Function that transmits sensor data to the control slave. */
void TX_sensor_data()
{
	Slave_Select(Control_Slave);
 29a:	80 91 1a 01 	lds	r24, 0x011A
 29e:	c1 df       	rcall	.-126    	; 0x222 <Slave_Select>
	TX_Protocol(ss);
 2a0:	80 91 0e 01 	lds	r24, 0x010E
 2a4:	cf df       	rcall	.-98     	; 0x244 <TX_Protocol>
	Slave_Select(No_Slave);
 2a6:	80 91 18 01 	lds	r24, 0x0118
 2aa:	bb df       	rcall	.-138    	; 0x222 <Slave_Select>
	Slave_Select(Control_Slave);
 2ac:	80 91 1a 01 	lds	r24, 0x011A
 2b0:	b8 df       	rcall	.-144    	; 0x222 <Slave_Select>
	Master_TX(sensor_data);
 2b2:	80 91 01 01 	lds	r24, 0x0101
 2b6:	28 cf       	rjmp	.-432    	; 0x108 <Master_TX>

000002b8 <RX_sensor_data>:


/* Function that tells the sensor slave to transmit sensor data. */
void RX_sensor_data()
{
	wanted_data = sr;
 2b8:	80 91 19 01 	lds	r24, 0x0119
 2bc:	80 93 0c 01 	sts	0x010C, r24
	Slave_Select(Sensor_Slave);
 2c0:	80 91 14 01 	lds	r24, 0x0114
 2c4:	ae df       	rcall	.-164    	; 0x222 <Slave_Select>
	TX_Protocol(sr);
 2c6:	80 91 19 01 	lds	r24, 0x0119
 2ca:	bc df       	rcall	.-136    	; 0x244 <TX_Protocol>
	Slave_Select(No_Slave);
 2cc:	80 91 18 01 	lds	r24, 0x0118
 2d0:	a8 cf       	rjmp	.-176    	; 0x222 <Slave_Select>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
