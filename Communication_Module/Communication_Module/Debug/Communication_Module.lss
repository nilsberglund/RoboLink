
Communication_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  000004f6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a40  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000319  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000722  00000000  00000000  00001ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000026b  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000640  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	61 c0       	rjmp	.+194    	; 0xcc <__vector_2>
   a:	00 00       	nop
   c:	8f c0       	rjmp	.+286    	; 0x12c <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	af c0       	rjmp	.+350    	; 0x1a0 <__vector_16>
  42:	00 00       	nop
  44:	d4 c0       	rjmp	.+424    	; 0x1ee <__vector_17>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__vector_20>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 31       	cpi	r26, 0x1D	; 29
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	19 d1       	rcall	.+562    	; 0x2dc <main>
  aa:	d9 c1       	rjmp	.+946    	; 0x45e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <setupBluetoothRXTX>:
// 	sei(); //Enable global interrupts again
// }

void setupBluetoothRXTX()
{
	waiting_for_instruction = 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 16 01 	sts	0x0116, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1 << RXCIE0); //Enable RX0, TX0 and RX complete interrupt
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //set data length to 8-bit;
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0x00;
  c0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07; //Sets baudvalue in AVR to 7, which gives baude rate 115200. baudvalue = (Fcpu/baudrate*16)-1	
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	80 93 c4 00 	sts	0x00C4, r24
  ca:	08 95       	ret

000000cc <__vector_2>:
#include "Master_communication.h"
#include <avr/interrupt.h>
#include "Bluetooth_Receiver.h"

ISR(INT1_vect)			//Receive function. Data is transmitted from the control slave
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	Slave_Select(Sensor_Slave);	//slave select
  f2:	80 91 17 01 	lds	r24, 0x0117
  f6:	47 d1       	rcall	.+654    	; 0x386 <Slave_Select>
	sensor_data = Master_RX(0x01);	//sending dummy
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	35 d1       	rcall	.+618    	; 0x366 <Master_RX>
  fc:	80 93 01 01 	sts	0x0101, r24
	Slave_Select(Control_Slave);
 100:	80 91 1c 01 	lds	r24, 0x011C
 104:	40 d1       	rcall	.+640    	; 0x386 <Slave_Select>
	//received = 1;
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0b be       	out	0x3b, r0	; 59
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_3>:

ISR(INT2_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	0b b6       	in	r0, 0x3b	; 59
 138:	0f 92       	push	r0
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 152:	2c 98       	cbi	0x05, 4	; 5
	//case wanted data : 0x01 = wheel, 0x10 = arm, 0x11 = RFID, 0x02 = sensor_data
	if(wanted_data == wr)
 154:	80 91 0c 01 	lds	r24, 0x010C
 158:	90 91 18 01 	lds	r25, 0x0118
 15c:	89 13       	cpse	r24, r25
 15e:	05 c0       	rjmp	.+10     	; 0x16a <__vector_3+0x3e>
	{
		wheel_steering_data = Master_RX(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	01 d1       	rcall	.+514    	; 0x366 <Master_RX>
 164:	80 93 0f 01 	sts	0x010F, r24
 168:	08 c0       	rjmp	.+16     	; 0x17a <__vector_3+0x4e>
	}
	else if(wanted_data == ar)
 16a:	90 91 19 01 	lds	r25, 0x0119
 16e:	89 13       	cpse	r24, r25
 170:	04 c0       	rjmp	.+8      	; 0x17a <__vector_3+0x4e>
	{
		robot_arm_data = Master_RX(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	f8 d0       	rcall	.+496    	; 0x366 <Master_RX>
 176:	80 93 00 01 	sts	0x0100, r24
	}
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0b be       	out	0x3b, r0	; 59
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0b b6       	in	r0, 0x3b	; 59
 1ac:	0f 92       	push	r0
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	RX_sensor_data();
 1c6:	35 d1       	rcall	.+618    	; 0x432 <RX_sensor_data>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_17>:

ISR(TIMER0_COMPB_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	0b b6       	in	r0, 0x3b	; 59
 1fa:	0f 92       	push	r0
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	TX_sensor_data();
 214:	ff d0       	rcall	.+510    	; 0x414 <TX_sensor_data>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_20>:

ISR(USART0_RX_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	0b b6       	in	r0, 0x3b	; 59
 248:	0f 92       	push	r0
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	data = UDR0;
 262:	80 91 c6 00 	lds	r24, 0x00C6
 266:	80 93 15 01 	sts	0x0115, r24
	if (waiting_for_instruction == 1)
 26a:	90 91 16 01 	lds	r25, 0x0116
 26e:	91 30       	cpi	r25, 0x01	; 1
 270:	b1 f4       	brne	.+44     	; 0x29e <__vector_20+0x62>
	{
		waiting_for_instruction = 0;
 272:	10 92 16 01 	sts	0x0116, r1
		if (data == 1)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	19 f4       	brne	.+6      	; 0x280 <__vector_20+0x44>
		{
			component = WHEEL;
 27a:	80 93 11 01 	sts	0x0111, r24
 27e:	1b c0       	rjmp	.+54     	; 0x2b6 <__vector_20+0x7a>
		}else if(data == 2)
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	19 f4       	brne	.+6      	; 0x28a <__vector_20+0x4e>
		{
			component = ARM;
 284:	80 93 11 01 	sts	0x0111, r24
 288:	16 c0       	rjmp	.+44     	; 0x2b6 <__vector_20+0x7a>
		}else if(data == 3)
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	19 f4       	brne	.+6      	; 0x294 <__vector_20+0x58>
		{
			component = CALINSTR;
 28e:	80 93 11 01 	sts	0x0111, r24
 292:	11 c0       	rjmp	.+34     	; 0x2b6 <__vector_20+0x7a>
		}else if(data == 4)
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	79 f4       	brne	.+30     	; 0x2b6 <__vector_20+0x7a>
		{
			component = PCONINSTR;
 298:	80 93 11 01 	sts	0x0111, r24
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <__vector_20+0x7a>
		}
	}else
	{
		waiting_for_instruction = 1;
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	90 93 16 01 	sts	0x0116, r25
		if (component == WHEEL)
 2a4:	90 91 11 01 	lds	r25, 0x0111
 2a8:	91 30       	cpi	r25, 0x01	; 1
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <__vector_20+0x7a>
		{
			
		}else if (component == ARM)
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <__vector_20+0x7a>
		{
			robot_arm_data = data;
 2b0:	80 93 00 01 	sts	0x0100, r24
			TX_arm_data();
 2b4:	cb d0       	rcall	.+406    	; 0x44c <TX_arm_data>
		{
			
		}
	}
	
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0b be       	out	0x3b, r0	; 59
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:

int main(void)
{
	SPI_Init_Master();
 2dc:	02 d0       	rcall	.+4      	; 0x2e2 <SPI_Init_Master>
	setupBluetoothRXTX();
 2de:	e7 de       	rcall	.-562    	; 0xae <setupBluetoothRXTX>
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0x4>

000002e2 <SPI_Init_Master>:
 void RX_wheel_data()
 {
	 wanted_data = wr;
	 Slave_Select(Control_Slave);
	 TX_Protocol(wr);
	 Slave_Select(No_Slave);
 2e2:	88 eb       	ldi	r24, 0xB8	; 184
 2e4:	84 b9       	out	0x04, r24	; 4
 2e6:	53 98       	cbi	0x0a, 3	; 10
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	88 61       	ori	r24, 0x18	; 24
 2ec:	85 b9       	out	0x05, r24	; 5
 2ee:	8c b5       	in	r24, 0x2c	; 44
 2f0:	83 65       	ori	r24, 0x53	; 83
 2f2:	8c bd       	out	0x2c, r24	; 44
 2f4:	8c e3       	ldi	r24, 0x3C	; 60
 2f6:	80 93 69 00 	sts	0x0069, r24
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	8d bb       	out	0x1d, r24	; 29
 2fe:	78 94       	sei
 300:	14 bc       	out	0x24, r1	; 36
 302:	95 e0       	ldi	r25, 0x05	; 5
 304:	95 bd       	out	0x25, r25	; 37
 306:	80 93 6e 00 	sts	0x006E, r24
 30a:	31 e0       	ldi	r19, 0x01	; 1
 30c:	30 93 17 01 	sts	0x0117, r19
 310:	22 e0       	ldi	r18, 0x02	; 2
 312:	20 93 1c 01 	sts	0x011C, r18
 316:	10 92 1a 01 	sts	0x011A, r1
 31a:	30 93 0e 01 	sts	0x010E, r19
 31e:	20 93 1b 01 	sts	0x011B, r18
 322:	23 e0       	ldi	r18, 0x03	; 3
 324:	20 93 0d 01 	sts	0x010D, r18
 328:	24 e0       	ldi	r18, 0x04	; 4
 32a:	20 93 18 01 	sts	0x0118, r18
 32e:	90 93 14 01 	sts	0x0114, r25
 332:	80 93 19 01 	sts	0x0119, r24
 336:	87 e0       	ldi	r24, 0x07	; 7
 338:	80 93 10 01 	sts	0x0110, r24
 33c:	8a e7       	ldi	r24, 0x7A	; 122
 33e:	87 bd       	out	0x27, r24	; 39
 340:	8d e7       	ldi	r24, 0x7D	; 125
 342:	88 bd       	out	0x28, r24	; 40
 344:	16 bc       	out	0x26, r1	; 38
 346:	08 95       	ret

00000348 <Master_TX>:
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	1f 92       	push	r1
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8e bd       	out	0x2e, r24	; 46
 358:	0d b4       	in	r0, 0x2d	; 45
 35a:	07 fe       	sbrs	r0, 7
 35c:	fd cf       	rjmp	.-6      	; 0x358 <Master_TX+0x10>
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <Master_RX>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	8e bd       	out	0x2e, r24	; 46
 376:	0d b4       	in	r0, 0x2d	; 45
 378:	07 fe       	sbrs	r0, 7
 37a:	fd cf       	rjmp	.-6      	; 0x376 <Master_RX+0x10>
 37c:	8e b5       	in	r24, 0x2e	; 46
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <Slave_Select>:
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	1f 92       	push	r1
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	89 83       	std	Y+1, r24	; 0x01
 392:	99 81       	ldd	r25, Y+1	; 0x01
 394:	80 91 1c 01 	lds	r24, 0x011C
 398:	98 13       	cpse	r25, r24
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <Slave_Select+0x1c>
 39c:	2b 9a       	sbi	0x05, 3	; 5
 39e:	2c 98       	cbi	0x05, 4	; 5
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <Slave_Select+0x30>
 3a2:	99 81       	ldd	r25, Y+1	; 0x01
 3a4:	80 91 17 01 	lds	r24, 0x0117
 3a8:	98 13       	cpse	r25, r24
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <Slave_Select+0x2c>
 3ac:	2c 9a       	sbi	0x05, 4	; 5
 3ae:	2b 98       	cbi	0x05, 3	; 5
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <Slave_Select+0x30>
 3b2:	2c 9a       	sbi	0x05, 4	; 5
 3b4:	2b 9a       	sbi	0x05, 3	; 5
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <TX_Protocol>:
 3be:	90 91 0e 01 	lds	r25, 0x010E
 3c2:	89 13       	cpse	r24, r25
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <TX_Protocol+0xc>
 3c6:	84 e8       	ldi	r24, 0x84	; 132
 3c8:	bf cf       	rjmp	.-130    	; 0x348 <Master_TX>
 3ca:	90 91 0d 01 	lds	r25, 0x010D
 3ce:	89 13       	cpse	r24, r25
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <TX_Protocol+0x18>
 3d2:	85 e8       	ldi	r24, 0x85	; 133
 3d4:	b9 cf       	rjmp	.-142    	; 0x348 <Master_TX>
 3d6:	90 91 14 01 	lds	r25, 0x0114
 3da:	89 13       	cpse	r24, r25
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <TX_Protocol+0x24>
 3de:	86 e8       	ldi	r24, 0x86	; 134
 3e0:	b3 cf       	rjmp	.-154    	; 0x348 <Master_TX>
 3e2:	90 91 1b 01 	lds	r25, 0x011B
 3e6:	89 13       	cpse	r24, r25
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <TX_Protocol+0x30>
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	ad cf       	rjmp	.-166    	; 0x348 <Master_TX>
 3ee:	90 91 18 01 	lds	r25, 0x0118
 3f2:	89 13       	cpse	r24, r25
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <TX_Protocol+0x3c>
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	a7 cf       	rjmp	.-178    	; 0x348 <Master_TX>
 3fa:	90 91 19 01 	lds	r25, 0x0119
 3fe:	89 13       	cpse	r24, r25
 400:	02 c0       	rjmp	.+4      	; 0x406 <TX_Protocol+0x48>
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	a1 cf       	rjmp	.-190    	; 0x348 <Master_TX>
 406:	90 91 10 01 	lds	r25, 0x0110
 40a:	89 13       	cpse	r24, r25
 40c:	02 c0       	rjmp	.+4      	; 0x412 <TX_Protocol+0x54>
 40e:	8b ea       	ldi	r24, 0xAB	; 171
 410:	9b cf       	rjmp	.-202    	; 0x348 <Master_TX>
 412:	08 95       	ret

00000414 <TX_sensor_data>:
 414:	80 91 1c 01 	lds	r24, 0x011C
 418:	b6 df       	rcall	.-148    	; 0x386 <Slave_Select>
 41a:	80 91 0e 01 	lds	r24, 0x010E
 41e:	cf df       	rcall	.-98     	; 0x3be <TX_Protocol>
 420:	80 91 1a 01 	lds	r24, 0x011A
 424:	b0 df       	rcall	.-160    	; 0x386 <Slave_Select>
 426:	80 91 1c 01 	lds	r24, 0x011C
 42a:	ad df       	rcall	.-166    	; 0x386 <Slave_Select>
 42c:	80 91 01 01 	lds	r24, 0x0101
 430:	8b cf       	rjmp	.-234    	; 0x348 <Master_TX>

00000432 <RX_sensor_data>:
 432:	80 91 1b 01 	lds	r24, 0x011B
 436:	80 93 0c 01 	sts	0x010C, r24
 43a:	80 91 17 01 	lds	r24, 0x0117
 43e:	a3 df       	rcall	.-186    	; 0x386 <Slave_Select>
 440:	80 91 1b 01 	lds	r24, 0x011B
 444:	bc df       	rcall	.-136    	; 0x3be <TX_Protocol>
 446:	80 91 1a 01 	lds	r24, 0x011A
 44a:	9d cf       	rjmp	.-198    	; 0x386 <Slave_Select>

0000044c <TX_arm_data>:
 }
 
 void TX_arm_data()
{
	Slave_Select(Control_Slave);
 44c:	80 91 1c 01 	lds	r24, 0x011C
 450:	9a df       	rcall	.-204    	; 0x386 <Slave_Select>
	TX_Protocol(as);
 452:	80 91 14 01 	lds	r24, 0x0114
 456:	b3 df       	rcall	.-154    	; 0x3be <TX_Protocol>
	Master_TX(robot_arm_data);
 458:	80 91 00 01 	lds	r24, 0x0100
 45c:	75 cf       	rjmp	.-278    	; 0x348 <Master_TX>

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
