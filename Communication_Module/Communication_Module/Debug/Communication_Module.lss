
Communication_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000424  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000078c  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028f  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000545  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000029c  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000274  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000575  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  00002655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	52 c0       	rjmp	.+164    	; 0xae <__vector_2>
   a:	00 00       	nop
   c:	80 c0       	rjmp	.+256    	; 0x10e <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	a0 c0       	rjmp	.+320    	; 0x182 <__vector_16>
  42:	00 00       	nop
  44:	c5 c0       	rjmp	.+394    	; 0x1d0 <__vector_17>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 31       	cpi	r26, 0x1A	; 26
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ba d0       	rcall	.+372    	; 0x21e <main>
  aa:	70 c1       	rjmp	.+736    	; 0x38c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_2>:
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
  d4:	80 91 14 01 	lds	r24, 0x0114
  d8:	f6 d0       	rcall	.+492    	; 0x2c6 <Slave_Select>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	e4 d0       	rcall	.+456    	; 0x2a6 <Master_RX>
  de:	80 93 01 01 	sts	0x0101, r24
  e2:	80 91 19 01 	lds	r24, 0x0119
  e6:	ef d0       	rcall	.+478    	; 0x2c6 <Slave_Select>
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	bf 91       	pop	r27
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	7f 91       	pop	r23
  f6:	6f 91       	pop	r22
  f8:	5f 91       	pop	r21
  fa:	4f 91       	pop	r20
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0b be       	out	0x3b, r0	; 59
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_3>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0b b6       	in	r0, 0x3b	; 59
 11a:	0f 92       	push	r0
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 134:	2c 98       	cbi	0x05, 4	; 5
 136:	80 91 0c 01 	lds	r24, 0x010C
 13a:	90 91 15 01 	lds	r25, 0x0115
 13e:	89 13       	cpse	r24, r25
 140:	05 c0       	rjmp	.+10     	; 0x14c <__vector_3+0x3e>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	b0 d0       	rcall	.+352    	; 0x2a6 <Master_RX>
 146:	80 93 0f 01 	sts	0x010F, r24
 14a:	08 c0       	rjmp	.+16     	; 0x15c <__vector_3+0x4e>
 14c:	90 91 16 01 	lds	r25, 0x0116
 150:	89 13       	cpse	r24, r25
 152:	04 c0       	rjmp	.+8      	; 0x15c <__vector_3+0x4e>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	a7 d0       	rcall	.+334    	; 0x2a6 <Master_RX>
 158:	80 93 00 01 	sts	0x0100, r24
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0b be       	out	0x3b, r0	; 59
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_16>:
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0b b6       	in	r0, 0x3b	; 59
 18e:	0f 92       	push	r0
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	e4 d0       	rcall	.+456    	; 0x372 <RX_sensor_data>
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_17>:
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	0b b6       	in	r0, 0x3b	; 59
 1dc:	0f 92       	push	r0
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	ae d0       	rcall	.+348    	; 0x354 <TX_sensor_data>
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0b be       	out	0x3b, r0	; 59
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <main>:
 21e:	01 d0       	rcall	.+2      	; 0x222 <SPI_Init_Master>
 220:	ff cf       	rjmp	.-2      	; 0x220 <main+0x2>

00000222 <SPI_Init_Master>:
/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{

	//Sets MOSI, SCK and SS as outputs
	DDRB = 0xB8;
 222:	88 eb       	ldi	r24, 0xB8	; 184
 224:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<PORTD3);
 226:	53 98       	cbi	0x0a, 3	; 10
	PORTB |= (1 << PORTB3)|(1 << PORTB4);
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	88 61       	ori	r24, 0x18	; 24
 22c:	85 b9       	out	0x05, r24	; 5
	//Sets the SPI-control register. Master settings and interrupt enable. SPR0, SPR1 sets clock to f/128.. 
	SPCR |= (1 << SPE)|(1 << MSTR)|(1 << SPR0)|(1 << SPR1);
 22e:	8c b5       	in	r24, 0x2c	; 44
 230:	83 65       	ori	r24, 0x53	; 83
 232:	8c bd       	out	0x2c, r24	; 44
	//Enables interrupt 2
	EICRA = 0b00111100;
 234:	8c e3       	ldi	r24, 0x3C	; 60
 236:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000110;
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	8d bb       	out	0x1d, r24	; 29
	//Enable global interrupt
	sei();
 23e:	78 94       	sei
	
	TCCR0A = 0;
 240:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 242:	95 e0       	ldi	r25, 0x05	; 5
 244:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0x06;
 246:	80 93 6e 00 	sts	0x006E, r24
	
	Sensor_Slave = 1;
 24a:	31 e0       	ldi	r19, 0x01	; 1
 24c:	30 93 14 01 	sts	0x0114, r19
	Control_Slave = 2;
 250:	22 e0       	ldi	r18, 0x02	; 2
 252:	20 93 19 01 	sts	0x0119, r18
	No_Slave = 0;
 256:	10 92 17 01 	sts	0x0117, r1
	ss = 1;
 25a:	30 93 0e 01 	sts	0x010E, r19
	sr = 2;
 25e:	20 93 18 01 	sts	0x0118, r18
	ws = 3;
 262:	23 e0       	ldi	r18, 0x03	; 3
 264:	20 93 0d 01 	sts	0x010D, r18
	wr = 4;
 268:	24 e0       	ldi	r18, 0x04	; 4
 26a:	20 93 15 01 	sts	0x0115, r18
	as = 5;
 26e:	90 93 13 01 	sts	0x0113, r25
	ar = 6;
 272:	80 93 16 01 	sts	0x0116, r24
	rs = 7;
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	80 93 10 01 	sts	0x0110, r24
	//received = 0;
	
	OCR0A = 122;
 27c:	8a e7       	ldi	r24, 0x7A	; 122
 27e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 125;
 280:	8d e7       	ldi	r24, 0x7D	; 125
 282:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0;
 284:	16 bc       	out	0x26, r1	; 38
 286:	08 95       	ret

00000288 <Master_TX>:
			
}

//Master transmission to slave
void Master_TX(volatile uint8_t data)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	1f 92       	push	r1
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	89 83       	std	Y+1, r24	; 0x01
		/* Start transmission */

		SPDR = data;
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 298:	0d b4       	in	r0, 0x2d	; 45
 29a:	07 fe       	sbrs	r0, 7
 29c:	fd cf       	rjmp	.-6      	; 0x298 <Master_TX+0x10>

}
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <Master_RX>:

uint8_t Master_RX(volatile uint8_t data){
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	1f 92       	push	r1
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01

		/* Start transmission */
		SPDR = data;
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
 2b6:	0d b4       	in	r0, 0x2d	; 45
 2b8:	07 fe       	sbrs	r0, 7
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <Master_RX+0x10>
		
		return SPDR;
 2bc:	8e b5       	in	r24, 0x2e	; 46
}
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <Slave_Select>:



//Selects slave. PORTB4 = Control_Slave, PORTB3 = Sensor_Slave
void Slave_Select(volatile uint8_t slave)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	1f 92       	push	r1
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	89 83       	std	Y+1, r24	; 0x01
	if(slave == Control_Slave)
 2d2:	99 81       	ldd	r25, Y+1	; 0x01
 2d4:	80 91 19 01 	lds	r24, 0x0119
 2d8:	98 13       	cpse	r25, r24
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <Slave_Select+0x1c>
	{
		PORTB |= (1 << PORTB3);
 2dc:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << PORTB4);
 2de:	2c 98       	cbi	0x05, 4	; 5
 2e0:	0a c0       	rjmp	.+20     	; 0x2f6 <Slave_Select+0x30>

	}
	else if (slave == Sensor_Slave)
 2e2:	99 81       	ldd	r25, Y+1	; 0x01
 2e4:	80 91 14 01 	lds	r24, 0x0114
 2e8:	98 13       	cpse	r25, r24
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <Slave_Select+0x2c>
	{
		PORTB |= (1 << PORTB4);
 2ec:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= ~(1 << PORTB3);
 2ee:	2b 98       	cbi	0x05, 3	; 5
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Slave_Select+0x30>
		
	}
	else
	{
		PORTB |= (1 << PORTB4);
 2f2:	2c 9a       	sbi	0x05, 4	; 5
		PORTB |= (1 << PORTB3);
 2f4:	2b 9a       	sbi	0x05, 3	; 5
	}
}
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <TX_Protocol>:

// a = arm, s = sensor data, w = wheel data, r = rfid data
void TX_Protocol(uint8_t component)
{

	if(component == ss)
 2fe:	90 91 0e 01 	lds	r25, 0x010E
 302:	89 13       	cpse	r24, r25
 304:	02 c0       	rjmp	.+4      	; 0x30a <TX_Protocol+0xc>
	{
		Master_TX(0b10000100);
 306:	84 e8       	ldi	r24, 0x84	; 132
 308:	bf cf       	rjmp	.-130    	; 0x288 <Master_TX>
	}
	else if(component == ws)
 30a:	90 91 0d 01 	lds	r25, 0x010D
 30e:	89 13       	cpse	r24, r25
 310:	02 c0       	rjmp	.+4      	; 0x316 <TX_Protocol+0x18>
	{
		Master_TX(0b10000101);
 312:	85 e8       	ldi	r24, 0x85	; 133
 314:	b9 cf       	rjmp	.-142    	; 0x288 <Master_TX>
	}
	else if(component == as)
 316:	90 91 13 01 	lds	r25, 0x0113
 31a:	89 13       	cpse	r24, r25
 31c:	02 c0       	rjmp	.+4      	; 0x322 <TX_Protocol+0x24>
	{
		Master_TX(0b10000110);
 31e:	86 e8       	ldi	r24, 0x86	; 134
 320:	b3 cf       	rjmp	.-154    	; 0x288 <Master_TX>
	}
	else if(component == sr)
 322:	90 91 18 01 	lds	r25, 0x0118
 326:	89 13       	cpse	r24, r25
 328:	02 c0       	rjmp	.+4      	; 0x32e <TX_Protocol+0x30>
	{
		Master_TX(0b00000100);
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	ad cf       	rjmp	.-166    	; 0x288 <Master_TX>
	}
	else if(component == wr)
 32e:	90 91 15 01 	lds	r25, 0x0115
 332:	89 13       	cpse	r24, r25
 334:	02 c0       	rjmp	.+4      	; 0x33a <TX_Protocol+0x3c>
	{
		Master_TX(0b00000101);
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	a7 cf       	rjmp	.-178    	; 0x288 <Master_TX>
	}
	else if(component == ar)
 33a:	90 91 16 01 	lds	r25, 0x0116
 33e:	89 13       	cpse	r24, r25
 340:	02 c0       	rjmp	.+4      	; 0x346 <TX_Protocol+0x48>
	{
		Master_TX(0b00000110);
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	a1 cf       	rjmp	.-190    	; 0x288 <Master_TX>
	}
	else if(component == rs)
 346:	90 91 10 01 	lds	r25, 0x0110
 34a:	89 13       	cpse	r24, r25
 34c:	02 c0       	rjmp	.+4      	; 0x352 <TX_Protocol+0x54>
	{
		Master_TX(0b10101011);
 34e:	8b ea       	ldi	r24, 0xAB	; 171
 350:	9b cf       	rjmp	.-202    	; 0x288 <Master_TX>
 352:	08 95       	ret

00000354 <TX_sensor_data>:


/* Function that transmits sensor data to the control slave. */
void TX_sensor_data()
{
	Slave_Select(Control_Slave);
 354:	80 91 19 01 	lds	r24, 0x0119
 358:	b6 df       	rcall	.-148    	; 0x2c6 <Slave_Select>
	TX_Protocol(ss);
 35a:	80 91 0e 01 	lds	r24, 0x010E
 35e:	cf df       	rcall	.-98     	; 0x2fe <TX_Protocol>
	Slave_Select(No_Slave);
 360:	80 91 17 01 	lds	r24, 0x0117
 364:	b0 df       	rcall	.-160    	; 0x2c6 <Slave_Select>
	Slave_Select(Control_Slave);
 366:	80 91 19 01 	lds	r24, 0x0119
 36a:	ad df       	rcall	.-166    	; 0x2c6 <Slave_Select>
	Master_TX(sensor_data);
 36c:	80 91 01 01 	lds	r24, 0x0101
 370:	8b cf       	rjmp	.-234    	; 0x288 <Master_TX>

00000372 <RX_sensor_data>:


/* Function that tells the sensor slave to transmit sensor data. */
void RX_sensor_data()
{
	wanted_data = sr;
 372:	80 91 18 01 	lds	r24, 0x0118
 376:	80 93 0c 01 	sts	0x010C, r24
	Slave_Select(Sensor_Slave);
 37a:	80 91 14 01 	lds	r24, 0x0114
 37e:	a3 df       	rcall	.-186    	; 0x2c6 <Slave_Select>
	TX_Protocol(sr);
 380:	80 91 18 01 	lds	r24, 0x0118
 384:	bc df       	rcall	.-136    	; 0x2fe <TX_Protocol>
	Slave_Select(No_Slave);
 386:	80 91 17 01 	lds	r24, 0x0117
 38a:	9d cf       	rjmp	.-198    	; 0x2c6 <Slave_Select>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
