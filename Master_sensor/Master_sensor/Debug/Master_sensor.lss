
Master_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  0000028a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000241  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000160  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000270  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000104  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000161  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000196  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__vector_2>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	22 d0       	rcall	.+68     	; 0x108 <main>
  c4:	94 c0       	rjmp	.+296    	; 0x1ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_Init_Master>:
void SPI_Init_Master()
{
			
		/* PORTB5 MOSI, PORTB6 MISO, PORTB7 SCK, PORTB4 SS_CON, PORTB3 SS_COM. Sets I/O ports */
		//DDRB |= (1 << PORTB5)|(0 << PORTB6)|(1 << PORTB7)|(1 << PORTB4)|(1 << PORTB3); 
		DDRB |= (1<<MOSI)|(0 << MISO)|(1<<SCK)|(1<<SS_COM)|(1<<SS_CON);
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	88 6b       	ori	r24, 0xB8	; 184
  cc:	84 b9       	out	0x04, r24	; 4
		
		/*Sets the SPI Control Register. SPE = SPI Enable. MSTR = Master Select. Master if 1 << MSTR. SPIE = SPI Interrupt Enable. CPOL = Clock Polarity. If 1 << CPOL SCK is High when idle. CPHA = Clock Phase. 
		0 << CPHA => Leading edge sample , trailing edge Setup. SPR0 = SPI clock rate select. 1 << SPR0, 0 << SPR1 fck/16.*/
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1)|(1<<SPIE)|(1 << CPOL) | (0 << CPHA);
  ce:	8b ed       	ldi	r24, 0xDB	; 219
  d0:	8c bd       	out	0x2c, r24	; 44
		
		EICRA = 0x3C; //Interrupt control register. Rising edge-triggered interrupts. Activates INT1/2
  d2:	8c e3       	ldi	r24, 0x3C	; 60
  d4:	80 93 69 00 	sts	0x0069, r24
		EIMSK = 6; //Interrupt mask register
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	8d bb       	out	0x1d, r24	; 29
		
		sei(); 
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <Master_TX>:
}

void Master_TX(uint8_t data)
{
		/* Start transmission */
		SPDR = data;
  e0:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <Master_TX+0x2>
}
  e8:	08 95       	ret

000000ea <Slave_Select>:

/* Sets slave */
void Slave_Select(int slave)
{
	selected_slave = slave;
  ea:	90 93 07 01 	sts	0x0107, r25
  ee:	80 93 06 01 	sts	0x0106, r24
	if(selected_slave == Slave_COM)
  f2:	20 91 02 01 	lds	r18, 0x0102
  f6:	30 91 03 01 	lds	r19, 0x0103
  fa:	82 17       	cp	r24, r18
  fc:	93 07       	cpc	r25, r19
  fe:	11 f4       	brne	.+4      	; 0x104 <Slave_Select+0x1a>
	{
		PORTB |= (0 << PORTB3)|(1 << PORTB4);
 100:	2c 9a       	sbi	0x05, 4	; 5
 102:	08 95       	ret
	}
	else
	{
		PORTB |= (1 << PORTB3)|(0 << PORTB4);
 104:	2b 9a       	sbi	0x05, 3	; 5
 106:	08 95       	ret

00000108 <main>:
void Master_TX(uint8_t);
void Master_RX(uint8_t);

int main(void)
{
	SPI_Init_Master();
 108:	df df       	rcall	.-66     	; 0xc8 <SPI_Init_Master>
	
	Slave_Select(Slave_CON);
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	90 91 01 01 	lds	r25, 0x0101
 112:	eb df       	rcall	.-42     	; 0xea <Slave_Select>
    while(1)
    {
			Master_TX(0xAB);
 114:	8b ea       	ldi	r24, 0xAB	; 171
 116:	e4 df       	rcall	.-56     	; 0xe0 <Master_TX>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	81 e2       	ldi	r24, 0x21	; 33
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x12>
 11e:	00 00       	nop
 120:	f9 cf       	rjmp	.-14     	; 0x114 <main+0xc>

00000122 <__vector_2>:
	
}

/*Interrupt from communication slave. INT1.*/
ISR(INT1_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0b b6       	in	r0, 0x3b	; 59
 12e:	0f 92       	push	r0
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	Slave_Select(Slave_COM);     //Should be Slave_COM as parameter
 148:	80 91 02 01 	lds	r24, 0x0102
 14c:	90 91 03 01 	lds	r25, 0x0103
 150:	cc df       	rcall	.-104    	; 0xea <Slave_Select>
	
	while(!(SPSR & (1<<SPIF)));
 152:	0d b4       	in	r0, 0x2d	; 45
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <__vector_2+0x30>
	
	received_data = SPDR;
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	80 93 04 01 	sts	0x0104, r24
 15e:	10 92 05 01 	sts	0x0105, r1
	if((received_data & 0x80) == 1)
	{
		Slave_Select(Slave_CON);
		Master_TX(received_data);	
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_3>:

/*Interrupt from control slave. INT2.*/
ISR(INT2_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	Slave_Select(Slave_CON);	   //Should be Slave_CON as parameter
 1ae:	80 91 00 01 	lds	r24, 0x0100
 1b2:	90 91 01 01 	lds	r25, 0x0101
 1b6:	99 df       	rcall	.-206    	; 0xea <Slave_Select>
	
	while(!(SPSR & (1<<SPIF)));
 1b8:	0d b4       	in	r0, 0x2d	; 45
 1ba:	07 fe       	sbrs	r0, 7
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <__vector_3+0x30>
	
	received_data = SPDR;
 1be:	8e b5       	in	r24, 0x2e	; 46
 1c0:	80 93 04 01 	sts	0x0104, r24
 1c4:	10 92 05 01 	sts	0x0105, r1
	if((received_data & 0x80) == 1)
	{
		Slave_Select(Slave_COM);
		Master_TX(received_data);
	}
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
