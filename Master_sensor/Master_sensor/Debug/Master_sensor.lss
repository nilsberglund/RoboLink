
Master_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000142  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000110  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000e1  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000016e  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000009c  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000d3  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000ea  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	10 d0       	rcall	.+32     	; 0xca <main>
  aa:	49 c0       	rjmp	.+146    	; 0x13e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SPI_Init_Master>:

/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{

	DDRD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xB0;
  b2:	80 eb       	ldi	r24, 0xB0	; 176
  b4:	84 b9       	out	0x04, r24	; 4
	
	SPCR |= (1 << SPIE)|(1 << SPE)|(1 << MSTR);
  b6:	8c b5       	in	r24, 0x2c	; 44
  b8:	80 6d       	ori	r24, 0xD0	; 208
  ba:	8c bd       	out	0x2c, r24	; 44
	
	EICRA = 0x30;
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x04;
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	8d bb       	out	0x1d, r24	; 29
	
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <main>:
	}
}

int main(void)
{
	SPI_Init_Master();
  ca:	f1 df       	rcall	.-30     	; 0xae <SPI_Init_Master>
	PORTB |= (1 << PORTB4);
  cc:	2c 9a       	sbi	0x05, 4	; 5
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4>

000000d0 <Master_TX>:


void Master_TX(uint8_t data)
{
		/* Start transmission */
		SPDR = data;
  d0:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <Master_TX+0x2>
		
		received_data = SPDR;
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	80 93 00 01 	sts	0x0100, r24
  de:	08 95       	ret

000000e0 <__vector_3>:
/* Functions */
void SPI_Init_Master();
void Master_TX(uint8_t);

ISR(INT2_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	0b b6       	in	r0, 0x3b	; 59
  ec:	0f 92       	push	r0
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 106:	2c 98       	cbi	0x05, 4	; 5
	
	Master_TX(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e2 df       	rcall	.-60     	; 0xd0 <Master_TX>
	
	if(received_data == 0xAA)
 10c:	80 91 00 01 	lds	r24, 0x0100
 110:	8a 3a       	cpi	r24, 0xAA	; 170
 112:	11 f4       	brne	.+4      	; 0x118 <__vector_3+0x38>
	{
		PORTD = (1 << PORTD6);
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	8b b9       	out	0x0b, r24	; 11
	}
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0b be       	out	0x3b, r0	; 59
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
