
Master_communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  0000026e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004f7  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000016a  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000379  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000198  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ce  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002c9  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__vector_2>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	10 d0       	rcall	.+32     	; 0xe4 <main>
  c4:	86 c0       	rjmp	.+268    	; 0x1d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_Init_Master>:

/* Initializes sensor AVR as master. Sets ports and registers and enables interrupts */
void SPI_Init_Master()
{
	//Sets all the D ports as outputs
	DDRD = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a b9       	out	0x0a, r24	; 10
	//Sets MOSI, SCK and SS as outputs
	DDRB = 0xB0;
  cc:	80 eb       	ldi	r24, 0xB0	; 176
  ce:	84 b9       	out	0x04, r24	; 4
	//Sets the SPI-control register. Master settings and interrupt enable
	SPCR |= (1 << SPIE)|(1 << SPE)|(1 << MSTR);
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 6d       	ori	r24, 0xD0	; 208
  d4:	8c bd       	out	0x2c, r24	; 44
	//Enables interrupt 2
	EICRA = 0x30;
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x04;
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	8d bb       	out	0x1d, r24	; 29
	//Enable global interrupt
	sei();
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <main>:
}


int main(void)
{
	SPI_Init_Master();
  e4:	f1 df       	rcall	.-30     	; 0xc8 <SPI_Init_Master>
	PORTB |= (1 << PORTB4);
  e6:	2c 9a       	sbi	0x05, 4	; 5
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x4>

000000ea <Master_TX>:

//Master transmission to slave
uint8_t Master_TX(uint8_t data)
{
		/* Start transmission */
		SPDR = data;
  ea:	8e bd       	out	0x2e, r24	; 46
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
  ec:	0d b4       	in	r0, 0x2d	; 45
  ee:	07 fe       	sbrs	r0, 7
  f0:	fd cf       	rjmp	.-6      	; 0xec <Master_TX+0x2>
		
		return SPDR;
  f2:	8e b5       	in	r24, 0x2e	; 46
}
  f4:	08 95       	ret

000000f6 <__vector_3>:
	sensor_data = Master_TX(0x01);	
}

//Receive function. Data is transmitted from the control slave
ISR(INT2_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	0b b6       	in	r0, 0x3b	; 59
 102:	0f 92       	push	r0
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB4);
 11c:	2c 98       	cbi	0x05, 4	; 5
	//case wanted data : 0x01 = wheel, 0x10 = arm, 0x11 = RFID, 0x02 = sensor_data
	if(wanted_data == wr)
 11e:	80 91 10 01 	lds	r24, 0x0110
 122:	90 91 01 01 	lds	r25, 0x0101
 126:	89 13       	cpse	r24, r25
 128:	05 c0       	rjmp	.+10     	; 0x134 <__vector_3+0x3e>
	{
		wheel_steering_data = Master_TX(0x01);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	de df       	rcall	.-68     	; 0xea <Master_TX>
 12e:	80 93 11 01 	sts	0x0111, r24
 132:	11 c0       	rjmp	.+34     	; 0x156 <__vector_3+0x60>
	}
	else if(wanted_data == sr)
 134:	90 91 02 01 	lds	r25, 0x0102
 138:	89 13       	cpse	r24, r25
 13a:	05 c0       	rjmp	.+10     	; 0x146 <__vector_3+0x50>
	{
		sensor_data = Master_TX(0x01);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	d5 df       	rcall	.-86     	; 0xea <Master_TX>
 140:	80 93 05 01 	sts	0x0105, r24
 144:	08 c0       	rjmp	.+16     	; 0x156 <__vector_3+0x60>
	}
	else if(wanted_data == ar)
 146:	90 91 00 01 	lds	r25, 0x0100
 14a:	89 13       	cpse	r24, r25
 14c:	04 c0       	rjmp	.+8      	; 0x156 <__vector_3+0x60>
	{
		robot_arm_data = Master_TX(0x01);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	cc df       	rcall	.-104    	; 0xea <Master_TX>
 152:	80 93 04 01 	sts	0x0104, r24
	}
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_2>:
void TX_RFID_data();


//Receive function. Data is transmitted from the sensor slave.
ISR(INT1_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	0b b6       	in	r0, 0x3b	; 59
 188:	0f 92       	push	r0
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	PORTB &= ~(1 << PORTB3);
 1a2:	2b 98       	cbi	0x05, 3	; 5
	sensor_data = Master_TX(0x01);	
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	a1 df       	rcall	.-190    	; 0xea <Master_TX>
 1a8:	80 93 05 01 	sts	0x0105, r24
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0b be       	out	0x3b, r0	; 59
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
