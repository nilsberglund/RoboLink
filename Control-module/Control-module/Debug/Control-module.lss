
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000872  00000906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000872  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000906  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001422  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000472  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bbf  00000000  00000000  00002a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002bc  00000000  00000000  00003608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004b0  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fb2  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00004d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	30 c0       	rjmp	.+96     	; 0xae <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 31       	cpi	r26, 0x1A	; 26
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	74 d0       	rcall	.+232    	; 0x192 <main>
  aa:	e1 c3       	rjmp	.+1986   	; 0x86e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_19>:
#include <avr/interrupt.h>
#include "Servo.h"


ISR(SPI_STC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	data = SPDR;
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	80 93 0d 01 	sts	0x010D, r24

	if(waiting_for_instruction == 1)
  da:	80 91 0e 01 	lds	r24, 0x010E
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	f1 f4       	brne	.+60     	; 0x11e <__vector_19+0x70>
	{
		if(data == 0b10000100)
  e2:	80 91 0d 01 	lds	r24, 0x010D
  e6:	84 38       	cpi	r24, 0x84	; 132
  e8:	31 f4       	brne	.+12     	; 0xf6 <__vector_19+0x48>
		{
			waiting_for_instruction = 0;
  ea:	10 92 0e 01 	sts	0x010E, r1
			component = SENSOR;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 08 01 	sts	0x0108, r24
  f4:	3b c0       	rjmp	.+118    	; 0x16c <__vector_19+0xbe>
			
		} else if (data == 0b10000101)
  f6:	80 91 0d 01 	lds	r24, 0x010D
  fa:	85 38       	cpi	r24, 0x85	; 133
  fc:	31 f4       	brne	.+12     	; 0x10a <__vector_19+0x5c>
		{
			waiting_for_instruction = 0;
  fe:	10 92 0e 01 	sts	0x010E, r1
			component = WHEEL;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	80 93 08 01 	sts	0x0108, r24
 108:	31 c0       	rjmp	.+98     	; 0x16c <__vector_19+0xbe>
			
		} else if(data == 0b10000110)
 10a:	80 91 0d 01 	lds	r24, 0x010D
 10e:	86 38       	cpi	r24, 0x86	; 134
 110:	69 f5       	brne	.+90     	; 0x16c <__vector_19+0xbe>
		{
			waiting_for_instruction = 0;
 112:	10 92 0e 01 	sts	0x010E, r1
			component = ARM;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 08 01 	sts	0x0108, r24
 11c:	27 c0       	rjmp	.+78     	; 0x16c <__vector_19+0xbe>
			
		}
	}
	else
	{
		if(component == SENSOR)
 11e:	80 91 08 01 	lds	r24, 0x0108
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	49 f4       	brne	.+18     	; 0x138 <__vector_19+0x8a>
		{
			sensor_data = data;
 126:	80 91 0d 01 	lds	r24, 0x010D
 12a:	80 93 01 01 	sts	0x0101, r24
			controlAlgorithm();
 12e:	0a d1       	rcall	.+532    	; 0x344 <controlAlgorithm>
			waiting_for_instruction = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 0e 01 	sts	0x010E, r24
 136:	1a c0       	rjmp	.+52     	; 0x16c <__vector_19+0xbe>
		}else if (component == ARM)
 138:	80 91 08 01 	lds	r24, 0x0108
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <__vector_19+0xa8>
		{
			robot_arm_data = data;
 140:	80 91 0d 01 	lds	r24, 0x010D
 144:	80 93 00 01 	sts	0x0100, r24
			move_Arm(robot_arm_data);
 148:	80 91 00 01 	lds	r24, 0x0100
 14c:	3a d2       	rcall	.+1140   	; 0x5c2 <move_Arm>
			waiting_for_instruction = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 0e 01 	sts	0x010E, r24
 154:	0b c0       	rjmp	.+22     	; 0x16c <__vector_19+0xbe>
		} else if (component == WHEEL)
 156:	80 91 08 01 	lds	r24, 0x0108
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	39 f4       	brne	.+14     	; 0x16c <__vector_19+0xbe>
		{
			wheel_steering_data = data;
 15e:	80 91 0d 01 	lds	r24, 0x010D
 162:	80 93 03 01 	sts	0x0103, r24
			waiting_for_instruction = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 0e 01 	sts	0x010E, r24
		}
	}
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0b be       	out	0x3b, r0	; 59
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:


int main(void)
{
	
	SPI_Init_Slave();
 192:	64 d3       	rcall	.+1736   	; 0x85c <SPI_Init_Slave>
	driving_setup();
 194:	a9 d0       	rcall	.+338    	; 0x2e8 <driving_setup>
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x4>

00000198 <getError>:
#include "Control_wheel_steering.h"
#include "Slave_control.h"
#include <stdlib.h>

int8_t getError()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <getError+0x6>
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	
	volatile int8_t res = 0;
 1a4:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t marker = 0;
 1a6:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0;
 1a8:	1b 82       	std	Y+3, r1	; 0x03
	error = 0;
 1aa:	10 92 12 01 	sts	0x0112, r1
	uint8_t line_data;
	line_data = sensor_data;
 1ae:	40 91 01 01 	lds	r20, 0x0101
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((line_data >> noShift) & 0x01);
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	9a 01       	movw	r18, r20
 1ba:	08 2e       	mov	r0, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <getError+0x2a>
 1be:	35 95       	asr	r19
 1c0:	27 95       	ror	r18
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <getError+0x26>
 1c6:	21 70       	andi	r18, 0x01	; 1
 1c8:	33 27       	eor	r19, r19
 1ca:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 1cc:	29 81       	ldd	r18, Y+1	; 0x01
 1ce:	21 30       	cpi	r18, 0x01	; 1
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <getError+0x48>
		{
			marker = marker + (7 - noShift);
 1d2:	2a 81       	ldd	r18, Y+2	; 0x02
 1d4:	29 5f       	subi	r18, 0xF9	; 249
 1d6:	28 1b       	sub	r18, r24
 1d8:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 1da:	2b 81       	ldd	r18, Y+3	; 0x03
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	2b 83       	std	Y+3, r18	; 0x03
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	50 f7       	brcc	.-44     	; 0x1b8 <getError+0x20>
		}
	}
	if(counter1 == 1)
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <getError+0x60>
	{
		error = marker + (marker-1);
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	89 0f       	add	r24, r25
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 12 01 	sts	0x0112, r24
 1f6:	22 c0       	rjmp	.+68     	; 0x23c <getError+0xa4>
	} else if(counter1 == 2)
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	29 f4       	brne	.+10     	; 0x208 <getError+0x70>

	{
		error = marker-1;
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 93 12 01 	sts	0x0112, r24
 206:	1a c0       	rjmp	.+52     	; 0x23c <getError+0xa4>
	} else if(counter1 == 3)
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	a1 f4       	brne	.+40     	; 0x236 <getError+0x9e>

	{
		error = marker*2;
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	88 0f       	add	r24, r24
 212:	80 93 12 01 	sts	0x0112, r24
		error = error/(0b00000011);
 216:	80 91 12 01 	lds	r24, 0x0112
 21a:	96 e5       	ldi	r25, 0x56	; 86
 21c:	89 02       	muls	r24, r25
 21e:	91 2d       	mov	r25, r1
 220:	11 24       	eor	r1, r1
 222:	87 fd       	sbrc	r24, 7
 224:	93 95       	inc	r25
 226:	90 93 12 01 	sts	0x0112, r25
		error = error - 1;
 22a:	80 91 12 01 	lds	r24, 0x0112
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	80 93 12 01 	sts	0x0112, r24
 234:	03 c0       	rjmp	.+6      	; 0x23c <getError+0xa4>

	} else
	{
		error = -8;
 236:	88 ef       	ldi	r24, 0xF8	; 248
 238:	80 93 12 01 	sts	0x0112, r24
	}
	error = 7 - error;
 23c:	90 91 12 01 	lds	r25, 0x0112
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	89 1b       	sub	r24, r25
 244:	80 93 12 01 	sts	0x0112, r24
	return error;
 248:	80 91 12 01 	lds	r24, 0x0112
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <calculateMidSpeed>:
	
	
}

uint8_t calculateMidSpeed(int8_t miderror)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	1f 92       	push	r1
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t speed = 100;
 262:	94 e6       	ldi	r25, 0x64	; 100
 264:	99 83       	std	Y+1, r25	; 0x01
	uint8_t Kp = 20;
	uint8_t Kd = 5;
	
	miderror = abs(miderror);
 266:	99 27       	eor	r25, r25
 268:	87 fd       	sbrc	r24, 7
 26a:	90 95       	com	r25
 26c:	99 23       	and	r25, r25
 26e:	1c f4       	brge	.+6      	; 0x276 <calculateMidSpeed+0x1e>
 270:	91 95       	neg	r25
 272:	81 95       	neg	r24
 274:	91 09       	sbc	r25, r1
	speed = speed + miderror*Kp;
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	98 2f       	mov	r25, r24
 27a:	99 0f       	add	r25, r25
 27c:	99 0f       	add	r25, r25
 27e:	39 2f       	mov	r19, r25
 280:	33 0f       	add	r19, r19
 282:	33 0f       	add	r19, r19
 284:	93 0f       	add	r25, r19
 286:	92 0f       	add	r25, r18
 288:	99 83       	std	Y+1, r25	; 0x01
	prevmiderror = miderror;
 28a:	80 93 11 01 	sts	0x0111, r24
	return speed;
 28e:	89 81       	ldd	r24, Y+1	; 0x01
}
 290:	0f 90       	pop	r0
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <calculateSpeed>:

int8_t calculateSpeed(int8_t error)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	00 d0       	rcall	.+0      	; 0x29e <calculateSpeed+0x6>
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 2a2:	1a 82       	std	Y+2, r1	; 0x02
 2a4:	19 82       	std	Y+1, r1	; 0x01
	int8_t Kp = 20;
	int8_t Kd = 5;
	
	speed = Kp * error + Kd * (error - prevError);
 2a6:	28 2f       	mov	r18, r24
 2a8:	33 27       	eor	r19, r19
 2aa:	27 fd       	sbrc	r18, 7
 2ac:	30 95       	com	r19
 2ae:	90 91 0b 01 	lds	r25, 0x010B
 2b2:	29 1b       	sub	r18, r25
 2b4:	31 09       	sbc	r19, r1
 2b6:	97 fd       	sbrc	r25, 7
 2b8:	33 95       	inc	r19
 2ba:	a9 01       	movw	r20, r18
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	24 0f       	add	r18, r20
 2c6:	35 1f       	adc	r19, r21
 2c8:	94 e1       	ldi	r25, 0x14	; 20
 2ca:	89 02       	muls	r24, r25
 2cc:	20 0d       	add	r18, r0
 2ce:	31 1d       	adc	r19, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	3a 83       	std	Y+2, r19	; 0x02
 2d4:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 2d6:	80 93 0b 01 	sts	0x010B, r24
	return speed;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <driving_setup>:

void driving_setup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 2e8:	81 ef       	ldi	r24, 0xF1	; 241
 2ea:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 8
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;
 2f4:	10 92 85 00 	sts	0x0085, r1
 2f8:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 248;
 2fc:	88 ef       	ldi	r24, 0xF8	; 248
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 89 00 	sts	0x0089, r25
 304:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 248;
 308:	90 93 8b 00 	sts	0x008B, r25
 30c:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7);
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	80 6f       	ori	r24, 0xF0	; 240
 314:	8a b9       	out	0x0a, r24	; 10
 316:	08 95       	ret

00000318 <drive>:
	
}

void drive(int right_dir, int left_dir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(right_dir == 1)
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	19 f4       	brne	.+6      	; 0x322 <drive+0xa>
	{
		PORTD |= (0 << PORTD7);
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	01 c0       	rjmp	.+2      	; 0x324 <drive+0xc>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 322:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(left_dir == 1)
 324:	61 30       	cpi	r22, 0x01	; 1
 326:	71 05       	cpc	r23, r1
 328:	11 f4       	brne	.+4      	; 0x32e <drive+0x16>
	{
		PORTD |= (1 << PORTD6);
 32a:	5e 9a       	sbi	0x0b, 6	; 11
 32c:	02 c0       	rjmp	.+4      	; 0x332 <drive+0x1a>
	}
	else
	{
		PORTD |= (0 << PORTD6);
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	8b b9       	out	0x0b, r24	; 11
	}
	OCR1A = rightSpeed;
 332:	30 93 89 00 	sts	0x0089, r19
 336:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 33a:	50 93 8b 00 	sts	0x008B, r21
 33e:	40 93 8a 00 	sts	0x008A, r20
 342:	08 95       	ret

00000344 <controlAlgorithm>:
	error = 7 - error;
	return error;
}

void controlAlgorithm()
{
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	
	error = getError();
 34a:	26 df       	rcall	.-436    	; 0x198 <getError>
 34c:	80 93 12 01 	sts	0x0112, r24
	int16_t speed = calculateSpeed(error);
 350:	80 91 12 01 	lds	r24, 0x0112
 354:	a1 df       	rcall	.-190    	; 0x298 <calculateSpeed>
 356:	18 2f       	mov	r17, r24
	
	if(error == 15)
 358:	80 91 12 01 	lds	r24, 0x0112
 35c:	8f 30       	cpi	r24, 0x0F	; 15
 35e:	49 f4       	brne	.+18     	; 0x372 <controlAlgorithm+0x2e>
	{
		rightWheelSpeed = rightWheelSpeed;
 360:	80 91 07 01 	lds	r24, 0x0107
 364:	80 93 07 01 	sts	0x0107, r24
		leftWheelSpeed = leftWheelSpeed;
 368:	80 91 04 01 	lds	r24, 0x0104
 36c:	80 93 04 01 	sts	0x0104, r24
 370:	42 c0       	rjmp	.+132    	; 0x3f6 <controlAlgorithm+0xb2>

void controlAlgorithm()
{
	
	error = getError();
	int16_t speed = calculateSpeed(error);
 372:	c1 2f       	mov	r28, r17
 374:	dd 27       	eor	r29, r29
 376:	c7 fd       	sbrc	r28, 7
 378:	d0 95       	com	r29
		rightWheelSpeed = rightWheelSpeed;
		leftWheelSpeed = leftWheelSpeed;
	}	
	else
	{
		midspeed = calculateMidSpeed(error);
 37a:	80 91 12 01 	lds	r24, 0x0112
 37e:	6c df       	rcall	.-296    	; 0x258 <calculateMidSpeed>
 380:	80 93 02 01 	sts	0x0102, r24
		
		if ((midspeed-speed) < 10)
 384:	20 91 02 01 	lds	r18, 0x0102
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	2c 1b       	sub	r18, r28
 38c:	3d 0b       	sbc	r19, r29
 38e:	2a 30       	cpi	r18, 0x0A	; 10
 390:	31 05       	cpc	r19, r1
 392:	24 f4       	brge	.+8      	; 0x39c <controlAlgorithm+0x58>
		{
			rightWheelSpeed = 3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 07 01 	sts	0x0107, r24
 39a:	11 c0       	rjmp	.+34     	; 0x3be <controlAlgorithm+0x7a>
		}
		else if ((midspeed-speed) > 235)
 39c:	20 91 02 01 	lds	r18, 0x0102
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	2c 1b       	sub	r18, r28
 3a4:	3d 0b       	sbc	r19, r29
 3a6:	2c 3e       	cpi	r18, 0xEC	; 236
 3a8:	31 05       	cpc	r19, r1
 3aa:	24 f0       	brlt	.+8      	; 0x3b4 <controlAlgorithm+0x70>
		{
			rightWheelSpeed = 247;
 3ac:	87 ef       	ldi	r24, 0xF7	; 247
 3ae:	80 93 07 01 	sts	0x0107, r24
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <controlAlgorithm+0x7a>
		}
		else
		{
			rightWheelSpeed = midspeed - speed;
 3b4:	80 91 02 01 	lds	r24, 0x0102
 3b8:	81 1b       	sub	r24, r17
 3ba:	80 93 07 01 	sts	0x0107, r24
		}
		
		if ((midspeed+speed) < 10
 3be:	80 91 02 01 	lds	r24, 0x0102
 3c2:	9e 01       	movw	r18, r28
 3c4:	28 0f       	add	r18, r24
 3c6:	31 1d       	adc	r19, r1
 3c8:	2a 30       	cpi	r18, 0x0A	; 10
 3ca:	31 05       	cpc	r19, r1
 3cc:	24 f4       	brge	.+8      	; 0x3d6 <controlAlgorithm+0x92>
		
		)
		{
			leftWheelSpeed = 3;
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	80 93 04 01 	sts	0x0104, r24
 3d4:	10 c0       	rjmp	.+32     	; 0x3f6 <controlAlgorithm+0xb2>
		}
		else if ((midspeed+speed) > 235)
 3d6:	80 91 02 01 	lds	r24, 0x0102
 3da:	c8 0f       	add	r28, r24
 3dc:	d1 1d       	adc	r29, r1
 3de:	cc 3e       	cpi	r28, 0xEC	; 236
 3e0:	d1 05       	cpc	r29, r1
 3e2:	24 f0       	brlt	.+8      	; 0x3ec <controlAlgorithm+0xa8>
		{
			leftWheelSpeed = 247;
 3e4:	87 ef       	ldi	r24, 0xF7	; 247
 3e6:	80 93 04 01 	sts	0x0104, r24
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <controlAlgorithm+0xb2>
		}
		else
		{
			leftWheelSpeed = midspeed + speed;
 3ec:	80 91 02 01 	lds	r24, 0x0102
 3f0:	18 0f       	add	r17, r24
 3f2:	10 93 04 01 	sts	0x0104, r17
	
		
		
	}
		
	drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 3f6:	20 91 07 01 	lds	r18, 0x0107
 3fa:	40 91 04 01 	lds	r20, 0x0104
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	86 df       	rcall	.-244    	; 0x318 <drive>
	
	
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	08 95       	ret

00000414 <USART_Transmit>:
 414:	5b 9a       	sbi	0x0b, 3	; 11
 416:	e0 ec       	ldi	r30, 0xC0	; 192
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	90 81       	ld	r25, Z
 41c:	95 ff       	sbrs	r25, 5
 41e:	fd cf       	rjmp	.-6      	; 0x41a <USART_Transmit+0x6>
 420:	80 93 c6 00 	sts	0x00C6, r24
 424:	08 95       	ret

00000426 <move_Single_Servo>:
 426:	ff 92       	push	r15
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	00 d0       	rcall	.+0      	; 0x432 <move_Single_Servo+0xc>
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	f6 2e       	mov	r15, r22
 438:	04 2f       	mov	r16, r20
 43a:	12 2f       	mov	r17, r18
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	9a 83       	std	Y+2, r25	; 0x02
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	e8 df       	rcall	.-48     	; 0x414 <USART_Transmit>
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	e6 df       	rcall	.-52     	; 0x414 <USART_Transmit>
 448:	81 2f       	mov	r24, r17
 44a:	e4 df       	rcall	.-56     	; 0x414 <USART_Transmit>
 44c:	87 e0       	ldi	r24, 0x07	; 7
 44e:	e2 df       	rcall	.-60     	; 0x414 <USART_Transmit>
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	e0 df       	rcall	.-64     	; 0x414 <USART_Transmit>
 454:	8e e1       	ldi	r24, 0x1E	; 30
 456:	de df       	rcall	.-68     	; 0x414 <USART_Transmit>
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	dc df       	rcall	.-72     	; 0x414 <USART_Transmit>
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	da df       	rcall	.-76     	; 0x414 <USART_Transmit>
 460:	8f 2d       	mov	r24, r15
 462:	d8 df       	rcall	.-80     	; 0x414 <USART_Transmit>
 464:	80 2f       	mov	r24, r16
 466:	d6 df       	rcall	.-84     	; 0x414 <USART_Transmit>
 468:	99 81       	ldd	r25, Y+1	; 0x01
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	89 0f       	add	r24, r25
 46e:	88 5d       	subi	r24, 0xD8	; 216
 470:	f8 0e       	add	r15, r24
 472:	0f 0d       	add	r16, r15
 474:	80 2f       	mov	r24, r16
 476:	81 0f       	add	r24, r17
 478:	80 95       	com	r24
 47a:	cc df       	rcall	.-104    	; 0x414 <USART_Transmit>
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	08 95       	ret

0000048c <move_Double_Servo>:
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <move_Double_Servo+0xe>
 49a:	00 d0       	rcall	.+0      	; 0x49c <move_Double_Servo+0x10>
 49c:	00 d0       	rcall	.+0      	; 0x49e <move_Double_Servo+0x12>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	f6 2e       	mov	r15, r22
 4a4:	14 2f       	mov	r17, r20
 4a6:	e2 2e       	mov	r14, r18
 4a8:	af ef       	ldi	r26, 0xFF	; 255
 4aa:	b3 e0       	ldi	r27, 0x03	; 3
 4ac:	a8 1b       	sub	r26, r24
 4ae:	b9 0b       	sbc	r27, r25
 4b0:	ba 83       	std	Y+2, r27	; 0x02
 4b2:	a9 83       	std	Y+1, r26	; 0x01
 4b4:	8b 83       	std	Y+3, r24	; 0x03
 4b6:	9c 83       	std	Y+4, r25	; 0x04
 4b8:	e9 81       	ldd	r30, Y+1	; 0x01
 4ba:	fa 81       	ldd	r31, Y+2	; 0x02
 4bc:	ed 83       	std	Y+5, r30	; 0x05
 4be:	e9 81       	ldd	r30, Y+1	; 0x01
 4c0:	fa 81       	ldd	r31, Y+2	; 0x02
 4c2:	fe 83       	std	Y+6, r31	; 0x06
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	a6 df       	rcall	.-180    	; 0x414 <USART_Transmit>
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	a4 df       	rcall	.-184    	; 0x414 <USART_Transmit>
 4cc:	8e ef       	ldi	r24, 0xFE	; 254
 4ce:	a2 df       	rcall	.-188    	; 0x414 <USART_Transmit>
 4d0:	8e e0       	ldi	r24, 0x0E	; 14
 4d2:	a0 df       	rcall	.-192    	; 0x414 <USART_Transmit>
 4d4:	83 e8       	ldi	r24, 0x83	; 131
 4d6:	9e df       	rcall	.-196    	; 0x414 <USART_Transmit>
 4d8:	8e e1       	ldi	r24, 0x1E	; 30
 4da:	9c df       	rcall	.-200    	; 0x414 <USART_Transmit>
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	9a df       	rcall	.-204    	; 0x414 <USART_Transmit>
 4e0:	8e 2d       	mov	r24, r14
 4e2:	98 df       	rcall	.-208    	; 0x414 <USART_Transmit>
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	96 df       	rcall	.-212    	; 0x414 <USART_Transmit>
 4e8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ea:	94 df       	rcall	.-216    	; 0x414 <USART_Transmit>
 4ec:	8f 2d       	mov	r24, r15
 4ee:	92 df       	rcall	.-220    	; 0x414 <USART_Transmit>
 4f0:	81 2f       	mov	r24, r17
 4f2:	90 df       	rcall	.-224    	; 0x414 <USART_Transmit>
 4f4:	80 2f       	mov	r24, r16
 4f6:	8e df       	rcall	.-228    	; 0x414 <USART_Transmit>
 4f8:	8d 81       	ldd	r24, Y+5	; 0x05
 4fa:	8c df       	rcall	.-232    	; 0x414 <USART_Transmit>
 4fc:	8e 81       	ldd	r24, Y+6	; 0x06
 4fe:	8a df       	rcall	.-236    	; 0x414 <USART_Transmit>
 500:	8f 2d       	mov	r24, r15
 502:	88 df       	rcall	.-240    	; 0x414 <USART_Transmit>
 504:	81 2f       	mov	r24, r17
 506:	86 df       	rcall	.-244    	; 0x414 <USART_Transmit>
 508:	3b 81       	ldd	r19, Y+3	; 0x03
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	2d 81       	ldd	r18, Y+5	; 0x05
 50e:	9e 81       	ldd	r25, Y+6	; 0x06
 510:	83 0f       	add	r24, r19
 512:	8f 54       	subi	r24, 0x4F	; 79
 514:	82 0f       	add	r24, r18
 516:	89 0f       	add	r24, r25
 518:	8f 0d       	add	r24, r15
 51a:	f8 0e       	add	r15, r24
 51c:	f1 0e       	add	r15, r17
 51e:	1f 0d       	add	r17, r15
 520:	e1 0e       	add	r14, r17
 522:	8e 2d       	mov	r24, r14
 524:	80 0f       	add	r24, r16
 526:	80 95       	com	r24
 528:	75 df       	rcall	.-278    	; 0x414 <USART_Transmit>
 52a:	26 96       	adiw	r28, 0x06	; 6
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	08 95       	ret

00000544 <pickup_Default_Position>:
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	03 e0       	ldi	r16, 0x03	; 3
 54a:	10 e0       	ldi	r17, 0x00	; 0
 54c:	22 e0       	ldi	r18, 0x02	; 2
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	60 ef       	ldi	r22, 0xF0	; 240
 552:	88 e8       	ldi	r24, 0x88	; 136
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	9a df       	rcall	.-204    	; 0x48c <move_Double_Servo>
 558:	05 e0       	ldi	r16, 0x05	; 5
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	24 e0       	ldi	r18, 0x04	; 4
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	60 ef       	ldi	r22, 0xF0	; 240
 562:	88 e8       	ldi	r24, 0x88	; 136
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	92 df       	rcall	.-220    	; 0x48c <move_Double_Servo>
 568:	26 e0       	ldi	r18, 0x06	; 6
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	60 ef       	ldi	r22, 0xF0	; 240
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	59 df       	rcall	.-334    	; 0x426 <move_Single_Servo>
 574:	27 e0       	ldi	r18, 0x07	; 7
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	60 e5       	ldi	r22, 0x50	; 80
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	53 df       	rcall	.-346    	; 0x426 <move_Single_Servo>
 580:	28 e0       	ldi	r18, 0x08	; 8
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	60 e5       	ldi	r22, 0x50	; 80
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	4d df       	rcall	.-358    	; 0x426 <move_Single_Servo>
 58c:	88 e8       	ldi	r24, 0x88	; 136
 58e:	92 e0       	ldi	r25, 0x02	; 2
 590:	90 93 06 01 	sts	0x0106, r25
 594:	80 93 05 01 	sts	0x0105, r24
 598:	90 93 10 01 	sts	0x0110, r25
 59c:	80 93 0f 01 	sts	0x010F, r24
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	90 93 17 01 	sts	0x0117, r25
 5a8:	80 93 16 01 	sts	0x0116, r24
 5ac:	90 93 15 01 	sts	0x0115, r25
 5b0:	80 93 14 01 	sts	0x0114, r24
 5b4:	90 93 19 01 	sts	0x0119, r25
 5b8:	80 93 18 01 	sts	0x0118, r24
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <move_Arm>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	98 2f       	mov	r25, r24
 5c8:	97 70       	andi	r25, 0x07	; 7
 5ca:	84 fb       	bst	r24, 4
 5cc:	33 27       	eor	r19, r19
 5ce:	30 f9       	bld	r19, 0
 5d0:	83 fb       	bst	r24, 3
 5d2:	22 27       	eor	r18, r18
 5d4:	20 f9       	bld	r18, 0
 5d6:	85 ff       	sbrs	r24, 5
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <move_Arm+0x1c>
 5da:	b4 df       	rcall	.-152    	; 0x544 <pickup_Default_Position>
 5dc:	3c c1       	rjmp	.+632    	; 0x856 <move_Arm+0x294>
 5de:	91 30       	cpi	r25, 0x01	; 1
 5e0:	91 f5       	brne	.+100    	; 0x646 <move_Arm+0x84>
 5e2:	31 11       	cpse	r19, r1
 5e4:	18 c0       	rjmp	.+48     	; 0x616 <move_Arm+0x54>
 5e6:	38 ed       	ldi	r19, 0xD8	; 216
 5e8:	32 03       	mulsu	r19, r18
 5ea:	c0 01       	movw	r24, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	20 91 09 01 	lds	r18, 0x0109
 5f2:	30 91 0a 01 	lds	r19, 0x010A
 5f6:	82 0f       	add	r24, r18
 5f8:	93 1f       	adc	r25, r19
 5fa:	8a 30       	cpi	r24, 0x0A	; 10
 5fc:	91 05       	cpc	r25, r1
 5fe:	09 f4       	brne	.+2      	; 0x602 <move_Arm+0x40>
 600:	2a c1       	rjmp	.+596    	; 0x856 <move_Arm+0x294>
 602:	0a 97       	sbiw	r24, 0x0a	; 10
 604:	90 93 0a 01 	sts	0x010A, r25
 608:	80 93 09 01 	sts	0x0109, r24
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	60 e5       	ldi	r22, 0x50	; 80
 612:	09 df       	rcall	.-494    	; 0x426 <move_Single_Servo>
 614:	20 c1       	rjmp	.+576    	; 0x856 <move_Arm+0x294>
 616:	80 91 09 01 	lds	r24, 0x0109
 61a:	90 91 0a 01 	lds	r25, 0x010A
 61e:	0a 96       	adiw	r24, 0x0a	; 10
 620:	48 e2       	ldi	r20, 0x28	; 40
 622:	24 9f       	mul	r18, r20
 624:	80 0d       	add	r24, r0
 626:	91 1d       	adc	r25, r1
 628:	11 24       	eor	r1, r1
 62a:	8f 3f       	cpi	r24, 0xFF	; 255
 62c:	23 e0       	ldi	r18, 0x03	; 3
 62e:	92 07       	cpc	r25, r18
 630:	08 f0       	brcs	.+2      	; 0x634 <move_Arm+0x72>
 632:	11 c1       	rjmp	.+546    	; 0x856 <move_Arm+0x294>
 634:	90 93 0a 01 	sts	0x010A, r25
 638:	80 93 09 01 	sts	0x0109, r24
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	60 e5       	ldi	r22, 0x50	; 80
 642:	f1 de       	rcall	.-542    	; 0x426 <move_Single_Servo>
 644:	08 c1       	rjmp	.+528    	; 0x856 <move_Arm+0x294>
 646:	92 30       	cpi	r25, 0x02	; 2
 648:	b1 f5       	brne	.+108    	; 0x6b6 <move_Arm+0xf4>
 64a:	31 11       	cpse	r19, r1
 64c:	1a c0       	rjmp	.+52     	; 0x682 <move_Arm+0xc0>
 64e:	80 91 05 01 	lds	r24, 0x0105
 652:	90 91 06 01 	lds	r25, 0x0106
 656:	0a 97       	sbiw	r24, 0x0a	; 10
 658:	48 ed       	ldi	r20, 0xD8	; 216
 65a:	42 03       	mulsu	r20, r18
 65c:	90 01       	movw	r18, r0
 65e:	11 24       	eor	r1, r1
 660:	82 0f       	add	r24, r18
 662:	93 1f       	adc	r25, r19
 664:	8e 3c       	cpi	r24, 0xCE	; 206
 666:	91 05       	cpc	r25, r1
 668:	08 f4       	brcc	.+2      	; 0x66c <move_Arm+0xaa>
 66a:	f5 c0       	rjmp	.+490    	; 0x856 <move_Arm+0x294>
 66c:	90 93 06 01 	sts	0x0106, r25
 670:	80 93 05 01 	sts	0x0105, r24
 674:	03 e0       	ldi	r16, 0x03	; 3
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	22 e0       	ldi	r18, 0x02	; 2
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	60 e5       	ldi	r22, 0x50	; 80
 67e:	06 df       	rcall	.-500    	; 0x48c <move_Double_Servo>
 680:	ea c0       	rjmp	.+468    	; 0x856 <move_Arm+0x294>
 682:	80 91 05 01 	lds	r24, 0x0105
 686:	90 91 06 01 	lds	r25, 0x0106
 68a:	0a 96       	adiw	r24, 0x0a	; 10
 68c:	38 e2       	ldi	r19, 0x28	; 40
 68e:	23 9f       	mul	r18, r19
 690:	80 0d       	add	r24, r0
 692:	91 1d       	adc	r25, r1
 694:	11 24       	eor	r1, r1
 696:	82 32       	cpi	r24, 0x22	; 34
 698:	43 e0       	ldi	r20, 0x03	; 3
 69a:	94 07       	cpc	r25, r20
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <move_Arm+0xde>
 69e:	db c0       	rjmp	.+438    	; 0x856 <move_Arm+0x294>
 6a0:	90 93 06 01 	sts	0x0106, r25
 6a4:	80 93 05 01 	sts	0x0105, r24
 6a8:	03 e0       	ldi	r16, 0x03	; 3
 6aa:	10 e0       	ldi	r17, 0x00	; 0
 6ac:	22 e0       	ldi	r18, 0x02	; 2
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	60 e5       	ldi	r22, 0x50	; 80
 6b2:	ec de       	rcall	.-552    	; 0x48c <move_Double_Servo>
 6b4:	d0 c0       	rjmp	.+416    	; 0x856 <move_Arm+0x294>
 6b6:	93 30       	cpi	r25, 0x03	; 3
 6b8:	b1 f5       	brne	.+108    	; 0x726 <move_Arm+0x164>
 6ba:	31 11       	cpse	r19, r1
 6bc:	1a c0       	rjmp	.+52     	; 0x6f2 <move_Arm+0x130>
 6be:	80 91 0f 01 	lds	r24, 0x010F
 6c2:	90 91 10 01 	lds	r25, 0x0110
 6c6:	0a 97       	sbiw	r24, 0x0a	; 10
 6c8:	48 ed       	ldi	r20, 0xD8	; 216
 6ca:	42 03       	mulsu	r20, r18
 6cc:	90 01       	movw	r18, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	8e 3c       	cpi	r24, 0xCE	; 206
 6d6:	91 05       	cpc	r25, r1
 6d8:	08 f4       	brcc	.+2      	; 0x6dc <move_Arm+0x11a>
 6da:	bd c0       	rjmp	.+378    	; 0x856 <move_Arm+0x294>
 6dc:	90 93 10 01 	sts	0x0110, r25
 6e0:	80 93 0f 01 	sts	0x010F, r24
 6e4:	05 e0       	ldi	r16, 0x05	; 5
 6e6:	10 e0       	ldi	r17, 0x00	; 0
 6e8:	24 e0       	ldi	r18, 0x04	; 4
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	60 e5       	ldi	r22, 0x50	; 80
 6ee:	ce de       	rcall	.-612    	; 0x48c <move_Double_Servo>
 6f0:	b2 c0       	rjmp	.+356    	; 0x856 <move_Arm+0x294>
 6f2:	80 91 0f 01 	lds	r24, 0x010F
 6f6:	90 91 10 01 	lds	r25, 0x0110
 6fa:	0a 96       	adiw	r24, 0x0a	; 10
 6fc:	38 e2       	ldi	r19, 0x28	; 40
 6fe:	23 9f       	mul	r18, r19
 700:	80 0d       	add	r24, r0
 702:	91 1d       	adc	r25, r1
 704:	11 24       	eor	r1, r1
 706:	82 32       	cpi	r24, 0x22	; 34
 708:	43 e0       	ldi	r20, 0x03	; 3
 70a:	94 07       	cpc	r25, r20
 70c:	08 f0       	brcs	.+2      	; 0x710 <move_Arm+0x14e>
 70e:	a3 c0       	rjmp	.+326    	; 0x856 <move_Arm+0x294>
 710:	90 93 10 01 	sts	0x0110, r25
 714:	80 93 0f 01 	sts	0x010F, r24
 718:	05 e0       	ldi	r16, 0x05	; 5
 71a:	10 e0       	ldi	r17, 0x00	; 0
 71c:	24 e0       	ldi	r18, 0x04	; 4
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	60 e5       	ldi	r22, 0x50	; 80
 722:	b4 de       	rcall	.-664    	; 0x48c <move_Double_Servo>
 724:	98 c0       	rjmp	.+304    	; 0x856 <move_Arm+0x294>
 726:	94 30       	cpi	r25, 0x04	; 4
 728:	91 f5       	brne	.+100    	; 0x78e <move_Arm+0x1cc>
 72a:	31 11       	cpse	r19, r1
 72c:	18 c0       	rjmp	.+48     	; 0x75e <move_Arm+0x19c>
 72e:	38 ed       	ldi	r19, 0xD8	; 216
 730:	32 03       	mulsu	r19, r18
 732:	c0 01       	movw	r24, r0
 734:	11 24       	eor	r1, r1
 736:	40 91 16 01 	lds	r20, 0x0116
 73a:	50 91 17 01 	lds	r21, 0x0117
 73e:	84 0f       	add	r24, r20
 740:	95 1f       	adc	r25, r21
 742:	8a 30       	cpi	r24, 0x0A	; 10
 744:	91 05       	cpc	r25, r1
 746:	09 f4       	brne	.+2      	; 0x74a <move_Arm+0x188>
 748:	86 c0       	rjmp	.+268    	; 0x856 <move_Arm+0x294>
 74a:	0a 97       	sbiw	r24, 0x0a	; 10
 74c:	90 93 17 01 	sts	0x0117, r25
 750:	80 93 16 01 	sts	0x0116, r24
 754:	26 e0       	ldi	r18, 0x06	; 6
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	60 e5       	ldi	r22, 0x50	; 80
 75a:	65 de       	rcall	.-822    	; 0x426 <move_Single_Servo>
 75c:	7c c0       	rjmp	.+248    	; 0x856 <move_Arm+0x294>
 75e:	80 91 16 01 	lds	r24, 0x0116
 762:	90 91 17 01 	lds	r25, 0x0117
 766:	0a 96       	adiw	r24, 0x0a	; 10
 768:	48 e2       	ldi	r20, 0x28	; 40
 76a:	24 9f       	mul	r18, r20
 76c:	80 0d       	add	r24, r0
 76e:	91 1d       	adc	r25, r1
 770:	11 24       	eor	r1, r1
 772:	8f 3f       	cpi	r24, 0xFF	; 255
 774:	23 e0       	ldi	r18, 0x03	; 3
 776:	92 07       	cpc	r25, r18
 778:	08 f0       	brcs	.+2      	; 0x77c <move_Arm+0x1ba>
 77a:	6d c0       	rjmp	.+218    	; 0x856 <move_Arm+0x294>
 77c:	90 93 17 01 	sts	0x0117, r25
 780:	80 93 16 01 	sts	0x0116, r24
 784:	26 e0       	ldi	r18, 0x06	; 6
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	60 e5       	ldi	r22, 0x50	; 80
 78a:	4d de       	rcall	.-870    	; 0x426 <move_Single_Servo>
 78c:	64 c0       	rjmp	.+200    	; 0x856 <move_Arm+0x294>
 78e:	95 30       	cpi	r25, 0x05	; 5
 790:	89 f5       	brne	.+98     	; 0x7f4 <move_Arm+0x232>
 792:	31 11       	cpse	r19, r1
 794:	18 c0       	rjmp	.+48     	; 0x7c6 <move_Arm+0x204>
 796:	38 ed       	ldi	r19, 0xD8	; 216
 798:	32 03       	mulsu	r19, r18
 79a:	c0 01       	movw	r24, r0
 79c:	11 24       	eor	r1, r1
 79e:	40 91 14 01 	lds	r20, 0x0114
 7a2:	50 91 15 01 	lds	r21, 0x0115
 7a6:	84 0f       	add	r24, r20
 7a8:	95 1f       	adc	r25, r21
 7aa:	8a 30       	cpi	r24, 0x0A	; 10
 7ac:	91 05       	cpc	r25, r1
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <move_Arm+0x1f0>
 7b0:	52 c0       	rjmp	.+164    	; 0x856 <move_Arm+0x294>
 7b2:	0a 97       	sbiw	r24, 0x0a	; 10
 7b4:	90 93 15 01 	sts	0x0115, r25
 7b8:	80 93 14 01 	sts	0x0114, r24
 7bc:	27 e0       	ldi	r18, 0x07	; 7
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	60 e5       	ldi	r22, 0x50	; 80
 7c2:	31 de       	rcall	.-926    	; 0x426 <move_Single_Servo>
 7c4:	48 c0       	rjmp	.+144    	; 0x856 <move_Arm+0x294>
 7c6:	80 91 14 01 	lds	r24, 0x0114
 7ca:	90 91 15 01 	lds	r25, 0x0115
 7ce:	0a 96       	adiw	r24, 0x0a	; 10
 7d0:	48 e2       	ldi	r20, 0x28	; 40
 7d2:	24 9f       	mul	r18, r20
 7d4:	80 0d       	add	r24, r0
 7d6:	91 1d       	adc	r25, r1
 7d8:	11 24       	eor	r1, r1
 7da:	8f 3f       	cpi	r24, 0xFF	; 255
 7dc:	23 e0       	ldi	r18, 0x03	; 3
 7de:	92 07       	cpc	r25, r18
 7e0:	d0 f5       	brcc	.+116    	; 0x856 <move_Arm+0x294>
 7e2:	90 93 15 01 	sts	0x0115, r25
 7e6:	80 93 14 01 	sts	0x0114, r24
 7ea:	27 e0       	ldi	r18, 0x07	; 7
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	60 e5       	ldi	r22, 0x50	; 80
 7f0:	1a de       	rcall	.-972    	; 0x426 <move_Single_Servo>
 7f2:	31 c0       	rjmp	.+98     	; 0x856 <move_Arm+0x294>
 7f4:	96 30       	cpi	r25, 0x06	; 6
 7f6:	79 f5       	brne	.+94     	; 0x856 <move_Arm+0x294>
 7f8:	31 11       	cpse	r19, r1
 7fa:	17 c0       	rjmp	.+46     	; 0x82a <move_Arm+0x268>
 7fc:	38 ed       	ldi	r19, 0xD8	; 216
 7fe:	32 03       	mulsu	r19, r18
 800:	c0 01       	movw	r24, r0
 802:	11 24       	eor	r1, r1
 804:	40 91 18 01 	lds	r20, 0x0118
 808:	50 91 19 01 	lds	r21, 0x0119
 80c:	84 0f       	add	r24, r20
 80e:	95 1f       	adc	r25, r21
 810:	8a 30       	cpi	r24, 0x0A	; 10
 812:	91 05       	cpc	r25, r1
 814:	01 f1       	breq	.+64     	; 0x856 <move_Arm+0x294>
 816:	0a 97       	sbiw	r24, 0x0a	; 10
 818:	90 93 19 01 	sts	0x0119, r25
 81c:	80 93 18 01 	sts	0x0118, r24
 820:	28 e0       	ldi	r18, 0x08	; 8
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	60 e5       	ldi	r22, 0x50	; 80
 826:	ff dd       	rcall	.-1026   	; 0x426 <move_Single_Servo>
 828:	16 c0       	rjmp	.+44     	; 0x856 <move_Arm+0x294>
 82a:	80 91 18 01 	lds	r24, 0x0118
 82e:	90 91 19 01 	lds	r25, 0x0119
 832:	0a 96       	adiw	r24, 0x0a	; 10
 834:	48 e2       	ldi	r20, 0x28	; 40
 836:	24 9f       	mul	r18, r20
 838:	80 0d       	add	r24, r0
 83a:	91 1d       	adc	r25, r1
 83c:	11 24       	eor	r1, r1
 83e:	8f 3f       	cpi	r24, 0xFF	; 255
 840:	23 e0       	ldi	r18, 0x03	; 3
 842:	92 07       	cpc	r25, r18
 844:	40 f4       	brcc	.+16     	; 0x856 <move_Arm+0x294>
 846:	90 93 19 01 	sts	0x0119, r25
 84a:	80 93 18 01 	sts	0x0118, r24
 84e:	28 e0       	ldi	r18, 0x08	; 8
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	60 e5       	ldi	r22, 0x50	; 80
 854:	e8 dd       	rcall	.-1072   	; 0x426 <move_Single_Servo>
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <SPI_Init_Slave>:
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	80 93 0e 01 	sts	0x010E, r24
 862:	88 e4       	ldi	r24, 0x48	; 72
 864:	84 b9       	out	0x04, r24	; 4
 866:	83 ec       	ldi	r24, 0xC3	; 195
 868:	8c bd       	out	0x2c, r24	; 44
 86a:	78 94       	sei
 86c:	08 95       	ret

0000086e <_exit>:
 86e:	f8 94       	cli

00000870 <__stop_program>:
 870:	ff cf       	rjmp	.-2      	; 0x870 <__stop_program>
