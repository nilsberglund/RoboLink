
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d54  00000de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  00000de8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000158  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a78  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000053f  00000000  00000000  0000314a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ec5  00000000  00000000  00003689  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000378  00000000  00000000  00004550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000058d  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001395  00000000  00000000  00004e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  000061ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	e2 c0       	rjmp	.+452    	; 0x206 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	30 c0       	rjmp	.+96     	; 0xae <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 32       	cpi	r26, 0x25	; 37
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	e2 d0       	rcall	.+452    	; 0x26e <main>
  aa:	52 c6       	rjmp	.+3236   	; 0xd50 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_19>:
#include "Servo.h"
#include "Control_module.h"


ISR(SPI_STC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	data = SPDR;
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	80 93 13 01 	sts	0x0113, r24
	
	if(waitingForInstruction == 1)
  da:	80 91 1c 01 	lds	r24, 0x011C
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_19+0x36>
  e2:	42 c0       	rjmp	.+132    	; 0x168 <__vector_19+0xba>
	{
		//waitingForInstruction = 0;
		if(data == 0b10000100)
  e4:	80 91 13 01 	lds	r24, 0x0113
  e8:	84 38       	cpi	r24, 0x84	; 132
  ea:	59 f4       	brne	.+22     	; 0x102 <__vector_19+0x54>
		{
			component = SENSOR;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
  f2:	10 92 1c 01 	sts	0x011C, r1
			
			TIMSK0 &= ~(1<<OCIE0A);
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	80 83       	st	Z, r24
 100:	6f c0       	rjmp	.+222    	; 0x1e0 <__vector_19+0x132>
			
			//stationMode = 0;
			
		} else if (data == 0b10000101)
 102:	80 91 13 01 	lds	r24, 0x0113
 106:	85 38       	cpi	r24, 0x85	; 133
 108:	31 f4       	brne	.+12     	; 0x116 <__vector_19+0x68>
		{
			component = WHEEL;
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 110:	10 92 1c 01 	sts	0x011C, r1
 114:	65 c0       	rjmp	.+202    	; 0x1e0 <__vector_19+0x132>
		} else if(data == 0b10000110)
 116:	80 91 13 01 	lds	r24, 0x0113
 11a:	86 38       	cpi	r24, 0x86	; 134
 11c:	31 f4       	brne	.+12     	; 0x12a <__vector_19+0x7c>
		{
			waitingForInstruction = 0;
 11e:	10 92 1c 01 	sts	0x011C, r1
			component = ARM;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 07 01 	sts	0x0107, r24
 128:	5b c0       	rjmp	.+182    	; 0x1e0 <__vector_19+0x132>
		} else if(data == 0b10000111)
 12a:	80 91 13 01 	lds	r24, 0x0113
 12e:	87 38       	cpi	r24, 0x87	; 135
 130:	31 f4       	brne	.+12     	; 0x13e <__vector_19+0x90>
		{
			component = KPROPORTIONAL;
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 138:	10 92 1c 01 	sts	0x011C, r1
 13c:	51 c0       	rjmp	.+162    	; 0x1e0 <__vector_19+0x132>
		} else if(data == 0b10001011)
 13e:	80 91 13 01 	lds	r24, 0x0113
 142:	8b 38       	cpi	r24, 0x8B	; 139
 144:	31 f4       	brne	.+12     	; 0x152 <__vector_19+0xa4>
		{
			component = KDERIVATIVE;
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 14c:	10 92 1c 01 	sts	0x011C, r1
 150:	47 c0       	rjmp	.+142    	; 0x1e0 <__vector_19+0x132>
		} else if(data == 0b10001111)
 152:	80 91 13 01 	lds	r24, 0x0113
 156:	8f 38       	cpi	r24, 0x8F	; 143
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_19+0xae>
 15a:	42 c0       	rjmp	.+132    	; 0x1e0 <__vector_19+0x132>
		{
			component = DROPITEM;
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 162:	10 92 1c 01 	sts	0x011C, r1
 166:	3c c0       	rjmp	.+120    	; 0x1e0 <__vector_19+0x132>
		}
	}
	else
	{
		waitingForInstruction = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 1c 01 	sts	0x011C, r24
		if(component == SENSOR)
 16e:	80 91 07 01 	lds	r24, 0x0107
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	51 f4       	brne	.+20     	; 0x18a <__vector_19+0xdc>
		{
			sensorData = data;
 176:	80 91 13 01 	lds	r24, 0x0113
 17a:	80 93 10 01 	sts	0x0110, r24
			if(stationMode == 0)
 17e:	80 91 14 01 	lds	r24, 0x0114
 182:	81 11       	cpse	r24, r1
 184:	2d c0       	rjmp	.+90     	; 0x1e0 <__vector_19+0x132>
			{
				controlAlgorithm();
 186:	39 d1       	rcall	.+626    	; 0x3fa <controlAlgorithm>
 188:	2b c0       	rjmp	.+86     	; 0x1e0 <__vector_19+0x132>
			}
		}else if (component == ARM)
 18a:	80 91 07 01 	lds	r24, 0x0107
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	41 f4       	brne	.+16     	; 0x1a2 <__vector_19+0xf4>
		{
			armData = data;
 192:	80 91 13 01 	lds	r24, 0x0113
 196:	80 93 0f 01 	sts	0x010F, r24
			moveArm(armData);
 19a:	80 91 0f 01 	lds	r24, 0x010F
 19e:	1a d4       	rcall	.+2100   	; 0x9d4 <moveArm>
 1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <__vector_19+0x132>
		} else if (component == WHEEL)
 1a2:	80 91 07 01 	lds	r24, 0x0107
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_19+0x108>
		{
			steeringData = data;
 1aa:	80 91 13 01 	lds	r24, 0x0113
 1ae:	80 93 11 01 	sts	0x0111, r24
			moveRobot();
 1b2:	d5 d1       	rcall	.+938    	; 0x55e <moveRobot>
 1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <__vector_19+0x132>
		}  else if (component == KPROPORTIONAL)
 1b6:	80 91 07 01 	lds	r24, 0x0107
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <__vector_19+0x118>
		{
			changeProportional(data);
 1be:	80 91 13 01 	lds	r24, 0x0113
 1c2:	32 d2       	rcall	.+1124   	; 0x628 <changeProportional>
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <__vector_19+0x132>
		}  else if (component == KDERIVATIVE)
 1c6:	80 91 07 01 	lds	r24, 0x0107
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <__vector_19+0x128>
		{
			changeDerivative(data);
 1ce:	80 91 13 01 	lds	r24, 0x0113
 1d2:	2d d2       	rcall	.+1114   	; 0x62e <changeDerivative>
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <__vector_19+0x132>
		}  else if (component == DROPITEM)
 1d6:	80 91 07 01 	lds	r24, 0x0107
 1da:	86 30       	cpi	r24, 0x06	; 6
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <__vector_19+0x132>
		{
			dropItem();
 1de:	92 d3       	rcall	.+1828   	; 0x904 <dropItem>
		}
	}
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0b be       	out	0x3b, r0	; 59
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	0b b6       	in	r0, 0x3b	; 59
 212:	0f 92       	push	r0
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if(stationMode == 1)
 22c:	80 91 14 01 	lds	r24, 0x0114
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f4       	brne	.+2      	; 0x236 <__vector_16+0x30>
	{
		updateServos();	
 234:	55 d5       	rcall	.+2730   	; 0xce0 <updateServos>
	}
	
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0b be       	out	0x3b, r0	; 59
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <initTimer>:
}


void initTimer()
{
	TCCR0A = 0;
 25c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 262:	16 bc       	out	0x26, r1	; 38
	OCR0A = 150;
 264:	86 e9       	ldi	r24, 0x96	; 150
 266:	87 bd       	out	0x27, r24	; 39
	
	stationMode = 0;
 268:	10 92 14 01 	sts	0x0114, r1
 26c:	08 95       	ret

0000026e <main>:
	
}

int main(void)
{
	SPIInitSlave();
 26e:	61 d5       	rcall	.+2754   	; 0xd32 <SPIInitSlave>
	drivingSetup();
 270:	92 d0       	rcall	.+292    	; 0x396 <drivingSetup>
	armInit();
 272:	c1 d2       	rcall	.+1410   	; 0x7f6 <armInit>
	initTimer();
 274:	f3 df       	rcall	.-26     	; 0x25c <initTimer>
 276:	ff cf       	rjmp	.-2      	; 0x276 <main+0x8>

00000278 <getError>:
#include "Control_module.h"


/*Function that calculates the line error*/
int8_t getError()
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <getError+0x6>
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t res = 0; 
 284:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t sum = 0; // Sum of all data from active sensors (1,..,7)
 286:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0; // Counter which counts number of sensors activated 
 288:	1b 82       	std	Y+3, r1	; 0x03
	error = 0; // Error from line
 28a:	10 92 18 01 	sts	0x0118, r1
	uint8_t lineData; 
	lineData = sensorData;
 28e:	40 91 10 01 	lds	r20, 0x0110
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((lineData >> noShift) & 0x01);
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	9a 01       	movw	r18, r20
 29a:	08 2e       	mov	r0, r24
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <getError+0x2a>
 29e:	35 95       	asr	r19
 2a0:	27 95       	ror	r18
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <getError+0x26>
 2a6:	21 70       	andi	r18, 0x01	; 1
 2a8:	33 27       	eor	r19, r19
 2aa:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 2ac:	29 81       	ldd	r18, Y+1	; 0x01
 2ae:	21 30       	cpi	r18, 0x01	; 1
 2b0:	39 f4       	brne	.+14     	; 0x2c0 <getError+0x48>
		{
			sum = sum + (7 - noShift);
 2b2:	2a 81       	ldd	r18, Y+2	; 0x02
 2b4:	29 5f       	subi	r18, 0xF9	; 249
 2b6:	28 1b       	sub	r18, r24
 2b8:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 2ba:	2b 81       	ldd	r18, Y+3	; 0x03
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	2b 83       	std	Y+3, r18	; 0x03
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	50 f7       	brcc	.-44     	; 0x298 <getError+0x20>
		}
	}
	if(counter1 == 1)
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <getError+0x60>
	{
		error = sum + (sum-1);
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	89 0f       	add	r24, r25
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	80 93 18 01 	sts	0x0118, r24
 2d6:	22 c0       	rjmp	.+68     	; 0x31c <getError+0xa4>
	} else if(counter1 == 2)
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <getError+0x70>

	{
		error = sum-1;
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	80 93 18 01 	sts	0x0118, r24
 2e6:	1a c0       	rjmp	.+52     	; 0x31c <getError+0xa4>
	} else if(counter1 == 3)
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	a1 f4       	brne	.+40     	; 0x316 <getError+0x9e>
	{
		error = sum*2;
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	88 0f       	add	r24, r24
 2f2:	80 93 18 01 	sts	0x0118, r24
		error = error/(0b00000011);
 2f6:	80 91 18 01 	lds	r24, 0x0118
 2fa:	96 e5       	ldi	r25, 0x56	; 86
 2fc:	89 02       	muls	r24, r25
 2fe:	91 2d       	mov	r25, r1
 300:	11 24       	eor	r1, r1
 302:	87 fd       	sbrc	r24, 7
 304:	93 95       	inc	r25
 306:	90 93 18 01 	sts	0x0118, r25
		error = error - 1;
 30a:	80 91 18 01 	lds	r24, 0x0118
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	80 93 18 01 	sts	0x0118, r24
 314:	03 c0       	rjmp	.+6      	; 0x31c <getError+0xa4>
		
	} 
	 else
	{
		error = -8;
 316:	88 ef       	ldi	r24, 0xF8	; 248
 318:	80 93 18 01 	sts	0x0118, r24
	}
	error = 7 - error;
 31c:	90 91 18 01 	lds	r25, 0x0118
 320:	87 e0       	ldi	r24, 0x07	; 7
 322:	89 1b       	sub	r24, r25
 324:	80 93 18 01 	sts	0x0118, r24
	return error;
 328:	80 91 18 01 	lds	r24, 0x0118
}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <calculateSpeed>:
	}
}

/* function that calculates the speed */
int8_t calculateSpeed(int8_t error)
{
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <calculateSpeed+0x8>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 344:	1a 82       	std	Y+2, r1	; 0x02
 346:	19 82       	std	Y+1, r1	; 0x01
	
	speed = Kp * error + Kd * (error - prevError);
 348:	28 2f       	mov	r18, r24
 34a:	33 27       	eor	r19, r19
 34c:	27 fd       	sbrc	r18, 7
 34e:	30 95       	com	r19
 350:	40 91 1a 01 	lds	r20, 0x011A
 354:	42 03       	mulsu	r20, r18
 356:	b0 01       	movw	r22, r0
 358:	43 9f       	mul	r20, r19
 35a:	70 0d       	add	r23, r0
 35c:	11 24       	eor	r1, r1
 35e:	10 91 15 01 	lds	r17, 0x0115
 362:	90 91 0c 01 	lds	r25, 0x010C
 366:	29 1b       	sub	r18, r25
 368:	31 09       	sbc	r19, r1
 36a:	97 fd       	sbrc	r25, 7
 36c:	33 95       	inc	r19
 36e:	12 03       	mulsu	r17, r18
 370:	a0 01       	movw	r20, r0
 372:	13 9f       	mul	r17, r19
 374:	50 0d       	add	r21, r0
 376:	11 24       	eor	r1, r1
 378:	9b 01       	movw	r18, r22
 37a:	24 0f       	add	r18, r20
 37c:	35 1f       	adc	r19, r21
 37e:	3a 83       	std	Y+2, r19	; 0x02
 380:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 382:	80 93 0c 01 	sts	0x010C, r24
	return speed;
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
}
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	08 95       	ret

00000396 <drivingSetup>:

/* function initiates driving */
void drivingSetup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 396:	81 ef       	ldi	r24, 0xF1	; 241
 398:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 128
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //Starts the timer
 3a2:	10 92 85 00 	sts	0x0085, r1
 3a6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 255; //Sets compare register => Robot does not move
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 89 00 	sts	0x0089, r25
 3b2:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 255; // Sets compare register => Robot does not move
 3b6:	90 93 8b 00 	sts	0x008B, r25
 3ba:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7); //Sets the data direction for the PWM and direction ports. 
 3be:	8a b1       	in	r24, 0x0a	; 10
 3c0:	80 6f       	ori	r24, 0xF0	; 240
 3c2:	8a b9       	out	0x0a, r24	; 10
	Kp = 20;
 3c4:	84 e1       	ldi	r24, 0x14	; 20
 3c6:	80 93 1a 01 	sts	0x011A, r24
	Kd = 5;
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	80 93 15 01 	sts	0x0115, r24
 3d0:	08 95       	ret

000003d2 <drive>:

/* Function that controls both direction and speed of the motors. 
	rightDir, leftDir = 1 => Forward. rightDir, leftDir = 0 => Backward. */
void drive(int rightDir, int leftDir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(rightDir == 1)
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	11 f4       	brne	.+4      	; 0x3da <drive+0x8>
	{
		PORTD &= ~(1 << PORTD7);
 3d6:	5f 98       	cbi	0x0b, 7	; 11
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <drive+0xa>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 3da:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(leftDir == 1)
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	71 05       	cpc	r23, r1
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <drive+0x14>
	{
		PORTD |= (1 << PORTD6);
 3e2:	5e 9a       	sbi	0x0b, 6	; 11
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <drive+0x16>
	}
	else
	{
		PORTD &= ~(1 << PORTD6);
 3e6:	5e 98       	cbi	0x0b, 6	; 11
	}
	OCR1A = rightSpeed;
 3e8:	30 93 89 00 	sts	0x0089, r19
 3ec:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 3f0:	50 93 8b 00 	sts	0x008B, r21
 3f4:	40 93 8a 00 	sts	0x008A, r20
 3f8:	08 95       	ret

000003fa <controlAlgorithm>:
}

/* Function that controls the robot movement when following a line */
void controlAlgorithm()
{
	error = getError();
 3fa:	3e df       	rcall	.-388    	; 0x278 <getError>
 3fc:	80 93 18 01 	sts	0x0118, r24
		
	if(error == 15)  // No sensors activated
 400:	80 91 18 01 	lds	r24, 0x0118
 404:	8f 30       	cpi	r24, 0x0F	; 15
 406:	99 f4       	brne	.+38     	; 0x42e <controlAlgorithm+0x34>
	{
		rightWheelSpeed = rightWheelSpeed; 
 408:	80 91 06 01 	lds	r24, 0x0106
 40c:	80 93 06 01 	sts	0x0106, r24
		leftWheelSpeed = leftWheelSpeed;
 410:	80 91 03 01 	lds	r24, 0x0103
 414:	80 93 03 01 	sts	0x0103, r24
		drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 418:	20 91 06 01 	lds	r18, 0x0106
 41c:	40 91 03 01 	lds	r20, 0x0103
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	d2 df       	rcall	.-92     	; 0x3d2 <drive>
	else
	{
		
	}
	{	
		midSpeed = 140;  //Standard speed
 42e:	8c e8       	ldi	r24, 0x8C	; 140
 430:	80 93 19 01 	sts	0x0119, r24
		int16_t speed = calculateSpeed(error);  //calculate new speed 
 434:	80 91 18 01 	lds	r24, 0x0118
 438:	7f df       	rcall	.-258    	; 0x338 <calculateSpeed>
 43a:	28 2f       	mov	r18, r24
 43c:	33 27       	eor	r19, r19
 43e:	27 fd       	sbrc	r18, 7
 440:	30 95       	com	r19
		if ((midSpeed-speed) < 10)
 442:	90 91 19 01 	lds	r25, 0x0119
 446:	49 2f       	mov	r20, r25
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	42 1b       	sub	r20, r18
 44c:	53 0b       	sbc	r21, r19
 44e:	4a 30       	cpi	r20, 0x0A	; 10
 450:	51 05       	cpc	r21, r1
 452:	3c f4       	brge	.+14     	; 0x462 <controlAlgorithm+0x68>
		{
			rightWheelSpeed = 3;
 454:	93 e0       	ldi	r25, 0x03	; 3
 456:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	90 93 1b 01 	sts	0x011B, r25
 460:	0f c0       	rjmp	.+30     	; 0x480 <controlAlgorithm+0x86>
		}
		else if ((midSpeed-speed) > 235)
 462:	4c 3e       	cpi	r20, 0xEC	; 236
 464:	51 05       	cpc	r21, r1
 466:	34 f0       	brlt	.+12     	; 0x474 <controlAlgorithm+0x7a>
		{
			rightWheelSpeed = 100;
 468:	94 e6       	ldi	r25, 0x64	; 100
 46a:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 0;
 46e:	10 92 1b 01 	sts	0x011B, r1
 472:	06 c0       	rjmp	.+12     	; 0x480 <controlAlgorithm+0x86>
		}
		else
		{
			rightWheelSpeed = midSpeed - speed;
 474:	98 1b       	sub	r25, r24
 476:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	90 93 1b 01 	sts	0x011B, r25
		}
		
		if ((midSpeed+speed) < 10)
 480:	90 91 19 01 	lds	r25, 0x0119
 484:	29 0f       	add	r18, r25
 486:	31 1d       	adc	r19, r1
 488:	2a 30       	cpi	r18, 0x0A	; 10
 48a:	31 05       	cpc	r19, r1
 48c:	3c f4       	brge	.+14     	; 0x49c <controlAlgorithm+0xa2>
		{
			leftWheelSpeed = 40;
 48e:	88 e2       	ldi	r24, 0x28	; 40
 490:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	80 93 12 01 	sts	0x0112, r24
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <controlAlgorithm+0xc0>
		}
		else if ((midSpeed+speed) > 235)
 49c:	2c 3e       	cpi	r18, 0xEC	; 236
 49e:	31 05       	cpc	r19, r1
 4a0:	34 f0       	brlt	.+12     	; 0x4ae <controlAlgorithm+0xb4>
		{
			leftWheelSpeed = 80;
 4a2:	80 e5       	ldi	r24, 0x50	; 80
 4a4:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 0;
 4a8:	10 92 12 01 	sts	0x0112, r1
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <controlAlgorithm+0xc0>
		}
		else
		{
			leftWheelSpeed = midSpeed + speed;
 4ae:	89 0f       	add	r24, r25
 4b0:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 12 01 	sts	0x0112, r24
		}
		drive(rightWheelDirection, leftWheelDirection, leftWheelSpeed, rightWheelSpeed);
 4ba:	20 91 06 01 	lds	r18, 0x0106
 4be:	40 91 03 01 	lds	r20, 0x0103
 4c2:	60 91 12 01 	lds	r22, 0x0112
 4c6:	80 91 1b 01 	lds	r24, 0x011B
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	7f cf       	rjmp	.-258    	; 0x3d2 <drive>

000004d4 <driveForward>:
}

/* Function that makes the robot move forward */
void driveForward(uint8_t speed)
{
	drive(1, 1, speed, speed);
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	48 2f       	mov	r20, r24
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	76 cf       	rjmp	.-276    	; 0x3d2 <drive>

000004e6 <driveBackward>:
}
/* Function that makes the robot move backward */
void driveBackward(uint8_t speed)
{
	drive(0, 0, speed, speed);
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	48 2f       	mov	r20, r24
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	6d cf       	rjmp	.-294    	; 0x3d2 <drive>

000004f8 <stop>:
}
/* Function that makes the robot stop */
void stop()
{
	drive(1, 1, 255, 255);
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	4f ef       	ldi	r20, 0xFF	; 255
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	64 cf       	rjmp	.-312    	; 0x3d2 <drive>

0000050a <driveForwardRight>:
}
/* Function that makes the robot move forward and to the right */
void driveForwardRight(uint8_t speed)
{
	drive(1, 1, speed - 40, speed + 40);
 50a:	48 2f       	mov	r20, r24
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	9a 01       	movw	r18, r20
 510:	28 5d       	subi	r18, 0xD8	; 216
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	48 52       	subi	r20, 0x28	; 40
 516:	51 09       	sbc	r21, r1
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	58 cf       	rjmp	.-336    	; 0x3d2 <drive>

00000522 <driveForwardLeft>:
}

/* Function that makes the robot move forward and to the left */
void driveForwardLeft(uint8_t speed)
{
	drive(1, 1, speed + 40, speed - 40);
 522:	48 2f       	mov	r20, r24
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	9a 01       	movw	r18, r20
 528:	28 52       	subi	r18, 0x28	; 40
 52a:	31 09       	sbc	r19, r1
 52c:	48 5d       	subi	r20, 0xD8	; 216
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	4c cf       	rjmp	.-360    	; 0x3d2 <drive>

0000053a <rotateCCW>:

/* Function that rotates the robot counterclockwise */
void rotateCCW()
{
	uint8_t speed = 100;
	drive(1, 0, speed, speed);
 53a:	24 e6       	ldi	r18, 0x64	; 100
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	44 e6       	ldi	r20, 0x64	; 100
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	43 cf       	rjmp	.-378    	; 0x3d2 <drive>

0000054c <rotateCW>:

/* Function that rotates the robot clockwise */
void rotateCW()
{
	uint8_t speed = 100;
	drive(0, 1, speed, speed);
 54c:	24 e6       	ldi	r18, 0x64	; 100
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	44 e6       	ldi	r20, 0x64	; 100
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	3a cf       	rjmp	.-396    	; 0x3d2 <drive>

0000055e <moveRobot>:
/* Function that allows the user to control the robot movement via the GUI. */
void moveRobot()
{
	uint8_t FASTSPEED = 80;
	uint8_t SLOWSPEED = 200;
	if(((steeringData & 0x08) >> 3) == 1)
 55e:	80 91 11 01 	lds	r24, 0x0111
 562:	83 ff       	sbrs	r24, 3
 564:	1e c0       	rjmp	.+60     	; 0x5a2 <moveRobot+0x44>
	{
		if(steeringData == 0b00001100)
 566:	80 91 11 01 	lds	r24, 0x0111
 56a:	8c 30       	cpi	r24, 0x0C	; 12
 56c:	11 f4       	brne	.+4      	; 0x572 <moveRobot+0x14>
		{
			driveBackward(FASTSPEED);
 56e:	80 e5       	ldi	r24, 0x50	; 80
 570:	ba cf       	rjmp	.-140    	; 0x4e6 <driveBackward>
		} else if(steeringData == 0b00001011)
 572:	80 91 11 01 	lds	r24, 0x0111
 576:	8b 30       	cpi	r24, 0x0B	; 11
 578:	11 f4       	brne	.+4      	; 0x57e <moveRobot+0x20>
		{
			driveForwardLeft(FASTSPEED);
 57a:	80 e5       	ldi	r24, 0x50	; 80
 57c:	d2 cf       	rjmp	.-92     	; 0x522 <driveForwardLeft>
		} else if(steeringData == 0b00001010)
 57e:	80 91 11 01 	lds	r24, 0x0111
 582:	8a 30       	cpi	r24, 0x0A	; 10
 584:	11 f4       	brne	.+4      	; 0x58a <moveRobot+0x2c>
		{
			driveForwardRight(FASTSPEED);
 586:	80 e5       	ldi	r24, 0x50	; 80
 588:	c0 cf       	rjmp	.-128    	; 0x50a <driveForwardRight>
		} else if(steeringData == 0b00001001)
 58a:	80 91 11 01 	lds	r24, 0x0111
 58e:	89 30       	cpi	r24, 0x09	; 9
 590:	11 f4       	brne	.+4      	; 0x596 <moveRobot+0x38>
		{
			driveForward(FASTSPEED);
 592:	80 e5       	ldi	r24, 0x50	; 80
 594:	9f cf       	rjmp	.-194    	; 0x4d4 <driveForward>
		} else if(steeringData == 0b00001000)
 596:	80 91 11 01 	lds	r24, 0x0111
 59a:	88 30       	cpi	r24, 0x08	; 8
 59c:	09 f0       	breq	.+2      	; 0x5a0 <moveRobot+0x42>
 59e:	43 c0       	rjmp	.+134    	; 0x626 <moveRobot+0xc8>
		{
			stop();
 5a0:	ab cf       	rjmp	.-170    	; 0x4f8 <stop>
		}
	}	else
	{
		if(steeringData == 0b00000100)
 5a2:	80 91 11 01 	lds	r24, 0x0111
 5a6:	84 30       	cpi	r24, 0x04	; 4
 5a8:	11 f4       	brne	.+4      	; 0x5ae <moveRobot+0x50>
		{
			driveBackward(SLOWSPEED);
 5aa:	88 ec       	ldi	r24, 0xC8	; 200
 5ac:	9c cf       	rjmp	.-200    	; 0x4e6 <driveBackward>
		} else if(steeringData == 0b00000011)
 5ae:	80 91 11 01 	lds	r24, 0x0111
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	11 f4       	brne	.+4      	; 0x5ba <moveRobot+0x5c>
		{
			driveForwardLeft(SLOWSPEED);
 5b6:	88 ec       	ldi	r24, 0xC8	; 200
 5b8:	b4 cf       	rjmp	.-152    	; 0x522 <driveForwardLeft>
		} else if(steeringData == 0b00000010)
 5ba:	80 91 11 01 	lds	r24, 0x0111
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <moveRobot+0x68>
		{
			driveForwardRight(SLOWSPEED);
 5c2:	88 ec       	ldi	r24, 0xC8	; 200
 5c4:	a2 cf       	rjmp	.-188    	; 0x50a <driveForwardRight>
		} else if(steeringData == 0b00000001)
 5c6:	80 91 11 01 	lds	r24, 0x0111
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <moveRobot+0x74>
		{
			driveForward(SLOWSPEED);
 5ce:	88 ec       	ldi	r24, 0xC8	; 200
 5d0:	81 cf       	rjmp	.-254    	; 0x4d4 <driveForward>
		} else if(steeringData == 0b00000000 || steeringData == 0b10000000)
 5d2:	80 91 11 01 	lds	r24, 0x0111
 5d6:	88 23       	and	r24, r24
 5d8:	21 f0       	breq	.+8      	; 0x5e2 <moveRobot+0x84>
 5da:	80 91 11 01 	lds	r24, 0x0111
 5de:	80 38       	cpi	r24, 0x80	; 128
 5e0:	c1 f4       	brne	.+48     	; 0x612 <moveRobot+0xb4>
		{
			
			stop();
 5e2:	8a df       	rcall	.-236    	; 0x4f8 <stop>
			TIMSK0 |= (1<<OCIE0A);
 5e4:	ee e6       	ldi	r30, 0x6E	; 110
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	82 60       	ori	r24, 0x02	; 2
 5ec:	80 83       	st	Z, r24
			
			stationMode = 1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 93 14 01 	sts	0x0114, r24
			if(steeringData == 0)
 5f4:	80 91 11 01 	lds	r24, 0x0111
 5f8:	81 11       	cpse	r24, r1
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <moveRobot+0xa6>
			{
				side = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 00 01 	sts	0x0100, r24
 602:	08 95       	ret
				
			} else if(steeringData == 128)
 604:	80 91 11 01 	lds	r24, 0x0111
 608:	80 38       	cpi	r24, 0x80	; 128
 60a:	69 f4       	brne	.+26     	; 0x626 <moveRobot+0xc8>
			{
				side = 0;
 60c:	10 92 00 01 	sts	0x0100, r1
 610:	08 95       	ret
			}
			
		} else if(steeringData == 0b00000101)
 612:	80 91 11 01 	lds	r24, 0x0111
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	09 f4       	brne	.+2      	; 0x61c <moveRobot+0xbe>
		{
			rotateCW();
 61a:	98 cf       	rjmp	.-208    	; 0x54c <rotateCW>
		} else if(steeringData == 0b00000110)
 61c:	80 91 11 01 	lds	r24, 0x0111
 620:	86 30       	cpi	r24, 0x06	; 6
 622:	09 f4       	brne	.+2      	; 0x626 <moveRobot+0xc8>
		{
			rotateCCW();
 624:	8a cf       	rjmp	.-236    	; 0x53a <rotateCCW>
 626:	08 95       	ret

00000628 <changeProportional>:
	}
}

void changeProportional(uint8_t newKp)
{
	Kp = newKp;
 628:	80 93 1a 01 	sts	0x011A, r24
 62c:	08 95       	ret

0000062e <changeDerivative>:
}

void changeDerivative(uint8_t newKd)
{
	Kd = newKd;
 62e:	80 93 15 01 	sts	0x0115, r24
 632:	08 95       	ret

00000634 <USARTTransmit>:
 634:	5b 9a       	sbi	0x0b, 3	; 11
 636:	e0 ec       	ldi	r30, 0xC0	; 192
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	90 81       	ld	r25, Z
 63c:	95 ff       	sbrs	r25, 5
 63e:	fd cf       	rjmp	.-6      	; 0x63a <USARTTransmit+0x6>
 640:	80 93 c6 00 	sts	0x00C6, r24
 644:	08 95       	ret

00000646 <moveSingleServo>:
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 d0       	rcall	.+0      	; 0x652 <moveSingleServo+0xc>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	f6 2e       	mov	r15, r22
 658:	04 2f       	mov	r16, r20
 65a:	12 2f       	mov	r17, r18
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	9a 83       	std	Y+2, r25	; 0x02
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	e8 df       	rcall	.-48     	; 0x634 <USARTTransmit>
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	e6 df       	rcall	.-52     	; 0x634 <USARTTransmit>
 668:	81 2f       	mov	r24, r17
 66a:	e4 df       	rcall	.-56     	; 0x634 <USARTTransmit>
 66c:	87 e0       	ldi	r24, 0x07	; 7
 66e:	e2 df       	rcall	.-60     	; 0x634 <USARTTransmit>
 670:	83 e0       	ldi	r24, 0x03	; 3
 672:	e0 df       	rcall	.-64     	; 0x634 <USARTTransmit>
 674:	8e e1       	ldi	r24, 0x1E	; 30
 676:	de df       	rcall	.-68     	; 0x634 <USARTTransmit>
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	dc df       	rcall	.-72     	; 0x634 <USARTTransmit>
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	da df       	rcall	.-76     	; 0x634 <USARTTransmit>
 680:	8f 2d       	mov	r24, r15
 682:	d8 df       	rcall	.-80     	; 0x634 <USARTTransmit>
 684:	80 2f       	mov	r24, r16
 686:	d6 df       	rcall	.-84     	; 0x634 <USARTTransmit>
 688:	99 81       	ldd	r25, Y+1	; 0x01
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	89 0f       	add	r24, r25
 68e:	88 5d       	subi	r24, 0xD8	; 216
 690:	f8 0e       	add	r15, r24
 692:	0f 0d       	add	r16, r15
 694:	80 2f       	mov	r24, r16
 696:	81 0f       	add	r24, r17
 698:	80 95       	com	r24
 69a:	cc df       	rcall	.-104    	; 0x634 <USARTTransmit>
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	ff 90       	pop	r15
 6aa:	08 95       	ret

000006ac <moveDoubleServo>:
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <moveDoubleServo+0xe>
 6ba:	00 d0       	rcall	.+0      	; 0x6bc <moveDoubleServo+0x10>
 6bc:	00 d0       	rcall	.+0      	; 0x6be <moveDoubleServo+0x12>
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	f6 2e       	mov	r15, r22
 6c4:	14 2f       	mov	r17, r20
 6c6:	e2 2e       	mov	r14, r18
 6c8:	af ef       	ldi	r26, 0xFF	; 255
 6ca:	b3 e0       	ldi	r27, 0x03	; 3
 6cc:	a8 1b       	sub	r26, r24
 6ce:	b9 0b       	sbc	r27, r25
 6d0:	ba 83       	std	Y+2, r27	; 0x02
 6d2:	a9 83       	std	Y+1, r26	; 0x01
 6d4:	8b 83       	std	Y+3, r24	; 0x03
 6d6:	9c 83       	std	Y+4, r25	; 0x04
 6d8:	e9 81       	ldd	r30, Y+1	; 0x01
 6da:	fa 81       	ldd	r31, Y+2	; 0x02
 6dc:	ed 83       	std	Y+5, r30	; 0x05
 6de:	e9 81       	ldd	r30, Y+1	; 0x01
 6e0:	fa 81       	ldd	r31, Y+2	; 0x02
 6e2:	fe 83       	std	Y+6, r31	; 0x06
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	a6 df       	rcall	.-180    	; 0x634 <USARTTransmit>
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	a4 df       	rcall	.-184    	; 0x634 <USARTTransmit>
 6ec:	8e ef       	ldi	r24, 0xFE	; 254
 6ee:	a2 df       	rcall	.-188    	; 0x634 <USARTTransmit>
 6f0:	8e e0       	ldi	r24, 0x0E	; 14
 6f2:	a0 df       	rcall	.-192    	; 0x634 <USARTTransmit>
 6f4:	83 e8       	ldi	r24, 0x83	; 131
 6f6:	9e df       	rcall	.-196    	; 0x634 <USARTTransmit>
 6f8:	8e e1       	ldi	r24, 0x1E	; 30
 6fa:	9c df       	rcall	.-200    	; 0x634 <USARTTransmit>
 6fc:	84 e0       	ldi	r24, 0x04	; 4
 6fe:	9a df       	rcall	.-204    	; 0x634 <USARTTransmit>
 700:	8e 2d       	mov	r24, r14
 702:	98 df       	rcall	.-208    	; 0x634 <USARTTransmit>
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	96 df       	rcall	.-212    	; 0x634 <USARTTransmit>
 708:	8c 81       	ldd	r24, Y+4	; 0x04
 70a:	94 df       	rcall	.-216    	; 0x634 <USARTTransmit>
 70c:	8f 2d       	mov	r24, r15
 70e:	92 df       	rcall	.-220    	; 0x634 <USARTTransmit>
 710:	81 2f       	mov	r24, r17
 712:	90 df       	rcall	.-224    	; 0x634 <USARTTransmit>
 714:	80 2f       	mov	r24, r16
 716:	8e df       	rcall	.-228    	; 0x634 <USARTTransmit>
 718:	8d 81       	ldd	r24, Y+5	; 0x05
 71a:	8c df       	rcall	.-232    	; 0x634 <USARTTransmit>
 71c:	8e 81       	ldd	r24, Y+6	; 0x06
 71e:	8a df       	rcall	.-236    	; 0x634 <USARTTransmit>
 720:	8f 2d       	mov	r24, r15
 722:	88 df       	rcall	.-240    	; 0x634 <USARTTransmit>
 724:	81 2f       	mov	r24, r17
 726:	86 df       	rcall	.-244    	; 0x634 <USARTTransmit>
 728:	3b 81       	ldd	r19, Y+3	; 0x03
 72a:	8c 81       	ldd	r24, Y+4	; 0x04
 72c:	2d 81       	ldd	r18, Y+5	; 0x05
 72e:	9e 81       	ldd	r25, Y+6	; 0x06
 730:	83 0f       	add	r24, r19
 732:	8f 54       	subi	r24, 0x4F	; 79
 734:	82 0f       	add	r24, r18
 736:	89 0f       	add	r24, r25
 738:	8f 0d       	add	r24, r15
 73a:	f8 0e       	add	r15, r24
 73c:	f1 0e       	add	r15, r17
 73e:	1f 0d       	add	r17, r15
 740:	e1 0e       	add	r14, r17
 742:	8e 2d       	mov	r24, r14
 744:	80 0f       	add	r24, r16
 746:	80 95       	com	r24
 748:	75 df       	rcall	.-278    	; 0x634 <USARTTransmit>
 74a:	26 96       	adiw	r28, 0x06	; 6
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	f8 94       	cli
 750:	de bf       	out	0x3e, r29	; 62
 752:	0f be       	out	0x3f, r0	; 63
 754:	cd bf       	out	0x3d, r28	; 61
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	08 95       	ret

00000764 <defaultPosition>:
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	27 e0       	ldi	r18, 0x07	; 7
 76a:	41 e0       	ldi	r20, 0x01	; 1
 76c:	60 e5       	ldi	r22, 0x50	; 80
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	69 df       	rcall	.-302    	; 0x646 <moveSingleServo>
 774:	26 e0       	ldi	r18, 0x06	; 6
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	60 e5       	ldi	r22, 0x50	; 80
 77a:	82 e3       	ldi	r24, 0x32	; 50
 77c:	93 e0       	ldi	r25, 0x03	; 3
 77e:	63 df       	rcall	.-314    	; 0x646 <moveSingleServo>
 780:	03 e0       	ldi	r16, 0x03	; 3
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	22 e0       	ldi	r18, 0x02	; 2
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	60 e5       	ldi	r22, 0x50	; 80
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	8e df       	rcall	.-228    	; 0x6ac <moveDoubleServo>
 790:	05 e0       	ldi	r16, 0x05	; 5
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	24 e0       	ldi	r18, 0x04	; 4
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	60 e5       	ldi	r22, 0x50	; 80
 79a:	8c ec       	ldi	r24, 0xCC	; 204
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	86 df       	rcall	.-244    	; 0x6ac <moveDoubleServo>
 7a0:	03 e0       	ldi	r16, 0x03	; 3
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	22 e0       	ldi	r18, 0x02	; 2
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	60 e5       	ldi	r22, 0x50	; 80
 7aa:	8c ec       	ldi	r24, 0xCC	; 204
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	7e df       	rcall	.-260    	; 0x6ac <moveDoubleServo>
 7b0:	21 e0       	ldi	r18, 0x01	; 1
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	60 e2       	ldi	r22, 0x20	; 32
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	45 df       	rcall	.-374    	; 0x646 <moveSingleServo>
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	91 e0       	ldi	r25, 0x01	; 1
 7c0:	90 93 09 01 	sts	0x0109, r25
 7c4:	80 93 08 01 	sts	0x0108, r24
 7c8:	2c ec       	ldi	r18, 0xCC	; 204
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	30 93 05 01 	sts	0x0105, r19
 7d0:	20 93 04 01 	sts	0x0104, r18
 7d4:	30 93 17 01 	sts	0x0117, r19
 7d8:	20 93 16 01 	sts	0x0116, r18
 7dc:	22 e3       	ldi	r18, 0x32	; 50
 7de:	33 e0       	ldi	r19, 0x03	; 3
 7e0:	30 93 20 01 	sts	0x0120, r19
 7e4:	20 93 1f 01 	sts	0x011F, r18
 7e8:	90 93 1e 01 	sts	0x011E, r25
 7ec:	80 93 1d 01 	sts	0x011D, r24
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <armInit>:
 7f6:	53 9a       	sbi	0x0a, 3	; 10
 7f8:	10 92 c5 00 	sts	0x00C5, r1
 7fc:	10 92 c4 00 	sts	0x00C4, r1
 800:	88 e1       	ldi	r24, 0x18	; 24
 802:	80 93 c1 00 	sts	0x00C1, r24
 806:	86 e0       	ldi	r24, 0x06	; 6
 808:	80 93 c2 00 	sts	0x00C2, r24
 80c:	ab df       	rcall	.-170    	; 0x764 <defaultPosition>
 80e:	28 e0       	ldi	r18, 0x08	; 8
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	60 e5       	ldi	r22, 0x50	; 80
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	16 cf       	rjmp	.-468    	; 0x646 <moveSingleServo>

0000081a <pickupDefaultPosition>:
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	ee e6       	ldi	r30, 0x6E	; 110
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	8d 7f       	andi	r24, 0xFD	; 253
 826:	80 83       	st	Z, r24
 828:	80 91 00 01 	lds	r24, 0x0100
 82c:	81 11       	cpse	r24, r1
 82e:	0d c0       	rjmp	.+26     	; 0x84a <pickupDefaultPosition+0x30>
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	60 e8       	ldi	r22, 0x80	; 128
 836:	82 e3       	ldi	r24, 0x32	; 50
 838:	93 e0       	ldi	r25, 0x03	; 3
 83a:	05 df       	rcall	.-502    	; 0x646 <moveSingleServo>
 83c:	82 e3       	ldi	r24, 0x32	; 50
 83e:	93 e0       	ldi	r25, 0x03	; 3
 840:	90 93 09 01 	sts	0x0109, r25
 844:	80 93 08 01 	sts	0x0108, r24
 848:	0e c0       	rjmp	.+28     	; 0x866 <pickupDefaultPosition+0x4c>
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	61 f4       	brne	.+24     	; 0x866 <pickupDefaultPosition+0x4c>
 84e:	21 e0       	ldi	r18, 0x01	; 1
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	60 e8       	ldi	r22, 0x80	; 128
 854:	8c ec       	ldi	r24, 0xCC	; 204
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	f6 de       	rcall	.-532    	; 0x646 <moveSingleServo>
 85a:	8c ec       	ldi	r24, 0xCC	; 204
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	90 93 09 01 	sts	0x0109, r25
 862:	80 93 08 01 	sts	0x0108, r24
 866:	03 e0       	ldi	r16, 0x03	; 3
 868:	10 e0       	ldi	r17, 0x00	; 0
 86a:	22 e0       	ldi	r18, 0x02	; 2
 86c:	40 e0       	ldi	r20, 0x00	; 0
 86e:	60 ef       	ldi	r22, 0xF0	; 240
 870:	80 e7       	ldi	r24, 0x70	; 112
 872:	92 e0       	ldi	r25, 0x02	; 2
 874:	1b df       	rcall	.-458    	; 0x6ac <moveDoubleServo>
 876:	05 e0       	ldi	r16, 0x05	; 5
 878:	10 e0       	ldi	r17, 0x00	; 0
 87a:	24 e0       	ldi	r18, 0x04	; 4
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	60 ef       	ldi	r22, 0xF0	; 240
 880:	88 e8       	ldi	r24, 0x88	; 136
 882:	92 e0       	ldi	r25, 0x02	; 2
 884:	13 df       	rcall	.-474    	; 0x6ac <moveDoubleServo>
 886:	26 e0       	ldi	r18, 0x06	; 6
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	60 ef       	ldi	r22, 0xF0	; 240
 88c:	84 e4       	ldi	r24, 0x44	; 68
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	da de       	rcall	.-588    	; 0x646 <moveSingleServo>
 892:	27 e0       	ldi	r18, 0x07	; 7
 894:	41 e0       	ldi	r20, 0x01	; 1
 896:	60 e5       	ldi	r22, 0x50	; 80
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	d4 de       	rcall	.-600    	; 0x646 <moveSingleServo>
 89e:	28 e0       	ldi	r18, 0x08	; 8
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	60 e5       	ldi	r22, 0x50	; 80
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	ce de       	rcall	.-612    	; 0x646 <moveSingleServo>
 8aa:	80 e7       	ldi	r24, 0x70	; 112
 8ac:	92 e0       	ldi	r25, 0x02	; 2
 8ae:	90 93 05 01 	sts	0x0105, r25
 8b2:	80 93 04 01 	sts	0x0104, r24
 8b6:	88 e8       	ldi	r24, 0x88	; 136
 8b8:	92 e0       	ldi	r25, 0x02	; 2
 8ba:	90 93 17 01 	sts	0x0117, r25
 8be:	80 93 16 01 	sts	0x0116, r24
 8c2:	84 e4       	ldi	r24, 0x44	; 68
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	90 93 20 01 	sts	0x0120, r25
 8ca:	80 93 1f 01 	sts	0x011F, r24
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	90 93 1e 01 	sts	0x011E, r25
 8d6:	80 93 1d 01 	sts	0x011D, r24
 8da:	90 93 24 01 	sts	0x0124, r25
 8de:	80 93 23 01 	sts	0x0123, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8e2:	2f ef       	ldi	r18, 0xFF	; 255
 8e4:	83 ed       	ldi	r24, 0xD3	; 211
 8e6:	90 e3       	ldi	r25, 0x30	; 48
 8e8:	21 50       	subi	r18, 0x01	; 1
 8ea:	80 40       	sbci	r24, 0x00	; 0
 8ec:	90 40       	sbci	r25, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <pickupDefaultPosition+0xce>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <pickupDefaultPosition+0xd8>
 8f2:	00 00       	nop
 8f4:	ee e6       	ldi	r30, 0x6E	; 110
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	82 60       	ori	r24, 0x02	; 2
 8fc:	80 83       	st	Z, r24
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	08 95       	ret

00000904 <dropItem>:
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	80 91 00 01 	lds	r24, 0x0100
 90c:	81 11       	cpse	r24, r1
 90e:	07 c0       	rjmp	.+14     	; 0x91e <dropItem+0x1a>
 910:	21 e0       	ldi	r18, 0x01	; 1
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	60 e8       	ldi	r22, 0x80	; 128
 916:	82 e3       	ldi	r24, 0x32	; 50
 918:	93 e0       	ldi	r25, 0x03	; 3
 91a:	95 de       	rcall	.-726    	; 0x646 <moveSingleServo>
 91c:	08 c0       	rjmp	.+16     	; 0x92e <dropItem+0x2a>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	31 f4       	brne	.+12     	; 0x92e <dropItem+0x2a>
 922:	21 e0       	ldi	r18, 0x01	; 1
 924:	40 e0       	ldi	r20, 0x00	; 0
 926:	60 e8       	ldi	r22, 0x80	; 128
 928:	8c ec       	ldi	r24, 0xCC	; 204
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	8c de       	rcall	.-744    	; 0x646 <moveSingleServo>
 92e:	2f ef       	ldi	r18, 0xFF	; 255
 930:	87 ea       	ldi	r24, 0xA7	; 167
 932:	91 e6       	ldi	r25, 0x61	; 97
 934:	21 50       	subi	r18, 0x01	; 1
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <dropItem+0x30>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <dropItem+0x3a>
 93e:	00 00       	nop
 940:	03 e0       	ldi	r16, 0x03	; 3
 942:	10 e0       	ldi	r17, 0x00	; 0
 944:	22 e0       	ldi	r18, 0x02	; 2
 946:	40 e0       	ldi	r20, 0x00	; 0
 948:	60 e6       	ldi	r22, 0x60	; 96
 94a:	80 91 01 01 	lds	r24, 0x0101
 94e:	90 91 02 01 	lds	r25, 0x0102
 952:	ac de       	rcall	.-680    	; 0x6ac <moveDoubleServo>
 954:	05 e0       	ldi	r16, 0x05	; 5
 956:	10 e0       	ldi	r17, 0x00	; 0
 958:	24 e0       	ldi	r18, 0x04	; 4
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	60 e6       	ldi	r22, 0x60	; 96
 95e:	80 91 0a 01 	lds	r24, 0x010A
 962:	90 91 0b 01 	lds	r25, 0x010B
 966:	a2 de       	rcall	.-700    	; 0x6ac <moveDoubleServo>
 968:	26 e0       	ldi	r18, 0x06	; 6
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	60 e6       	ldi	r22, 0x60	; 96
 96e:	80 91 0d 01 	lds	r24, 0x010D
 972:	90 91 0e 01 	lds	r25, 0x010E
 976:	67 de       	rcall	.-818    	; 0x646 <moveSingleServo>
 978:	27 e0       	ldi	r18, 0x07	; 7
 97a:	41 e0       	ldi	r20, 0x01	; 1
 97c:	60 e5       	ldi	r22, 0x50	; 80
 97e:	80 91 21 01 	lds	r24, 0x0121
 982:	90 91 22 01 	lds	r25, 0x0122
 986:	5f de       	rcall	.-834    	; 0x646 <moveSingleServo>
 988:	2f ef       	ldi	r18, 0xFF	; 255
 98a:	8b e7       	ldi	r24, 0x7B	; 123
 98c:	92 e9       	ldi	r25, 0x92	; 146
 98e:	21 50       	subi	r18, 0x01	; 1
 990:	80 40       	sbci	r24, 0x00	; 0
 992:	90 40       	sbci	r25, 0x00	; 0
 994:	e1 f7       	brne	.-8      	; 0x98e <dropItem+0x8a>
 996:	00 c0       	rjmp	.+0      	; 0x998 <dropItem+0x94>
 998:	00 00       	nop
 99a:	28 e0       	ldi	r18, 0x08	; 8
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	60 e6       	ldi	r22, 0x60	; 96
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	91 e0       	ldi	r25, 0x01	; 1
 9a4:	50 de       	rcall	.-864    	; 0x646 <moveSingleServo>
 9a6:	2f ef       	ldi	r18, 0xFF	; 255
 9a8:	87 ea       	ldi	r24, 0xA7	; 167
 9aa:	91 e6       	ldi	r25, 0x61	; 97
 9ac:	21 50       	subi	r18, 0x01	; 1
 9ae:	80 40       	sbci	r24, 0x00	; 0
 9b0:	90 40       	sbci	r25, 0x00	; 0
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <dropItem+0xa8>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <dropItem+0xb2>
 9b6:	00 00       	nop
 9b8:	d5 de       	rcall	.-598    	; 0x764 <defaultPosition>
 9ba:	2f ef       	ldi	r18, 0xFF	; 255
 9bc:	83 ed       	ldi	r24, 0xD3	; 211
 9be:	90 e3       	ldi	r25, 0x30	; 48
 9c0:	21 50       	subi	r18, 0x01	; 1
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	90 40       	sbci	r25, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <dropItem+0xbc>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <dropItem+0xc6>
 9ca:	00 00       	nop
 9cc:	bf d1       	rcall	.+894    	; 0xd4c <TXFinishedDrop>
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	08 95       	ret

000009d4 <moveArm>:
 9d4:	0f 93       	push	r16
 9d6:	1f 93       	push	r17
 9d8:	86 fb       	bst	r24, 6
 9da:	99 27       	eor	r25, r25
 9dc:	90 f9       	bld	r25, 0
 9de:	85 ff       	sbrs	r24, 5
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <moveArm+0x12>
 9e2:	1b df       	rcall	.-458    	; 0x81a <pickupDefaultPosition>
 9e4:	7a c1       	rjmp	.+756    	; 0xcda <moveArm+0x306>
 9e6:	99 23       	and	r25, r25
 9e8:	39 f0       	breq	.+14     	; 0x9f8 <moveArm+0x24>
 9ea:	ee e6       	ldi	r30, 0x6E	; 110
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	8d 7f       	andi	r24, 0xFD	; 253
 9f2:	80 83       	st	Z, r24
 9f4:	b7 de       	rcall	.-658    	; 0x764 <defaultPosition>
 9f6:	71 c1       	rjmp	.+738    	; 0xcda <moveArm+0x306>
 9f8:	98 2f       	mov	r25, r24
 9fa:	97 70       	andi	r25, 0x07	; 7
 9fc:	84 fb       	bst	r24, 4
 9fe:	33 27       	eor	r19, r19
 a00:	30 f9       	bld	r19, 0
 a02:	83 fb       	bst	r24, 3
 a04:	22 27       	eor	r18, r18
 a06:	20 f9       	bld	r18, 0
 a08:	91 30       	cpi	r25, 0x01	; 1
 a0a:	91 f5       	brne	.+100    	; 0xa70 <moveArm+0x9c>
 a0c:	31 11       	cpse	r19, r1
 a0e:	18 c0       	rjmp	.+48     	; 0xa40 <moveArm+0x6c>
 a10:	38 ed       	ldi	r19, 0xD8	; 216
 a12:	32 03       	mulsu	r19, r18
 a14:	c0 01       	movw	r24, r0
 a16:	11 24       	eor	r1, r1
 a18:	20 91 08 01 	lds	r18, 0x0108
 a1c:	30 91 09 01 	lds	r19, 0x0109
 a20:	82 0f       	add	r24, r18
 a22:	93 1f       	adc	r25, r19
 a24:	8a 30       	cpi	r24, 0x0A	; 10
 a26:	91 05       	cpc	r25, r1
 a28:	09 f4       	brne	.+2      	; 0xa2c <moveArm+0x58>
 a2a:	57 c1       	rjmp	.+686    	; 0xcda <moveArm+0x306>
 a2c:	0a 97       	sbiw	r24, 0x0a	; 10
 a2e:	90 93 09 01 	sts	0x0109, r25
 a32:	80 93 08 01 	sts	0x0108, r24
 a36:	21 e0       	ldi	r18, 0x01	; 1
 a38:	40 e0       	ldi	r20, 0x00	; 0
 a3a:	60 e5       	ldi	r22, 0x50	; 80
 a3c:	04 de       	rcall	.-1016   	; 0x646 <moveSingleServo>
 a3e:	4d c1       	rjmp	.+666    	; 0xcda <moveArm+0x306>
 a40:	80 91 08 01 	lds	r24, 0x0108
 a44:	90 91 09 01 	lds	r25, 0x0109
 a48:	0a 96       	adiw	r24, 0x0a	; 10
 a4a:	48 e2       	ldi	r20, 0x28	; 40
 a4c:	24 9f       	mul	r18, r20
 a4e:	80 0d       	add	r24, r0
 a50:	91 1d       	adc	r25, r1
 a52:	11 24       	eor	r1, r1
 a54:	8f 3f       	cpi	r24, 0xFF	; 255
 a56:	23 e0       	ldi	r18, 0x03	; 3
 a58:	92 07       	cpc	r25, r18
 a5a:	08 f0       	brcs	.+2      	; 0xa5e <moveArm+0x8a>
 a5c:	3e c1       	rjmp	.+636    	; 0xcda <moveArm+0x306>
 a5e:	90 93 09 01 	sts	0x0109, r25
 a62:	80 93 08 01 	sts	0x0108, r24
 a66:	21 e0       	ldi	r18, 0x01	; 1
 a68:	40 e0       	ldi	r20, 0x00	; 0
 a6a:	60 e5       	ldi	r22, 0x50	; 80
 a6c:	ec dd       	rcall	.-1064   	; 0x646 <moveSingleServo>
 a6e:	35 c1       	rjmp	.+618    	; 0xcda <moveArm+0x306>
 a70:	92 30       	cpi	r25, 0x02	; 2
 a72:	b1 f5       	brne	.+108    	; 0xae0 <moveArm+0x10c>
 a74:	31 11       	cpse	r19, r1
 a76:	1a c0       	rjmp	.+52     	; 0xaac <moveArm+0xd8>
 a78:	80 91 04 01 	lds	r24, 0x0104
 a7c:	90 91 05 01 	lds	r25, 0x0105
 a80:	0a 97       	sbiw	r24, 0x0a	; 10
 a82:	48 ed       	ldi	r20, 0xD8	; 216
 a84:	42 03       	mulsu	r20, r18
 a86:	90 01       	movw	r18, r0
 a88:	11 24       	eor	r1, r1
 a8a:	82 0f       	add	r24, r18
 a8c:	93 1f       	adc	r25, r19
 a8e:	8e 3c       	cpi	r24, 0xCE	; 206
 a90:	91 05       	cpc	r25, r1
 a92:	08 f4       	brcc	.+2      	; 0xa96 <moveArm+0xc2>
 a94:	22 c1       	rjmp	.+580    	; 0xcda <moveArm+0x306>
 a96:	90 93 05 01 	sts	0x0105, r25
 a9a:	80 93 04 01 	sts	0x0104, r24
 a9e:	03 e0       	ldi	r16, 0x03	; 3
 aa0:	10 e0       	ldi	r17, 0x00	; 0
 aa2:	22 e0       	ldi	r18, 0x02	; 2
 aa4:	40 e0       	ldi	r20, 0x00	; 0
 aa6:	60 e5       	ldi	r22, 0x50	; 80
 aa8:	01 de       	rcall	.-1022   	; 0x6ac <moveDoubleServo>
 aaa:	17 c1       	rjmp	.+558    	; 0xcda <moveArm+0x306>
 aac:	80 91 04 01 	lds	r24, 0x0104
 ab0:	90 91 05 01 	lds	r25, 0x0105
 ab4:	0a 96       	adiw	r24, 0x0a	; 10
 ab6:	38 e2       	ldi	r19, 0x28	; 40
 ab8:	23 9f       	mul	r18, r19
 aba:	80 0d       	add	r24, r0
 abc:	91 1d       	adc	r25, r1
 abe:	11 24       	eor	r1, r1
 ac0:	82 32       	cpi	r24, 0x22	; 34
 ac2:	43 e0       	ldi	r20, 0x03	; 3
 ac4:	94 07       	cpc	r25, r20
 ac6:	08 f0       	brcs	.+2      	; 0xaca <moveArm+0xf6>
 ac8:	08 c1       	rjmp	.+528    	; 0xcda <moveArm+0x306>
 aca:	90 93 05 01 	sts	0x0105, r25
 ace:	80 93 04 01 	sts	0x0104, r24
 ad2:	03 e0       	ldi	r16, 0x03	; 3
 ad4:	10 e0       	ldi	r17, 0x00	; 0
 ad6:	22 e0       	ldi	r18, 0x02	; 2
 ad8:	40 e0       	ldi	r20, 0x00	; 0
 ada:	60 e5       	ldi	r22, 0x50	; 80
 adc:	e7 dd       	rcall	.-1074   	; 0x6ac <moveDoubleServo>
 ade:	fd c0       	rjmp	.+506    	; 0xcda <moveArm+0x306>
 ae0:	93 30       	cpi	r25, 0x03	; 3
 ae2:	b1 f5       	brne	.+108    	; 0xb50 <moveArm+0x17c>
 ae4:	31 11       	cpse	r19, r1
 ae6:	1a c0       	rjmp	.+52     	; 0xb1c <moveArm+0x148>
 ae8:	80 91 16 01 	lds	r24, 0x0116
 aec:	90 91 17 01 	lds	r25, 0x0117
 af0:	0a 97       	sbiw	r24, 0x0a	; 10
 af2:	48 ed       	ldi	r20, 0xD8	; 216
 af4:	42 03       	mulsu	r20, r18
 af6:	90 01       	movw	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	82 0f       	add	r24, r18
 afc:	93 1f       	adc	r25, r19
 afe:	8e 3c       	cpi	r24, 0xCE	; 206
 b00:	91 05       	cpc	r25, r1
 b02:	08 f4       	brcc	.+2      	; 0xb06 <moveArm+0x132>
 b04:	ea c0       	rjmp	.+468    	; 0xcda <moveArm+0x306>
 b06:	90 93 17 01 	sts	0x0117, r25
 b0a:	80 93 16 01 	sts	0x0116, r24
 b0e:	05 e0       	ldi	r16, 0x05	; 5
 b10:	10 e0       	ldi	r17, 0x00	; 0
 b12:	24 e0       	ldi	r18, 0x04	; 4
 b14:	40 e0       	ldi	r20, 0x00	; 0
 b16:	60 e5       	ldi	r22, 0x50	; 80
 b18:	c9 dd       	rcall	.-1134   	; 0x6ac <moveDoubleServo>
 b1a:	df c0       	rjmp	.+446    	; 0xcda <moveArm+0x306>
 b1c:	80 91 16 01 	lds	r24, 0x0116
 b20:	90 91 17 01 	lds	r25, 0x0117
 b24:	0a 96       	adiw	r24, 0x0a	; 10
 b26:	38 e2       	ldi	r19, 0x28	; 40
 b28:	23 9f       	mul	r18, r19
 b2a:	80 0d       	add	r24, r0
 b2c:	91 1d       	adc	r25, r1
 b2e:	11 24       	eor	r1, r1
 b30:	82 32       	cpi	r24, 0x22	; 34
 b32:	43 e0       	ldi	r20, 0x03	; 3
 b34:	94 07       	cpc	r25, r20
 b36:	08 f0       	brcs	.+2      	; 0xb3a <moveArm+0x166>
 b38:	d0 c0       	rjmp	.+416    	; 0xcda <moveArm+0x306>
 b3a:	90 93 17 01 	sts	0x0117, r25
 b3e:	80 93 16 01 	sts	0x0116, r24
 b42:	05 e0       	ldi	r16, 0x05	; 5
 b44:	10 e0       	ldi	r17, 0x00	; 0
 b46:	24 e0       	ldi	r18, 0x04	; 4
 b48:	40 e0       	ldi	r20, 0x00	; 0
 b4a:	60 e5       	ldi	r22, 0x50	; 80
 b4c:	af dd       	rcall	.-1186   	; 0x6ac <moveDoubleServo>
 b4e:	c5 c0       	rjmp	.+394    	; 0xcda <moveArm+0x306>
 b50:	94 30       	cpi	r25, 0x04	; 4
 b52:	91 f5       	brne	.+100    	; 0xbb8 <moveArm+0x1e4>
 b54:	31 11       	cpse	r19, r1
 b56:	18 c0       	rjmp	.+48     	; 0xb88 <moveArm+0x1b4>
 b58:	38 ed       	ldi	r19, 0xD8	; 216
 b5a:	32 03       	mulsu	r19, r18
 b5c:	c0 01       	movw	r24, r0
 b5e:	11 24       	eor	r1, r1
 b60:	40 91 1f 01 	lds	r20, 0x011F
 b64:	50 91 20 01 	lds	r21, 0x0120
 b68:	84 0f       	add	r24, r20
 b6a:	95 1f       	adc	r25, r21
 b6c:	8a 30       	cpi	r24, 0x0A	; 10
 b6e:	91 05       	cpc	r25, r1
 b70:	09 f4       	brne	.+2      	; 0xb74 <moveArm+0x1a0>
 b72:	b3 c0       	rjmp	.+358    	; 0xcda <moveArm+0x306>
 b74:	0a 97       	sbiw	r24, 0x0a	; 10
 b76:	90 93 20 01 	sts	0x0120, r25
 b7a:	80 93 1f 01 	sts	0x011F, r24
 b7e:	26 e0       	ldi	r18, 0x06	; 6
 b80:	40 e0       	ldi	r20, 0x00	; 0
 b82:	60 e5       	ldi	r22, 0x50	; 80
 b84:	60 dd       	rcall	.-1344   	; 0x646 <moveSingleServo>
 b86:	a9 c0       	rjmp	.+338    	; 0xcda <moveArm+0x306>
 b88:	80 91 1f 01 	lds	r24, 0x011F
 b8c:	90 91 20 01 	lds	r25, 0x0120
 b90:	0a 96       	adiw	r24, 0x0a	; 10
 b92:	48 e2       	ldi	r20, 0x28	; 40
 b94:	24 9f       	mul	r18, r20
 b96:	80 0d       	add	r24, r0
 b98:	91 1d       	adc	r25, r1
 b9a:	11 24       	eor	r1, r1
 b9c:	82 33       	cpi	r24, 0x32	; 50
 b9e:	23 e0       	ldi	r18, 0x03	; 3
 ba0:	92 07       	cpc	r25, r18
 ba2:	08 f0       	brcs	.+2      	; 0xba6 <moveArm+0x1d2>
 ba4:	9a c0       	rjmp	.+308    	; 0xcda <moveArm+0x306>
 ba6:	90 93 20 01 	sts	0x0120, r25
 baa:	80 93 1f 01 	sts	0x011F, r24
 bae:	26 e0       	ldi	r18, 0x06	; 6
 bb0:	40 e0       	ldi	r20, 0x00	; 0
 bb2:	60 e5       	ldi	r22, 0x50	; 80
 bb4:	48 dd       	rcall	.-1392   	; 0x646 <moveSingleServo>
 bb6:	91 c0       	rjmp	.+290    	; 0xcda <moveArm+0x306>
 bb8:	95 30       	cpi	r25, 0x05	; 5
 bba:	a1 f5       	brne	.+104    	; 0xc24 <moveArm+0x250>
 bbc:	31 11       	cpse	r19, r1
 bbe:	18 c0       	rjmp	.+48     	; 0xbf0 <moveArm+0x21c>
 bc0:	38 ed       	ldi	r19, 0xD8	; 216
 bc2:	32 03       	mulsu	r19, r18
 bc4:	c0 01       	movw	r24, r0
 bc6:	11 24       	eor	r1, r1
 bc8:	40 91 1d 01 	lds	r20, 0x011D
 bcc:	50 91 1e 01 	lds	r21, 0x011E
 bd0:	84 0f       	add	r24, r20
 bd2:	95 1f       	adc	r25, r21
 bd4:	8a 30       	cpi	r24, 0x0A	; 10
 bd6:	91 05       	cpc	r25, r1
 bd8:	09 f4       	brne	.+2      	; 0xbdc <moveArm+0x208>
 bda:	7f c0       	rjmp	.+254    	; 0xcda <moveArm+0x306>
 bdc:	0a 97       	sbiw	r24, 0x0a	; 10
 bde:	90 93 1e 01 	sts	0x011E, r25
 be2:	80 93 1d 01 	sts	0x011D, r24
 be6:	27 e0       	ldi	r18, 0x07	; 7
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	60 e5       	ldi	r22, 0x50	; 80
 bec:	2c dd       	rcall	.-1448   	; 0x646 <moveSingleServo>
 bee:	75 c0       	rjmp	.+234    	; 0xcda <moveArm+0x306>
 bf0:	40 91 1d 01 	lds	r20, 0x011D
 bf4:	50 91 1e 01 	lds	r21, 0x011E
 bf8:	46 5f       	subi	r20, 0xF6	; 246
 bfa:	5f 4f       	sbci	r21, 0xFF	; 255
 bfc:	ca 01       	movw	r24, r20
 bfe:	38 e2       	ldi	r19, 0x28	; 40
 c00:	23 9f       	mul	r18, r19
 c02:	80 0d       	add	r24, r0
 c04:	91 1d       	adc	r25, r1
 c06:	11 24       	eor	r1, r1
 c08:	8f 3f       	cpi	r24, 0xFF	; 255
 c0a:	43 e0       	ldi	r20, 0x03	; 3
 c0c:	94 07       	cpc	r25, r20
 c0e:	08 f0       	brcs	.+2      	; 0xc12 <moveArm+0x23e>
 c10:	64 c0       	rjmp	.+200    	; 0xcda <moveArm+0x306>
 c12:	90 93 1e 01 	sts	0x011E, r25
 c16:	80 93 1d 01 	sts	0x011D, r24
 c1a:	27 e0       	ldi	r18, 0x07	; 7
 c1c:	40 e0       	ldi	r20, 0x00	; 0
 c1e:	60 e5       	ldi	r22, 0x50	; 80
 c20:	12 dd       	rcall	.-1500   	; 0x646 <moveSingleServo>
 c22:	5b c0       	rjmp	.+182    	; 0xcda <moveArm+0x306>
 c24:	96 30       	cpi	r25, 0x06	; 6
 c26:	09 f0       	breq	.+2      	; 0xc2a <moveArm+0x256>
 c28:	58 c0       	rjmp	.+176    	; 0xcda <moveArm+0x306>
 c2a:	31 11       	cpse	r19, r1
 c2c:	50 c0       	rjmp	.+160    	; 0xcce <moveArm+0x2fa>
 c2e:	21 11       	cpse	r18, r1
 c30:	27 c0       	rjmp	.+78     	; 0xc80 <moveArm+0x2ac>
 c32:	28 e0       	ldi	r18, 0x08	; 8
 c34:	40 e0       	ldi	r20, 0x00	; 0
 c36:	60 e5       	ldi	r22, 0x50	; 80
 c38:	8b eb       	ldi	r24, 0xBB	; 187
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	04 dd       	rcall	.-1528   	; 0x646 <moveSingleServo>
 c3e:	80 91 04 01 	lds	r24, 0x0104
 c42:	90 91 05 01 	lds	r25, 0x0105
 c46:	90 93 02 01 	sts	0x0102, r25
 c4a:	80 93 01 01 	sts	0x0101, r24
 c4e:	80 91 16 01 	lds	r24, 0x0116
 c52:	90 91 17 01 	lds	r25, 0x0117
 c56:	90 93 0b 01 	sts	0x010B, r25
 c5a:	80 93 0a 01 	sts	0x010A, r24
 c5e:	80 91 1f 01 	lds	r24, 0x011F
 c62:	90 91 20 01 	lds	r25, 0x0120
 c66:	90 93 0e 01 	sts	0x010E, r25
 c6a:	80 93 0d 01 	sts	0x010D, r24
 c6e:	80 91 1d 01 	lds	r24, 0x011D
 c72:	90 91 1e 01 	lds	r25, 0x011E
 c76:	90 93 22 01 	sts	0x0122, r25
 c7a:	80 93 21 01 	sts	0x0121, r24
 c7e:	2d c0       	rjmp	.+90     	; 0xcda <moveArm+0x306>
 c80:	28 e0       	ldi	r18, 0x08	; 8
 c82:	40 e0       	ldi	r20, 0x00	; 0
 c84:	60 e5       	ldi	r22, 0x50	; 80
 c86:	8c e2       	ldi	r24, 0x2C	; 44
 c88:	91 e0       	ldi	r25, 0x01	; 1
 c8a:	dd dc       	rcall	.-1606   	; 0x646 <moveSingleServo>
 c8c:	80 91 04 01 	lds	r24, 0x0104
 c90:	90 91 05 01 	lds	r25, 0x0105
 c94:	90 93 02 01 	sts	0x0102, r25
 c98:	80 93 01 01 	sts	0x0101, r24
 c9c:	80 91 16 01 	lds	r24, 0x0116
 ca0:	90 91 17 01 	lds	r25, 0x0117
 ca4:	90 93 0b 01 	sts	0x010B, r25
 ca8:	80 93 0a 01 	sts	0x010A, r24
 cac:	80 91 1f 01 	lds	r24, 0x011F
 cb0:	90 91 20 01 	lds	r25, 0x0120
 cb4:	90 93 0e 01 	sts	0x010E, r25
 cb8:	80 93 0d 01 	sts	0x010D, r24
 cbc:	80 91 1d 01 	lds	r24, 0x011D
 cc0:	90 91 1e 01 	lds	r25, 0x011E
 cc4:	90 93 22 01 	sts	0x0122, r25
 cc8:	80 93 21 01 	sts	0x0121, r24
 ccc:	06 c0       	rjmp	.+12     	; 0xcda <moveArm+0x306>
 cce:	28 e0       	ldi	r18, 0x08	; 8
 cd0:	40 e0       	ldi	r20, 0x00	; 0
 cd2:	60 e5       	ldi	r22, 0x50	; 80
 cd4:	8f ef       	ldi	r24, 0xFF	; 255
 cd6:	91 e0       	ldi	r25, 0x01	; 1
 cd8:	b6 dc       	rcall	.-1684   	; 0x646 <moveSingleServo>
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	08 95       	ret

00000ce0 <updateServos>:
 ce0:	0f 93       	push	r16
 ce2:	1f 93       	push	r17
 ce4:	21 e0       	ldi	r18, 0x01	; 1
 ce6:	40 e0       	ldi	r20, 0x00	; 0
 ce8:	60 e3       	ldi	r22, 0x30	; 48
 cea:	80 91 08 01 	lds	r24, 0x0108
 cee:	90 91 09 01 	lds	r25, 0x0109
 cf2:	a9 dc       	rcall	.-1710   	; 0x646 <moveSingleServo>
 cf4:	03 e0       	ldi	r16, 0x03	; 3
 cf6:	10 e0       	ldi	r17, 0x00	; 0
 cf8:	22 e0       	ldi	r18, 0x02	; 2
 cfa:	40 e0       	ldi	r20, 0x00	; 0
 cfc:	60 e3       	ldi	r22, 0x30	; 48
 cfe:	80 91 04 01 	lds	r24, 0x0104
 d02:	90 91 05 01 	lds	r25, 0x0105
 d06:	d2 dc       	rcall	.-1628   	; 0x6ac <moveDoubleServo>
 d08:	05 e0       	ldi	r16, 0x05	; 5
 d0a:	10 e0       	ldi	r17, 0x00	; 0
 d0c:	24 e0       	ldi	r18, 0x04	; 4
 d0e:	40 e0       	ldi	r20, 0x00	; 0
 d10:	60 e3       	ldi	r22, 0x30	; 48
 d12:	80 91 16 01 	lds	r24, 0x0116
 d16:	90 91 17 01 	lds	r25, 0x0117
 d1a:	c8 dc       	rcall	.-1648   	; 0x6ac <moveDoubleServo>
 d1c:	26 e0       	ldi	r18, 0x06	; 6
 d1e:	40 e0       	ldi	r20, 0x00	; 0
 d20:	60 e3       	ldi	r22, 0x30	; 48
 d22:	80 91 1f 01 	lds	r24, 0x011F
 d26:	90 91 20 01 	lds	r25, 0x0120
 d2a:	8d dc       	rcall	.-1766   	; 0x646 <moveSingleServo>
 d2c:	1f 91       	pop	r17
 d2e:	0f 91       	pop	r16
 d30:	08 95       	ret

00000d32 <SPIInitSlave>:
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	80 93 1c 01 	sts	0x011C, r24
 d38:	88 e4       	ldi	r24, 0x48	; 72
 d3a:	84 b9       	out	0x04, r24	; 4
 d3c:	83 ec       	ldi	r24, 0xC3	; 195
 d3e:	8c bd       	out	0x2c, r24	; 44
 d40:	78 94       	sei
 d42:	08 95       	ret

00000d44 <slaveTX>:
 d44:	8e bd       	out	0x2e, r24	; 46
 d46:	2b 9a       	sbi	0x05, 3	; 5
 d48:	2b 98       	cbi	0x05, 3	; 5
 d4a:	08 95       	ret

00000d4c <TXFinishedDrop>:
 d4c:	81 e0       	ldi	r24, 0x01	; 1
 d4e:	fa cf       	rjmp	.-12     	; 0xd44 <slaveTX>

00000d50 <_exit>:
 d50:	f8 94       	cli

00000d52 <__stop_program>:
 d52:	ff cf       	rjmp	.-2      	; 0xd52 <__stop_program>
