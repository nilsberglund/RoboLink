
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000338  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  000003cc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000090a  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000032e  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000595  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000184  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000319  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  0000258f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	30 c0       	rjmp	.+96     	; 0xae <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 31       	cpi	r26, 0x19	; 25
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	38 d0       	rcall	.+112    	; 0x11a <main>
  aa:	44 c1       	rjmp	.+648    	; 0x334 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_19>:
#include "Control_wheel_steering.h"
#include <avr/interrupt.h>


ISR(SPI_STC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	data = SPDR;
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	80 93 15 01 	sts	0x0115, r24
	
	if(data == 0x84)
  da:	80 91 15 01 	lds	r24, 0x0115
  de:	84 38       	cpi	r24, 0x84	; 132
  e0:	41 f0       	breq	.+16     	; 0xf2 <__vector_19+0x44>
	{
		
	} else if(data != 0x84)
  e2:	80 91 15 01 	lds	r24, 0x0115
  e6:	84 38       	cpi	r24, 0x84	; 132
  e8:	21 f0       	breq	.+8      	; 0xf2 <__vector_19+0x44>
	{
		sensor_data = data;
  ea:	80 91 15 01 	lds	r24, 0x0115
  ee:	80 93 01 01 	sts	0x0101, r24
	}
	
	 controlAlgorithm(); 
  f2:	cc d0       	rcall	.+408    	; 0x28c <controlAlgorithm>
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0b be       	out	0x3b, r0	; 59
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
{
	uint8_t done;
	done = 0;
	if(done == 0)
	{
		SPI_Init_Slave();
 11a:	06 d1       	rcall	.+524    	; 0x328 <SPI_Init_Slave>
		driving_setup();	
 11c:	89 d0       	rcall	.+274    	; 0x230 <driving_setup>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x4>

00000120 <getError>:
#include <math.h>
#include "Control_wheel_steering.h"
#include "Slave_control.h"

int8_t getError()
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <getError+0x6>
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	
	volatile int8_t res = 0;
 12c:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t marker = 0;
 12e:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0;
 130:	1b 82       	std	Y+3, r1	; 0x03
	error = 0;
 132:	10 92 17 01 	sts	0x0117, r1
	uint8_t line_data;
	line_data = sensor_data;	
 136:	40 91 01 01 	lds	r20, 0x0101
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((line_data >> noShift) & 0x01);
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	9a 01       	movw	r18, r20
 142:	08 2e       	mov	r0, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <getError+0x2a>
 146:	35 95       	asr	r19
 148:	27 95       	ror	r18
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <getError+0x26>
 14e:	21 70       	andi	r18, 0x01	; 1
 150:	33 27       	eor	r19, r19
 152:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 154:	29 81       	ldd	r18, Y+1	; 0x01
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	39 f4       	brne	.+14     	; 0x168 <getError+0x48>
		{
			marker = marker + (7 - noShift);
 15a:	2a 81       	ldd	r18, Y+2	; 0x02
 15c:	29 5f       	subi	r18, 0xF9	; 249
 15e:	28 1b       	sub	r18, r24
 160:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 162:	2b 81       	ldd	r18, Y+3	; 0x03
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	2b 83       	std	Y+3, r18	; 0x03
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	50 f7       	brcc	.-44     	; 0x140 <getError+0x20>
		}
	}
	if(counter1 == 1)
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	39 f4       	brne	.+14     	; 0x180 <getError+0x60>
	{
		error = marker + (marker-1);
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	89 0f       	add	r24, r25
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	80 93 17 01 	sts	0x0117, r24
 17e:	22 c0       	rjmp	.+68     	; 0x1c4 <getError+0xa4>
	} else if(counter1 == 2)
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	29 f4       	brne	.+10     	; 0x190 <getError+0x70>

	{
		error = marker-1;
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	80 93 17 01 	sts	0x0117, r24
 18e:	1a c0       	rjmp	.+52     	; 0x1c4 <getError+0xa4>
	} else if(counter1 == 3)
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	a1 f4       	brne	.+40     	; 0x1be <getError+0x9e>

	{
		error = marker*2;
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	88 0f       	add	r24, r24
 19a:	80 93 17 01 	sts	0x0117, r24
		error = error/(0b00000011);
 19e:	80 91 17 01 	lds	r24, 0x0117
 1a2:	96 e5       	ldi	r25, 0x56	; 86
 1a4:	89 02       	muls	r24, r25
 1a6:	91 2d       	mov	r25, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	87 fd       	sbrc	r24, 7
 1ac:	93 95       	inc	r25
 1ae:	90 93 17 01 	sts	0x0117, r25
		error = error - 1;
 1b2:	80 91 17 01 	lds	r24, 0x0117
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 17 01 	sts	0x0117, r24
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <getError+0xa4>

	} else
	{
		error = 7;
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	80 93 17 01 	sts	0x0117, r24
	}
	error = 7 - error;
 1c4:	90 91 17 01 	lds	r25, 0x0117
 1c8:	87 e0       	ldi	r24, 0x07	; 7
 1ca:	89 1b       	sub	r24, r25
 1cc:	80 93 17 01 	sts	0x0117, r24
	return error;
 1d0:	80 91 17 01 	lds	r24, 0x0117
}
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <calculateSpeed>:
	
	
}

int8_t calculateSpeed(int8_t error)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <calculateSpeed+0x6>
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 1ea:	1a 82       	std	Y+2, r1	; 0x02
 1ec:	19 82       	std	Y+1, r1	; 0x01
	int8_t Kp = 20;
	int8_t Kd = 5;
	
	speed = Kp * error + Kd * (error - prevError);
 1ee:	28 2f       	mov	r18, r24
 1f0:	33 27       	eor	r19, r19
 1f2:	27 fd       	sbrc	r18, 7
 1f4:	30 95       	com	r19
 1f6:	90 91 13 01 	lds	r25, 0x0113
 1fa:	29 1b       	sub	r18, r25
 1fc:	31 09       	sbc	r19, r1
 1fe:	97 fd       	sbrc	r25, 7
 200:	33 95       	inc	r19
 202:	a9 01       	movw	r20, r18
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	24 0f       	add	r18, r20
 20e:	35 1f       	adc	r19, r21
 210:	94 e1       	ldi	r25, 0x14	; 20
 212:	89 02       	muls	r24, r25
 214:	20 0d       	add	r18, r0
 216:	31 1d       	adc	r19, r1
 218:	11 24       	eor	r1, r1
 21a:	3a 83       	std	Y+2, r19	; 0x02
 21c:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 21e:	80 93 13 01 	sts	0x0113, r24
	return speed;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <driving_setup>:

void driving_setup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 230:	81 ef       	ldi	r24, 0xF1	; 241
 232:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 8
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;
 23c:	10 92 85 00 	sts	0x0085, r1
 240:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 248;
 244:	88 ef       	ldi	r24, 0xF8	; 248
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 89 00 	sts	0x0089, r25
 24c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 248;
 250:	90 93 8b 00 	sts	0x008B, r25
 254:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 6f       	ori	r24, 0xF0	; 240
 25c:	8a b9       	out	0x0a, r24	; 10
 25e:	08 95       	ret

00000260 <drive>:
	
}

void drive(int right_dir, int left_dir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(right_dir == 1)
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	19 f4       	brne	.+6      	; 0x26a <drive+0xa>
	{
	PORTD |= (0 << PORTD7);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8b b9       	out	0x0b, r24	; 11
 268:	01 c0       	rjmp	.+2      	; 0x26c <drive+0xc>
	}
	else
	{
	PORTD |= (1 << PORTD7);
 26a:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(left_dir == 1)
 26c:	61 30       	cpi	r22, 0x01	; 1
 26e:	71 05       	cpc	r23, r1
 270:	11 f4       	brne	.+4      	; 0x276 <drive+0x16>
	{
		PORTD |= (1 << PORTD6);
 272:	5e 9a       	sbi	0x0b, 6	; 11
 274:	02 c0       	rjmp	.+4      	; 0x27a <drive+0x1a>
	}
	else
	{
		PORTD |= (0 << PORTD6);
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	8b b9       	out	0x0b, r24	; 11
	}
	OCR1A = rightSpeed;
 27a:	30 93 89 00 	sts	0x0089, r19
 27e:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 282:	50 93 8b 00 	sts	0x008B, r21
 286:	40 93 8a 00 	sts	0x008A, r20
 28a:	08 95       	ret

0000028c <controlAlgorithm>:
}

void controlAlgorithm()
{	
	
	error = getError();
 28c:	49 df       	rcall	.-366    	; 0x120 <getError>
 28e:	80 93 17 01 	sts	0x0117, r24
	int16_t speed = calculateSpeed(error);
 292:	80 91 17 01 	lds	r24, 0x0117
 296:	a4 df       	rcall	.-184    	; 0x1e0 <calculateSpeed>
 298:	28 2f       	mov	r18, r24
 29a:	33 27       	eor	r19, r19
 29c:	27 fd       	sbrc	r18, 7
 29e:	30 95       	com	r19
	if ((200-speed) < 10)
 2a0:	48 ec       	ldi	r20, 0xC8	; 200
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	42 1b       	sub	r20, r18
 2a6:	53 0b       	sbc	r21, r19
 2a8:	4a 30       	cpi	r20, 0x0A	; 10
 2aa:	51 05       	cpc	r21, r1
 2ac:	3c f4       	brge	.+14     	; 0x2bc <controlAlgorithm+0x30>
	{
		rightWheelSpeed = 30;
 2ae:	9e e1       	ldi	r25, 0x1E	; 30
 2b0:	90 93 11 01 	sts	0x0111, r25
		rightWheelDirection = 1;
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	90 93 18 01 	sts	0x0118, r25
 2ba:	10 c0       	rjmp	.+32     	; 0x2dc <controlAlgorithm+0x50>
	} 
	else if ((200-speed) > 235)
 2bc:	4c 3e       	cpi	r20, 0xEC	; 236
 2be:	51 05       	cpc	r21, r1
 2c0:	34 f0       	brlt	.+12     	; 0x2ce <controlAlgorithm+0x42>
	{
		rightWheelSpeed = 235;
 2c2:	9b ee       	ldi	r25, 0xEB	; 235
 2c4:	90 93 11 01 	sts	0x0111, r25
		rightWheelDirection = 0;
 2c8:	10 92 18 01 	sts	0x0118, r1
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <controlAlgorithm+0x50>
	}
	else
	{
		rightWheelSpeed = 200 - speed;
 2ce:	98 ec       	ldi	r25, 0xC8	; 200
 2d0:	98 1b       	sub	r25, r24
 2d2:	90 93 11 01 	sts	0x0111, r25
		rightWheelDirection = 1;
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	90 93 18 01 	sts	0x0118, r25
	}
	
	if ((200+speed) < 10)
 2dc:	28 53       	subi	r18, 0x38	; 56
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	2a 30       	cpi	r18, 0x0A	; 10
 2e2:	31 05       	cpc	r19, r1
 2e4:	3c f4       	brge	.+14     	; 0x2f4 <controlAlgorithm+0x68>
	{
		leftWheelSpeed = 30;
 2e6:	8e e1       	ldi	r24, 0x1E	; 30
 2e8:	80 93 10 01 	sts	0x0110, r24
		leftWheelDirection = 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 14 01 	sts	0x0114, r24
 2f2:	0f c0       	rjmp	.+30     	; 0x312 <controlAlgorithm+0x86>
	}
	else if ((200+speed) > 235)
 2f4:	2c 3e       	cpi	r18, 0xEC	; 236
 2f6:	31 05       	cpc	r19, r1
 2f8:	34 f0       	brlt	.+12     	; 0x306 <controlAlgorithm+0x7a>
	{
		leftWheelSpeed = 235;
 2fa:	8b ee       	ldi	r24, 0xEB	; 235
 2fc:	80 93 10 01 	sts	0x0110, r24
		leftWheelDirection = 0;
 300:	10 92 14 01 	sts	0x0114, r1
 304:	06 c0       	rjmp	.+12     	; 0x312 <controlAlgorithm+0x86>
	}
	else
	{
		leftWheelSpeed = 200 + speed;
 306:	88 53       	subi	r24, 0x38	; 56
 308:	80 93 10 01 	sts	0x0110, r24
		leftWheelDirection = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 14 01 	sts	0x0114, r24
	}
	
	
	drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 312:	20 91 11 01 	lds	r18, 0x0111
 316:	40 91 10 01 	lds	r20, 0x0110
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9c cf       	rjmp	.-200    	; 0x260 <drive>

00000328 <SPI_Init_Slave>:
 328:	88 e4       	ldi	r24, 0x48	; 72
 32a:	84 b9       	out	0x04, r24	; 4
 32c:	83 ec       	ldi	r24, 0xC3	; 195
 32e:	8c bd       	out	0x2c, r24	; 44
 330:	78 94       	sei
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
