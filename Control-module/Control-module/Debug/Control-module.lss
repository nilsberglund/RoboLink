
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d64  00000df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  00000df8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a91  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000054e  00000000  00000000  0000317b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eda  00000000  00000000  000036c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000388  00000000  00000000  000045a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000050e  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001395  00000000  00000000  00004e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  000061cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6c c0       	rjmp	.+216    	; 0x126 <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 32       	cpi	r26, 0x25	; 37
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	36 d0       	rcall	.+108    	; 0x116 <main>
  aa:	5a c6       	rjmp	.+3252   	; 0xd60 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
		}
	}
}
/*Interrupt that runs when timer matches compare register. Updates servo position*/
ISR(TIMER0_COMPA_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	if(stationMode == 1)
  d4:	80 91 14 01 	lds	r24, 0x0114
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	09 f4       	brne	.+2      	; 0xde <__vector_16+0x30>
	{
		updateServos();	
  dc:	09 d6       	rcall	.+3090   	; 0xcf0 <updateServos>
	}
	
}
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0b be       	out	0x3b, r0	; 59
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <initTimer>:
}

/*Initializes the timer*/
void initTimer()
{
	TCCR0A = 0;
 104:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 10a:	16 bc       	out	0x26, r1	; 38
	OCR0A = 150;
 10c:	86 e9       	ldi	r24, 0x96	; 150
 10e:	87 bd       	out	0x27, r24	; 39
	
	stationMode = 0;
 110:	10 92 14 01 	sts	0x0114, r1
 114:	08 95       	ret

00000116 <main>:
	
}

int main(void)
{
	SPIInitSlave();
 116:	15 d6       	rcall	.+3114   	; 0xd42 <SPIInitSlave>
	drivingSetup();
 118:	46 d1       	rcall	.+652    	; 0x3a6 <drivingSetup>
	armInit();
 11a:	75 d3       	rcall	.+1770   	; 0x806 <armInit>
	initTimer();
 11c:	f3 df       	rcall	.-26     	; 0x104 <initTimer>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x8>

00000120 <startTransportMode>:
}

/*Starts transport mode*/
void startTransportMode()
{
	stationMode = 0;
 120:	10 92 14 01 	sts	0x0114, r1
 124:	08 95       	ret

00000126 <__vector_19>:
#include "Servo.h"
#include "controlModule.h"

/*Interrupt that runs when new SPI data is received*/
ISR(SPI_STC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	0b b6       	in	r0, 0x3b	; 59
 132:	0f 92       	push	r0
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	data = SPDR;
 14c:	8e b5       	in	r24, 0x2e	; 46
 14e:	80 93 13 01 	sts	0x0113, r24
	
	if(waitingForInstruction == 1)
 152:	80 91 1c 01 	lds	r24, 0x011C
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_19+0x36>
 15a:	4b c0       	rjmp	.+150    	; 0x1f2 <__vector_19+0xcc>
	{
		if(data == 0b10000100)
 15c:	80 91 13 01 	lds	r24, 0x0113
 160:	84 38       	cpi	r24, 0x84	; 132
 162:	59 f4       	brne	.+22     	; 0x17a <__vector_19+0x54>
		{
			component = SENSOR;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 16a:	10 92 1c 01 	sts	0x011C, r1
			
			TIMSK0 &= ~(1<<OCIE0A);
 16e:	ee e6       	ldi	r30, 0x6E	; 110
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	80 83       	st	Z, r24
 178:	74 c0       	rjmp	.+232    	; 0x262 <__vector_19+0x13c>
			
			
		} else if (data == 0b10000101)
 17a:	80 91 13 01 	lds	r24, 0x0113
 17e:	85 38       	cpi	r24, 0x85	; 133
 180:	31 f4       	brne	.+12     	; 0x18e <__vector_19+0x68>
		{
			component = WHEEL;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 188:	10 92 1c 01 	sts	0x011C, r1
 18c:	6a c0       	rjmp	.+212    	; 0x262 <__vector_19+0x13c>
		} else if(data == 0b10000110)
 18e:	80 91 13 01 	lds	r24, 0x0113
 192:	86 38       	cpi	r24, 0x86	; 134
 194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_19+0x7c>
		{
			waitingForInstruction = 0;
 196:	10 92 1c 01 	sts	0x011C, r1
			component = ARM;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 07 01 	sts	0x0107, r24
 1a0:	60 c0       	rjmp	.+192    	; 0x262 <__vector_19+0x13c>
		} else if(data == 0b10000111)
 1a2:	80 91 13 01 	lds	r24, 0x0113
 1a6:	87 38       	cpi	r24, 0x87	; 135
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_19+0x90>
		{
			component = KPROPORTIONAL;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1b0:	10 92 1c 01 	sts	0x011C, r1
 1b4:	56 c0       	rjmp	.+172    	; 0x262 <__vector_19+0x13c>
		} else if(data == 0b10001011)
 1b6:	80 91 13 01 	lds	r24, 0x0113
 1ba:	8b 38       	cpi	r24, 0x8B	; 139
 1bc:	31 f4       	brne	.+12     	; 0x1ca <__vector_19+0xa4>
		{
			component = KDERIVATIVE;
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1c4:	10 92 1c 01 	sts	0x011C, r1
 1c8:	4c c0       	rjmp	.+152    	; 0x262 <__vector_19+0x13c>
		} else if(data == 0b10001111)
 1ca:	80 91 13 01 	lds	r24, 0x0113
 1ce:	8f 38       	cpi	r24, 0x8F	; 143
 1d0:	31 f4       	brne	.+12     	; 0x1de <__vector_19+0xb8>
		{
			component = DROPITEM;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1d8:	10 92 1c 01 	sts	0x011C, r1
 1dc:	42 c0       	rjmp	.+132    	; 0x262 <__vector_19+0x13c>
		} else if(data == 0b10010000)
 1de:	80 91 13 01 	lds	r24, 0x0113
 1e2:	80 39       	cpi	r24, 0x90	; 144
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_19+0xc2>
 1e6:	3d c0       	rjmp	.+122    	; 0x262 <__vector_19+0x13c>
		{
			waitingForInstruction = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 1c 01 	sts	0x011C, r24
			startTransportMode();
 1ee:	98 df       	rcall	.-208    	; 0x120 <startTransportMode>
 1f0:	38 c0       	rjmp	.+112    	; 0x262 <__vector_19+0x13c>
		}
	}
	else
	{
		waitingForInstruction = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 1c 01 	sts	0x011C, r24
		if(component == SENSOR)
 1f8:	80 91 07 01 	lds	r24, 0x0107
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	31 f4       	brne	.+12     	; 0x20c <__vector_19+0xe6>
		{
			sensorData = data;
 200:	80 91 13 01 	lds	r24, 0x0113
 204:	80 93 10 01 	sts	0x0110, r24
			controlAlgorithm();
 208:	00 d1       	rcall	.+512    	; 0x40a <controlAlgorithm>
 20a:	2b c0       	rjmp	.+86     	; 0x262 <__vector_19+0x13c>
// 			if(stationMode == 0)
// 			{
// 				controlAlgorithm();
// 			}
		}else if (component == ARM)
 20c:	80 91 07 01 	lds	r24, 0x0107
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	41 f4       	brne	.+16     	; 0x224 <__vector_19+0xfe>
		{
			armData = data;
 214:	80 91 13 01 	lds	r24, 0x0113
 218:	80 93 0f 01 	sts	0x010F, r24
			moveArm(armData);
 21c:	80 91 0f 01 	lds	r24, 0x010F
 220:	e1 d3       	rcall	.+1986   	; 0x9e4 <moveArm>
 222:	1f c0       	rjmp	.+62     	; 0x262 <__vector_19+0x13c>
		} else if (component == WHEEL)
 224:	80 91 07 01 	lds	r24, 0x0107
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	31 f4       	brne	.+12     	; 0x238 <__vector_19+0x112>
		{
			steeringData = data;
 22c:	80 91 13 01 	lds	r24, 0x0113
 230:	80 93 11 01 	sts	0x0111, r24
			moveRobot();
 234:	9c d1       	rcall	.+824    	; 0x56e <moveRobot>
 236:	15 c0       	rjmp	.+42     	; 0x262 <__vector_19+0x13c>
		}  else if (component == KPROPORTIONAL)
 238:	80 91 07 01 	lds	r24, 0x0107
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	21 f4       	brne	.+8      	; 0x248 <__vector_19+0x122>
		{
			changeProportional(data);
 240:	80 91 13 01 	lds	r24, 0x0113
 244:	f9 d1       	rcall	.+1010   	; 0x638 <changeProportional>
 246:	0d c0       	rjmp	.+26     	; 0x262 <__vector_19+0x13c>
		}  else if (component == KDERIVATIVE)
 248:	80 91 07 01 	lds	r24, 0x0107
 24c:	85 30       	cpi	r24, 0x05	; 5
 24e:	21 f4       	brne	.+8      	; 0x258 <__vector_19+0x132>
		{
			changeDerivative(data);
 250:	80 91 13 01 	lds	r24, 0x0113
 254:	f4 d1       	rcall	.+1000   	; 0x63e <changeDerivative>
 256:	05 c0       	rjmp	.+10     	; 0x262 <__vector_19+0x13c>
		}  else if (component == DROPITEM)
 258:	80 91 07 01 	lds	r24, 0x0107
 25c:	86 30       	cpi	r24, 0x06	; 6
 25e:	09 f4       	brne	.+2      	; 0x262 <__vector_19+0x13c>
		{
			dropItem();
 260:	59 d3       	rcall	.+1714   	; 0x914 <dropItem>
		}
	}
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0b be       	out	0x3b, r0	; 59
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <getError>:
#include "controlModule.h"


/*Function that calculates the line error*/
int8_t getError()
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <getError+0x6>
 28e:	1f 92       	push	r1
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t res = 0; 
 294:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t sum = 0; // Sum of all data from active sensors (1,..,7)
 296:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0; // Counter which counts number of sensors activated 
 298:	1b 82       	std	Y+3, r1	; 0x03
	error = 0; // Error from line
 29a:	10 92 18 01 	sts	0x0118, r1
	uint8_t lineData; 
	lineData = sensorData;
 29e:	40 91 10 01 	lds	r20, 0x0110
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((lineData >> noShift) & 0x01);
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	9a 01       	movw	r18, r20
 2aa:	08 2e       	mov	r0, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <getError+0x2a>
 2ae:	35 95       	asr	r19
 2b0:	27 95       	ror	r18
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <getError+0x26>
 2b6:	21 70       	andi	r18, 0x01	; 1
 2b8:	33 27       	eor	r19, r19
 2ba:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 2bc:	29 81       	ldd	r18, Y+1	; 0x01
 2be:	21 30       	cpi	r18, 0x01	; 1
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <getError+0x48>
		{
			sum = sum + (7 - noShift);
 2c2:	2a 81       	ldd	r18, Y+2	; 0x02
 2c4:	29 5f       	subi	r18, 0xF9	; 249
 2c6:	28 1b       	sub	r18, r24
 2c8:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 2ca:	2b 81       	ldd	r18, Y+3	; 0x03
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	2b 83       	std	Y+3, r18	; 0x03
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	50 f7       	brcc	.-44     	; 0x2a8 <getError+0x20>
		}
	}
	if(counter1 == 1)
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	39 f4       	brne	.+14     	; 0x2e8 <getError+0x60>
	{
		error = sum + (sum-1);
 2da:	9a 81       	ldd	r25, Y+2	; 0x02
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	89 0f       	add	r24, r25
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	80 93 18 01 	sts	0x0118, r24
 2e6:	22 c0       	rjmp	.+68     	; 0x32c <getError+0xa4>
	} else if(counter1 == 2)
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	29 f4       	brne	.+10     	; 0x2f8 <getError+0x70>

	{
		error = sum-1;
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	80 93 18 01 	sts	0x0118, r24
 2f6:	1a c0       	rjmp	.+52     	; 0x32c <getError+0xa4>
	} else if(counter1 == 3)
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	a1 f4       	brne	.+40     	; 0x326 <getError+0x9e>
	{
		error = sum*2;
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	88 0f       	add	r24, r24
 302:	80 93 18 01 	sts	0x0118, r24
		error = error/(0b00000011);
 306:	80 91 18 01 	lds	r24, 0x0118
 30a:	96 e5       	ldi	r25, 0x56	; 86
 30c:	89 02       	muls	r24, r25
 30e:	91 2d       	mov	r25, r1
 310:	11 24       	eor	r1, r1
 312:	87 fd       	sbrc	r24, 7
 314:	93 95       	inc	r25
 316:	90 93 18 01 	sts	0x0118, r25
		error = error - 1;
 31a:	80 91 18 01 	lds	r24, 0x0118
 31e:	81 50       	subi	r24, 0x01	; 1
 320:	80 93 18 01 	sts	0x0118, r24
 324:	03 c0       	rjmp	.+6      	; 0x32c <getError+0xa4>
		
	} 
	 else
	{
		error = -8;
 326:	88 ef       	ldi	r24, 0xF8	; 248
 328:	80 93 18 01 	sts	0x0118, r24
	}
	error = 7 - error;
 32c:	90 91 18 01 	lds	r25, 0x0118
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	89 1b       	sub	r24, r25
 334:	80 93 18 01 	sts	0x0118, r24
	return error;
 338:	80 91 18 01 	lds	r24, 0x0118
}
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <calculateSpeed>:
	}
}

/* function that calculates the speed */
int8_t calculateSpeed(int8_t error)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <calculateSpeed+0x8>
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 354:	1a 82       	std	Y+2, r1	; 0x02
 356:	19 82       	std	Y+1, r1	; 0x01
	
	speed = Kp * error + Kd * (error - prevError);
 358:	28 2f       	mov	r18, r24
 35a:	33 27       	eor	r19, r19
 35c:	27 fd       	sbrc	r18, 7
 35e:	30 95       	com	r19
 360:	40 91 1a 01 	lds	r20, 0x011A
 364:	42 03       	mulsu	r20, r18
 366:	b0 01       	movw	r22, r0
 368:	43 9f       	mul	r20, r19
 36a:	70 0d       	add	r23, r0
 36c:	11 24       	eor	r1, r1
 36e:	10 91 15 01 	lds	r17, 0x0115
 372:	90 91 0c 01 	lds	r25, 0x010C
 376:	29 1b       	sub	r18, r25
 378:	31 09       	sbc	r19, r1
 37a:	97 fd       	sbrc	r25, 7
 37c:	33 95       	inc	r19
 37e:	12 03       	mulsu	r17, r18
 380:	a0 01       	movw	r20, r0
 382:	13 9f       	mul	r17, r19
 384:	50 0d       	add	r21, r0
 386:	11 24       	eor	r1, r1
 388:	9b 01       	movw	r18, r22
 38a:	24 0f       	add	r18, r20
 38c:	35 1f       	adc	r19, r21
 38e:	3a 83       	std	Y+2, r19	; 0x02
 390:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 392:	80 93 0c 01 	sts	0x010C, r24
	return speed;
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
}
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <drivingSetup>:

/* Function that initiates driving */
void drivingSetup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 3a6:	81 ef       	ldi	r24, 0xF1	; 241
 3a8:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 128
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //Starts the timer
 3b2:	10 92 85 00 	sts	0x0085, r1
 3b6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 255; //Sets compare register => Robot does not move
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 89 00 	sts	0x0089, r25
 3c2:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 255; // Sets compare register => Robot does not move
 3c6:	90 93 8b 00 	sts	0x008B, r25
 3ca:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7); //Sets the data direction for the PWM and direction ports. 
 3ce:	8a b1       	in	r24, 0x0a	; 10
 3d0:	80 6f       	ori	r24, 0xF0	; 240
 3d2:	8a b9       	out	0x0a, r24	; 10
	Kp = 20;
 3d4:	84 e1       	ldi	r24, 0x14	; 20
 3d6:	80 93 1a 01 	sts	0x011A, r24
	Kd = 5;
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	80 93 15 01 	sts	0x0115, r24
 3e0:	08 95       	ret

000003e2 <drive>:

/* Function that controls both direction and speed of the motors. 
	rightDir, leftDir = 1 => Forward. rightDir, leftDir = 0 => Backward. */
void drive(int rightDir, int leftDir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(rightDir == 1)
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <drive+0x8>
	{
		PORTD &= ~(1 << PORTD7);
 3e6:	5f 98       	cbi	0x0b, 7	; 11
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <drive+0xa>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 3ea:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(leftDir == 1)
 3ec:	61 30       	cpi	r22, 0x01	; 1
 3ee:	71 05       	cpc	r23, r1
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <drive+0x14>
	{
		PORTD |= (1 << PORTD6);
 3f2:	5e 9a       	sbi	0x0b, 6	; 11
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <drive+0x16>
	}
	else
	{
		PORTD &= ~(1 << PORTD6);
 3f6:	5e 98       	cbi	0x0b, 6	; 11
	}
	OCR1A = rightSpeed;
 3f8:	30 93 89 00 	sts	0x0089, r19
 3fc:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 400:	50 93 8b 00 	sts	0x008B, r21
 404:	40 93 8a 00 	sts	0x008A, r20
 408:	08 95       	ret

0000040a <controlAlgorithm>:
}

/* Function that controls the robot movement when following a line */
void controlAlgorithm()
{
	error = getError();
 40a:	3e df       	rcall	.-388    	; 0x288 <getError>
 40c:	80 93 18 01 	sts	0x0118, r24
		
	if(error == 15)  // No sensors activated
 410:	80 91 18 01 	lds	r24, 0x0118
 414:	8f 30       	cpi	r24, 0x0F	; 15
 416:	99 f4       	brne	.+38     	; 0x43e <controlAlgorithm+0x34>
	{
		rightWheelSpeed = rightWheelSpeed; 
 418:	80 91 06 01 	lds	r24, 0x0106
 41c:	80 93 06 01 	sts	0x0106, r24
		leftWheelSpeed = leftWheelSpeed;
 420:	80 91 03 01 	lds	r24, 0x0103
 424:	80 93 03 01 	sts	0x0103, r24
		drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 428:	20 91 06 01 	lds	r18, 0x0106
 42c:	40 91 03 01 	lds	r20, 0x0103
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	d2 df       	rcall	.-92     	; 0x3e2 <drive>
	else
	{
		
	}
	{	
		midSpeed = 140;  //Standard speed
 43e:	8c e8       	ldi	r24, 0x8C	; 140
 440:	80 93 19 01 	sts	0x0119, r24
		int16_t speed = calculateSpeed(error);  //calculate new speed 
 444:	80 91 18 01 	lds	r24, 0x0118
 448:	7f df       	rcall	.-258    	; 0x348 <calculateSpeed>
 44a:	28 2f       	mov	r18, r24
 44c:	33 27       	eor	r19, r19
 44e:	27 fd       	sbrc	r18, 7
 450:	30 95       	com	r19
		if ((midSpeed-speed) < 10)
 452:	90 91 19 01 	lds	r25, 0x0119
 456:	49 2f       	mov	r20, r25
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	42 1b       	sub	r20, r18
 45c:	53 0b       	sbc	r21, r19
 45e:	4a 30       	cpi	r20, 0x0A	; 10
 460:	51 05       	cpc	r21, r1
 462:	3c f4       	brge	.+14     	; 0x472 <controlAlgorithm+0x68>
		{
			rightWheelSpeed = 3;
 464:	93 e0       	ldi	r25, 0x03	; 3
 466:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	90 93 1b 01 	sts	0x011B, r25
 470:	0f c0       	rjmp	.+30     	; 0x490 <controlAlgorithm+0x86>
		}
		else if ((midSpeed-speed) > 235)
 472:	4c 3e       	cpi	r20, 0xEC	; 236
 474:	51 05       	cpc	r21, r1
 476:	34 f0       	brlt	.+12     	; 0x484 <controlAlgorithm+0x7a>
		{
			rightWheelSpeed = 100;
 478:	94 e6       	ldi	r25, 0x64	; 100
 47a:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 0;
 47e:	10 92 1b 01 	sts	0x011B, r1
 482:	06 c0       	rjmp	.+12     	; 0x490 <controlAlgorithm+0x86>
		}
		else
		{
			rightWheelSpeed = midSpeed - speed;
 484:	98 1b       	sub	r25, r24
 486:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	90 93 1b 01 	sts	0x011B, r25
		}
		
		if ((midSpeed+speed) < 10)
 490:	90 91 19 01 	lds	r25, 0x0119
 494:	29 0f       	add	r18, r25
 496:	31 1d       	adc	r19, r1
 498:	2a 30       	cpi	r18, 0x0A	; 10
 49a:	31 05       	cpc	r19, r1
 49c:	3c f4       	brge	.+14     	; 0x4ac <controlAlgorithm+0xa2>
		{
			leftWheelSpeed = 40;
 49e:	88 e2       	ldi	r24, 0x28	; 40
 4a0:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 12 01 	sts	0x0112, r24
 4aa:	0f c0       	rjmp	.+30     	; 0x4ca <controlAlgorithm+0xc0>
		}
		else if ((midSpeed+speed) > 235)
 4ac:	2c 3e       	cpi	r18, 0xEC	; 236
 4ae:	31 05       	cpc	r19, r1
 4b0:	34 f0       	brlt	.+12     	; 0x4be <controlAlgorithm+0xb4>
		{
			leftWheelSpeed = 80;
 4b2:	80 e5       	ldi	r24, 0x50	; 80
 4b4:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 0;
 4b8:	10 92 12 01 	sts	0x0112, r1
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <controlAlgorithm+0xc0>
		}
		else
		{
			leftWheelSpeed = midSpeed + speed;
 4be:	89 0f       	add	r24, r25
 4c0:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 12 01 	sts	0x0112, r24
		}
		drive(rightWheelDirection, leftWheelDirection, leftWheelSpeed, rightWheelSpeed);
 4ca:	20 91 06 01 	lds	r18, 0x0106
 4ce:	40 91 03 01 	lds	r20, 0x0103
 4d2:	60 91 12 01 	lds	r22, 0x0112
 4d6:	80 91 1b 01 	lds	r24, 0x011B
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	7f cf       	rjmp	.-258    	; 0x3e2 <drive>

000004e4 <driveForward>:
}

/* Function that makes the robot move forward */
void driveForward(uint8_t speed)
{
	drive(1, 1, speed, speed);
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	48 2f       	mov	r20, r24
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	76 cf       	rjmp	.-276    	; 0x3e2 <drive>

000004f6 <driveBackward>:
}
/* Function that makes the robot move backward */
void driveBackward(uint8_t speed)
{
	drive(0, 0, speed, speed);
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	48 2f       	mov	r20, r24
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	6d cf       	rjmp	.-294    	; 0x3e2 <drive>

00000508 <stop>:
}
/* Function that makes the robot stop */
void stop()
{
	drive(1, 1, 255, 255);
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	4f ef       	ldi	r20, 0xFF	; 255
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	64 cf       	rjmp	.-312    	; 0x3e2 <drive>

0000051a <driveForwardRight>:
}
/* Function that makes the robot move forward and to the right */
void driveForwardRight(uint8_t speed)
{
	drive(1, 1, speed - 40, speed + 40);
 51a:	48 2f       	mov	r20, r24
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	9a 01       	movw	r18, r20
 520:	28 5d       	subi	r18, 0xD8	; 216
 522:	3f 4f       	sbci	r19, 0xFF	; 255
 524:	48 52       	subi	r20, 0x28	; 40
 526:	51 09       	sbc	r21, r1
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	58 cf       	rjmp	.-336    	; 0x3e2 <drive>

00000532 <driveForwardLeft>:
}

/* Function that makes the robot move forward and to the left */
void driveForwardLeft(uint8_t speed)
{
	drive(1, 1, speed + 40, speed - 40);
 532:	48 2f       	mov	r20, r24
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	9a 01       	movw	r18, r20
 538:	28 52       	subi	r18, 0x28	; 40
 53a:	31 09       	sbc	r19, r1
 53c:	48 5d       	subi	r20, 0xD8	; 216
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	4c cf       	rjmp	.-360    	; 0x3e2 <drive>

0000054a <rotateCCW>:

/* Function that rotates the robot counterclockwise */
void rotateCCW()
{
	uint8_t speed = 100;
	drive(1, 0, speed, speed);
 54a:	24 e6       	ldi	r18, 0x64	; 100
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	44 e6       	ldi	r20, 0x64	; 100
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	43 cf       	rjmp	.-378    	; 0x3e2 <drive>

0000055c <rotateCW>:

/* Function that rotates the robot clockwise */
void rotateCW()
{
	uint8_t speed = 100;
	drive(0, 1, speed, speed);
 55c:	24 e6       	ldi	r18, 0x64	; 100
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	44 e6       	ldi	r20, 0x64	; 100
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	3a cf       	rjmp	.-396    	; 0x3e2 <drive>

0000056e <moveRobot>:
/* Function that allows the user to control the robot movement via the GUI. */
void moveRobot()
{
	uint8_t FASTSPEED = 80;
	uint8_t SLOWSPEED = 200;
	if(((steeringData & 0x08) >> 3) == 1)
 56e:	80 91 11 01 	lds	r24, 0x0111
 572:	83 ff       	sbrs	r24, 3
 574:	1e c0       	rjmp	.+60     	; 0x5b2 <moveRobot+0x44>
	{
		if(steeringData == 0b00001100)
 576:	80 91 11 01 	lds	r24, 0x0111
 57a:	8c 30       	cpi	r24, 0x0C	; 12
 57c:	11 f4       	brne	.+4      	; 0x582 <moveRobot+0x14>
		{
			driveBackward(FASTSPEED);
 57e:	80 e5       	ldi	r24, 0x50	; 80
 580:	ba cf       	rjmp	.-140    	; 0x4f6 <driveBackward>
		} else if(steeringData == 0b00001011)
 582:	80 91 11 01 	lds	r24, 0x0111
 586:	8b 30       	cpi	r24, 0x0B	; 11
 588:	11 f4       	brne	.+4      	; 0x58e <moveRobot+0x20>
		{
			driveForwardLeft(FASTSPEED);
 58a:	80 e5       	ldi	r24, 0x50	; 80
 58c:	d2 cf       	rjmp	.-92     	; 0x532 <driveForwardLeft>
		} else if(steeringData == 0b00001010)
 58e:	80 91 11 01 	lds	r24, 0x0111
 592:	8a 30       	cpi	r24, 0x0A	; 10
 594:	11 f4       	brne	.+4      	; 0x59a <moveRobot+0x2c>
		{
			driveForwardRight(FASTSPEED);
 596:	80 e5       	ldi	r24, 0x50	; 80
 598:	c0 cf       	rjmp	.-128    	; 0x51a <driveForwardRight>
		} else if(steeringData == 0b00001001)
 59a:	80 91 11 01 	lds	r24, 0x0111
 59e:	89 30       	cpi	r24, 0x09	; 9
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <moveRobot+0x38>
		{
			driveForward(FASTSPEED);
 5a2:	80 e5       	ldi	r24, 0x50	; 80
 5a4:	9f cf       	rjmp	.-194    	; 0x4e4 <driveForward>
		} else if(steeringData == 0b00001000)
 5a6:	80 91 11 01 	lds	r24, 0x0111
 5aa:	88 30       	cpi	r24, 0x08	; 8
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <moveRobot+0x42>
 5ae:	43 c0       	rjmp	.+134    	; 0x636 <moveRobot+0xc8>
		{
			stop();
 5b0:	ab cf       	rjmp	.-170    	; 0x508 <stop>
		}
	}	else
	{
		if(steeringData == 0b00000100)
 5b2:	80 91 11 01 	lds	r24, 0x0111
 5b6:	84 30       	cpi	r24, 0x04	; 4
 5b8:	11 f4       	brne	.+4      	; 0x5be <moveRobot+0x50>
		{
			driveBackward(SLOWSPEED);
 5ba:	88 ec       	ldi	r24, 0xC8	; 200
 5bc:	9c cf       	rjmp	.-200    	; 0x4f6 <driveBackward>
		} else if(steeringData == 0b00000011)
 5be:	80 91 11 01 	lds	r24, 0x0111
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	11 f4       	brne	.+4      	; 0x5ca <moveRobot+0x5c>
		{
			driveForwardLeft(SLOWSPEED);
 5c6:	88 ec       	ldi	r24, 0xC8	; 200
 5c8:	b4 cf       	rjmp	.-152    	; 0x532 <driveForwardLeft>
		} else if(steeringData == 0b00000010)
 5ca:	80 91 11 01 	lds	r24, 0x0111
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <moveRobot+0x68>
		{
			driveForwardRight(SLOWSPEED);
 5d2:	88 ec       	ldi	r24, 0xC8	; 200
 5d4:	a2 cf       	rjmp	.-188    	; 0x51a <driveForwardRight>
		} else if(steeringData == 0b00000001)
 5d6:	80 91 11 01 	lds	r24, 0x0111
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <moveRobot+0x74>
		{
			driveForward(SLOWSPEED);
 5de:	88 ec       	ldi	r24, 0xC8	; 200
 5e0:	81 cf       	rjmp	.-254    	; 0x4e4 <driveForward>
		} else if(steeringData == 0b00000000 || steeringData == 0b10000000)
 5e2:	80 91 11 01 	lds	r24, 0x0111
 5e6:	88 23       	and	r24, r24
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <moveRobot+0x84>
 5ea:	80 91 11 01 	lds	r24, 0x0111
 5ee:	80 38       	cpi	r24, 0x80	; 128
 5f0:	c1 f4       	brne	.+48     	; 0x622 <moveRobot+0xb4>
		{
			
			stop();
 5f2:	8a df       	rcall	.-236    	; 0x508 <stop>
			TIMSK0 |= (1<<OCIE0A);
 5f4:	ee e6       	ldi	r30, 0x6E	; 110
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	82 60       	ori	r24, 0x02	; 2
 5fc:	80 83       	st	Z, r24
			
			stationMode = 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 14 01 	sts	0x0114, r24
			if(steeringData == 0)
 604:	80 91 11 01 	lds	r24, 0x0111
 608:	81 11       	cpse	r24, r1
 60a:	04 c0       	rjmp	.+8      	; 0x614 <moveRobot+0xa6>
			{
				side = 1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 00 01 	sts	0x0100, r24
 612:	08 95       	ret
				
			} else if(steeringData == 128)
 614:	80 91 11 01 	lds	r24, 0x0111
 618:	80 38       	cpi	r24, 0x80	; 128
 61a:	69 f4       	brne	.+26     	; 0x636 <moveRobot+0xc8>
			{
				side = 0;
 61c:	10 92 00 01 	sts	0x0100, r1
 620:	08 95       	ret
			}
			
		} else if(steeringData == 0b00000101)
 622:	80 91 11 01 	lds	r24, 0x0111
 626:	85 30       	cpi	r24, 0x05	; 5
 628:	09 f4       	brne	.+2      	; 0x62c <moveRobot+0xbe>
		{
			rotateCW();
 62a:	98 cf       	rjmp	.-208    	; 0x55c <rotateCW>
		} else if(steeringData == 0b00000110)
 62c:	80 91 11 01 	lds	r24, 0x0111
 630:	86 30       	cpi	r24, 0x06	; 6
 632:	09 f4       	brne	.+2      	; 0x636 <moveRobot+0xc8>
		{
			rotateCCW();
 634:	8a cf       	rjmp	.-236    	; 0x54a <rotateCCW>
 636:	08 95       	ret

00000638 <changeProportional>:
}

/*Functions that sets new Kp value*/
void changeProportional(uint8_t newKp)
{
	Kp = newKp;
 638:	80 93 1a 01 	sts	0x011A, r24
 63c:	08 95       	ret

0000063e <changeDerivative>:


/*Functions that sets new Kd value*/
void changeDerivative(uint8_t newKd)
{
	Kd = newKd;
 63e:	80 93 15 01 	sts	0x0115, r24
 642:	08 95       	ret

00000644 <USARTTransmit>:
}

/*Transmits a byte via USART*/
void USARTTransmit( unsigned char data) {
	/*Wait for empty transmit buffer*/
	PORTD |= (1 << PORTD3);
 644:	5b 9a       	sbi	0x0b, 3	; 11
	while (!(UCSR0A & (1<<UDRE0))); // UDREn == Data Register Empty (indicates whether the transmit buffer is ready to recieve new data.
 646:	e0 ec       	ldi	r30, 0xC0	; 192
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	90 81       	ld	r25, Z
 64c:	95 ff       	sbrs	r25, 5
 64e:	fd cf       	rjmp	.-6      	; 0x64a <USARTTransmit+0x6>
	/*Put data into buffer, sends the data*/
	UDR0 = data; //UDREn cleared.
 650:	80 93 c6 00 	sts	0x00C6, r24
 654:	08 95       	ret

00000656 <moveSingleServo>:
}


/*Move single servos to a position*/
void moveSingleServo(unsigned int position, uint8_t speed_l, uint8_t speed_h, uint8_t servo_ID) { 
 656:	ff 92       	push	r15
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	00 d0       	rcall	.+0      	; 0x662 <moveSingleServo+0xc>
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	f6 2e       	mov	r15, r22
 668:	04 2f       	mov	r16, r20
 66a:	12 2f       	mov	r17, r18
	
	byte checksum;
	
	volatile unsigned char s_low_byte = position;			//lower byte of position for servo
 66c:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char s_high_byte = (position >> 8);	//higher byte of position for servo
 66e:	9a 83       	std	Y+2, r25	; 0x02
	
	USARTTransmit(0xFF);			//start byte
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	e8 df       	rcall	.-48     	; 0x644 <USARTTransmit>
	USARTTransmit(0xFF);			//start byte
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	e6 df       	rcall	.-52     	; 0x644 <USARTTransmit>
	USARTTransmit(servo_ID);		//servo ID
 678:	81 2f       	mov	r24, r17
 67a:	e4 df       	rcall	.-56     	; 0x644 <USARTTransmit>
	USARTTransmit(0x07);			//length = 7
 67c:	87 e0       	ldi	r24, 0x07	; 7
 67e:	e2 df       	rcall	.-60     	; 0x644 <USARTTransmit>
	USARTTransmit(WRITE);			//instruction = write_data
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	e0 df       	rcall	.-64     	; 0x644 <USARTTransmit>
	USARTTransmit(GOAL_POSITION_L);	//address = goal position(L)
 684:	8e e1       	ldi	r24, 0x1E	; 30
 686:	de df       	rcall	.-68     	; 0x644 <USARTTransmit>
	USARTTransmit(s_low_byte);		//send low byte of position
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	dc df       	rcall	.-72     	; 0x644 <USARTTransmit>
	USARTTransmit(s_high_byte);		//send high byte of position
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	da df       	rcall	.-76     	; 0x644 <USARTTransmit>
	USARTTransmit(speed_l);			//send low byte of speed
 690:	8f 2d       	mov	r24, r15
 692:	d8 df       	rcall	.-80     	; 0x644 <USARTTransmit>
	USARTTransmit(speed_h);			//send high byte of speed
 694:	80 2f       	mov	r24, r16
 696:	d6 df       	rcall	.-84     	; 0x644 <USARTTransmit>
	
	checksum = servo_ID + 0x07 + WRITE + GOAL_POSITION_L + s_low_byte + s_high_byte + speed_l + speed_h;
 698:	99 81       	ldd	r25, Y+1	; 0x01
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	89 0f       	add	r24, r25
 69e:	88 5d       	subi	r24, 0xD8	; 216
 6a0:	f8 0e       	add	r15, r24
 6a2:	0f 0d       	add	r16, r15
 6a4:	80 2f       	mov	r24, r16
 6a6:	81 0f       	add	r24, r17
	
	checksum = ~checksum;
	
	USARTTransmit(checksum);
 6a8:	80 95       	com	r24
 6aa:	cc df       	rcall	.-104    	; 0x644 <USARTTransmit>
	
}
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	ff 90       	pop	r15
 6ba:	08 95       	ret

000006bc <moveDoubleServo>:

/*Move servos placed two and two to a position.*/
void moveDoubleServo(unsigned int position, uint8_t speed_l, uint8_t speed_h, uint8_t servo_ID1, unsigned int servo_ID2) {
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <moveDoubleServo+0xe>
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <moveDoubleServo+0x10>
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <moveDoubleServo+0x12>
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	f6 2e       	mov	r15, r22
 6d4:	14 2f       	mov	r17, r20
 6d6:	e2 2e       	mov	r14, r18
	
	byte checksum;
	
	volatile unsigned int tmp = 1023-position;
 6d8:	af ef       	ldi	r26, 0xFF	; 255
 6da:	b3 e0       	ldi	r27, 0x03	; 3
 6dc:	a8 1b       	sub	r26, r24
 6de:	b9 0b       	sbc	r27, r25
 6e0:	ba 83       	std	Y+2, r27	; 0x02
 6e2:	a9 83       	std	Y+1, r26	; 0x01
	
	volatile unsigned char s1_low_byte = position;			//lower byte of position for servo 1
 6e4:	8b 83       	std	Y+3, r24	; 0x03
	volatile unsigned char s1_high_byte = (position >> 8);	//higher byte of position for servo 1
 6e6:	9c 83       	std	Y+4, r25	; 0x04
	
	volatile unsigned char s2_low_byte = tmp;			//lower byte of position for servo 2
 6e8:	e9 81       	ldd	r30, Y+1	; 0x01
 6ea:	fa 81       	ldd	r31, Y+2	; 0x02
 6ec:	ed 83       	std	Y+5, r30	; 0x05
	volatile unsigned char s2_high_byte = (tmp >> 8);	//higher byte of position for servo 2
 6ee:	e9 81       	ldd	r30, Y+1	; 0x01
 6f0:	fa 81       	ldd	r31, Y+2	; 0x02
 6f2:	fe 83       	std	Y+6, r31	; 0x06
	
	USARTTransmit(0xFF);			//start byte
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	a6 df       	rcall	.-180    	; 0x644 <USARTTransmit>
	USARTTransmit(0xFF);			//start byte
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	a4 df       	rcall	.-184    	; 0x644 <USARTTransmit>
	USARTTransmit(0xFE);			//broadcast ID
 6fc:	8e ef       	ldi	r24, 0xFE	; 254
 6fe:	a2 df       	rcall	.-188    	; 0x644 <USARTTransmit>
	USARTTransmit(0x0E);			//length is 14
 700:	8e e0       	ldi	r24, 0x0E	; 14
 702:	a0 df       	rcall	.-192    	; 0x644 <USARTTransmit>
	USARTTransmit(SYNC_WRITE);		//instruction = sync_data (2 servo)
 704:	83 e8       	ldi	r24, 0x83	; 131
 706:	9e df       	rcall	.-196    	; 0x644 <USARTTransmit>
	USARTTransmit(GOAL_POSITION_L);	
 708:	8e e1       	ldi	r24, 0x1E	; 30
 70a:	9c df       	rcall	.-200    	; 0x644 <USARTTransmit>
	USARTTransmit(0x04);			//data length is 4
 70c:	84 e0       	ldi	r24, 0x04	; 4
 70e:	9a df       	rcall	.-204    	; 0x644 <USARTTransmit>
	USARTTransmit(servo_ID1);		//servo id1
 710:	8e 2d       	mov	r24, r14
 712:	98 df       	rcall	.-208    	; 0x644 <USARTTransmit>
	USARTTransmit(s1_low_byte);		//send low byte of position
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	96 df       	rcall	.-212    	; 0x644 <USARTTransmit>
	USARTTransmit(s1_high_byte);	//send high byte of position
 718:	8c 81       	ldd	r24, Y+4	; 0x04
 71a:	94 df       	rcall	.-216    	; 0x644 <USARTTransmit>
	USARTTransmit(speed_l);			//send low byte of speed
 71c:	8f 2d       	mov	r24, r15
 71e:	92 df       	rcall	.-220    	; 0x644 <USARTTransmit>
	USARTTransmit(speed_h);			//send high byte of speed
 720:	81 2f       	mov	r24, r17
 722:	90 df       	rcall	.-224    	; 0x644 <USARTTransmit>
	USARTTransmit(servo_ID2);		//servo id2
 724:	80 2f       	mov	r24, r16
 726:	8e df       	rcall	.-228    	; 0x644 <USARTTransmit>
	USARTTransmit(s2_low_byte);		//send low byte of position
 728:	8d 81       	ldd	r24, Y+5	; 0x05
 72a:	8c df       	rcall	.-232    	; 0x644 <USARTTransmit>
	USARTTransmit(s2_high_byte);	//send high byte of position
 72c:	8e 81       	ldd	r24, Y+6	; 0x06
 72e:	8a df       	rcall	.-236    	; 0x644 <USARTTransmit>
	USARTTransmit(speed_l);			//send low byte of speed
 730:	8f 2d       	mov	r24, r15
 732:	88 df       	rcall	.-240    	; 0x644 <USARTTransmit>
	USARTTransmit(speed_h);			//send high byte of speed
 734:	81 2f       	mov	r24, r17
 736:	86 df       	rcall	.-244    	; 0x644 <USARTTransmit>
	
	checksum = 0xFE + 0x0E + SYNC_WRITE + GOAL_POSITION_L + 0x04 + servo_ID1 + s1_low_byte + s1_high_byte + speed_l + speed_h + servo_ID2 + s2_low_byte + s2_high_byte + speed_l + speed_h;
 738:	3b 81       	ldd	r19, Y+3	; 0x03
 73a:	8c 81       	ldd	r24, Y+4	; 0x04
 73c:	2d 81       	ldd	r18, Y+5	; 0x05
 73e:	9e 81       	ldd	r25, Y+6	; 0x06
 740:	83 0f       	add	r24, r19
 742:	8f 54       	subi	r24, 0x4F	; 79
 744:	82 0f       	add	r24, r18
 746:	89 0f       	add	r24, r25
 748:	8f 0d       	add	r24, r15
 74a:	f8 0e       	add	r15, r24
 74c:	f1 0e       	add	r15, r17
 74e:	1f 0d       	add	r17, r15
 750:	e1 0e       	add	r14, r17
 752:	8e 2d       	mov	r24, r14
 754:	80 0f       	add	r24, r16
	
	checksum = ~checksum;
	
	USARTTransmit(checksum);
 756:	80 95       	com	r24
 758:	75 df       	rcall	.-278    	; 0x644 <USARTTransmit>
}
 75a:	26 96       	adiw	r28, 0x06	; 6
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	08 95       	ret

00000774 <defaultPosition>:

/*Move the arm to default position*/
void defaultPosition() {
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
	
	moveSingleServo(0x1FF, 0x40, 0x00, 0x07);			//setting servo 7 (joint 5) straight
 778:	27 e0       	ldi	r18, 0x07	; 7
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	60 e4       	ldi	r22, 0x40	; 64
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	69 df       	rcall	.-302    	; 0x656 <moveSingleServo>
	moveSingleServo(0x332, 0x50, 0x00, 0x06);			//setting servo 6 (joint 4) straight up
 784:	26 e0       	ldi	r18, 0x06	; 6
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	60 e5       	ldi	r22, 0x50	; 80
 78a:	82 e3       	ldi	r24, 0x32	; 50
 78c:	93 e0       	ldi	r25, 0x03	; 3
 78e:	63 df       	rcall	.-314    	; 0x656 <moveSingleServo>
	moveDoubleServo(0x1FF, 0x90, 0x00, 0x02, 0x03);		//setting servo 2 & 3 (joint 2) to 0x1FF (straight upwards)
 790:	03 e0       	ldi	r16, 0x03	; 3
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	22 e0       	ldi	r18, 0x02	; 2
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	60 e9       	ldi	r22, 0x90	; 144
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	8e df       	rcall	.-228    	; 0x6bc <moveDoubleServo>
	moveDoubleServo(0xCC, 0x50, 0x00, 0x04, 0x05);		//0xCC (60 deg) is 0 degree position for servo 4 and 5 (joint 3)
 7a0:	05 e0       	ldi	r16, 0x05	; 5
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	24 e0       	ldi	r18, 0x04	; 4
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	60 e5       	ldi	r22, 0x50	; 80
 7aa:	8c ec       	ldi	r24, 0xCC	; 204
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	86 df       	rcall	.-244    	; 0x6bc <moveDoubleServo>
	moveDoubleServo(0xCC, 0x90, 0x00, 0x02, 0x03);		//0xCC (60 deg) is 0 degree position for servo 2 and 3 (joint 2)
 7b0:	03 e0       	ldi	r16, 0x03	; 3
 7b2:	10 e0       	ldi	r17, 0x00	; 0
 7b4:	22 e0       	ldi	r18, 0x02	; 2
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	60 e9       	ldi	r22, 0x90	; 144
 7ba:	8c ec       	ldi	r24, 0xCC	; 204
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	7e df       	rcall	.-260    	; 0x6bc <moveDoubleServo>
	moveSingleServo(0x1FF, 0x15, 0x00, 0x01);			//setting servo 1 (joint 1)
 7c0:	21 e0       	ldi	r18, 0x01	; 1
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	65 e1       	ldi	r22, 0x15	; 21
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	45 df       	rcall	.-374    	; 0x656 <moveSingleServo>
	
	//Updating positions
	joint1_Pos = 0x1FF;
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	90 93 09 01 	sts	0x0109, r25
 7d4:	80 93 08 01 	sts	0x0108, r24
	joint2_Pos = 0xCC;
 7d8:	2c ec       	ldi	r18, 0xCC	; 204
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	30 93 05 01 	sts	0x0105, r19
 7e0:	20 93 04 01 	sts	0x0104, r18
	joint3_Pos = 0xCC;
 7e4:	30 93 17 01 	sts	0x0117, r19
 7e8:	20 93 16 01 	sts	0x0116, r18
	joint4_Pos = 0x332;
 7ec:	22 e3       	ldi	r18, 0x32	; 50
 7ee:	33 e0       	ldi	r19, 0x03	; 3
 7f0:	30 93 20 01 	sts	0x0120, r19
 7f4:	20 93 1f 01 	sts	0x011F, r18
	joint5_Pos = 0x1FF;
 7f8:	90 93 1e 01 	sts	0x011E, r25
 7fc:	80 93 1d 01 	sts	0x011D, r24
}
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <armInit>:
#include <avr/interrupt.h>

/*Initializes ports and registers to communicate with robot arm*/
void armInit(void) {
	
	DDRD |= (1<<DDD3); //Setting D2 to output to control the tri-state
 806:	53 9a       	sbi	0x0a, 3	; 10
	/*Set baud rate.*/
	UBRR0H = (unsigned char)(0);  //baudvalue = (f_cpu/baudrate*16) -1
 808:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)(0);
 80c:	10 92 c4 00 	sts	0x00C4, r1
	/* Enable receiver and transmitter.*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 810:	88 e1       	ldi	r24, 0x18	; 24
 812:	80 93 c1 00 	sts	0x00C1, r24
	/*Set frame format. Asynchronous mode, no parity, 1 stop bit, char size 8.  */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 816:	86 e0       	ldi	r24, 0x06	; 6
 818:	80 93 c2 00 	sts	0x00C2, r24
		
	defaultPosition(); 	
 81c:	ab df       	rcall	.-170    	; 0x774 <defaultPosition>
	moveSingleServo(0x1FF, 0x50, 0x00, 0x08); //150 grader
 81e:	28 e0       	ldi	r18, 0x08	; 8
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	60 e5       	ldi	r22, 0x50	; 80
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	16 cf       	rjmp	.-468    	; 0x656 <moveSingleServo>

0000082a <pickupDefaultPosition>:
	joint4_Pos = 0x332;
	joint5_Pos = 0x1FF;
}

/*Move the arm to pickup default position.*/
void pickupDefaultPosition() {
 82a:	0f 93       	push	r16
 82c:	1f 93       	push	r17
	
	TIMSK0 &= ~(1<<OCIE0A);
 82e:	ee e6       	ldi	r30, 0x6E	; 110
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	8d 7f       	andi	r24, 0xFD	; 253
 836:	80 83       	st	Z, r24
	
	if(side == 0){ //Pickup on left side
 838:	80 91 00 01 	lds	r24, 0x0100
 83c:	81 11       	cpse	r24, r1
 83e:	0d c0       	rjmp	.+26     	; 0x85a <pickupDefaultPosition+0x30>
		moveSingleServo
		(0x332, 0x80, 0x00, 0x01); //Servo 1 in position 240 degrees
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	60 e8       	ldi	r22, 0x80	; 128
 846:	82 e3       	ldi	r24, 0x32	; 50
 848:	93 e0       	ldi	r25, 0x03	; 3
 84a:	05 df       	rcall	.-502    	; 0x656 <moveSingleServo>
		joint1_Pos = 0x332;
 84c:	82 e3       	ldi	r24, 0x32	; 50
 84e:	93 e0       	ldi	r25, 0x03	; 3
 850:	90 93 09 01 	sts	0x0109, r25
 854:	80 93 08 01 	sts	0x0108, r24
 858:	0e c0       	rjmp	.+28     	; 0x876 <pickupDefaultPosition+0x4c>
	}
	else if(side == 1){ //Pickup on right side
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	61 f4       	brne	.+24     	; 0x876 <pickupDefaultPosition+0x4c>
		moveSingleServo(0xCC, 0x80, 0x00, 0x01); //Servo 1 in position 60 (CC) degrees
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	60 e8       	ldi	r22, 0x80	; 128
 864:	8c ec       	ldi	r24, 0xCC	; 204
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	f6 de       	rcall	.-532    	; 0x656 <moveSingleServo>
		joint1_Pos = 0xCC;
 86a:	8c ec       	ldi	r24, 0xCC	; 204
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	90 93 09 01 	sts	0x0109, r25
 872:	80 93 08 01 	sts	0x0108, r24
	}
	
	moveDoubleServo(0x270, 0x50, 0x00, 0x02, 0x03);		//Joint 2 //288 innan
 876:	03 e0       	ldi	r16, 0x03	; 3
 878:	10 e0       	ldi	r17, 0x00	; 0
 87a:	22 e0       	ldi	r18, 0x02	; 2
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	60 e5       	ldi	r22, 0x50	; 80
 880:	80 e7       	ldi	r24, 0x70	; 112
 882:	92 e0       	ldi	r25, 0x02	; 2
 884:	1b df       	rcall	.-458    	; 0x6bc <moveDoubleServo>
	moveDoubleServo(0x288, 0x50, 0x00, 0x04, 0x05);		//Joint 3
 886:	05 e0       	ldi	r16, 0x05	; 5
 888:	10 e0       	ldi	r17, 0x00	; 0
 88a:	24 e0       	ldi	r18, 0x04	; 4
 88c:	40 e0       	ldi	r20, 0x00	; 0
 88e:	60 e5       	ldi	r22, 0x50	; 80
 890:	88 e8       	ldi	r24, 0x88	; 136
 892:	92 e0       	ldi	r25, 0x02	; 2
 894:	13 df       	rcall	.-474    	; 0x6bc <moveDoubleServo>
	moveSingleServo(0x144, 0x50, 0x00, 0x06);			//Joint 4
 896:	26 e0       	ldi	r18, 0x06	; 6
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	60 e5       	ldi	r22, 0x50	; 80
 89c:	84 e4       	ldi	r24, 0x44	; 68
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	da de       	rcall	.-588    	; 0x656 <moveSingleServo>
	moveSingleServo(0x1FF, 0x50, 0x00, 0x07);			//Joint 5
 8a2:	27 e0       	ldi	r18, 0x07	; 7
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	60 e5       	ldi	r22, 0x50	; 80
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	d4 de       	rcall	.-600    	; 0x656 <moveSingleServo>
	moveSingleServo(0x1FF, 0x50, 0x00, 0x08);			//Joint 6
 8ae:	28 e0       	ldi	r18, 0x08	; 8
 8b0:	40 e0       	ldi	r20, 0x00	; 0
 8b2:	60 e5       	ldi	r22, 0x50	; 80
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	ce de       	rcall	.-612    	; 0x656 <moveSingleServo>
	
	//Updating positions
	
	joint2_Pos = 0x270; //Var 288 innan
 8ba:	80 e7       	ldi	r24, 0x70	; 112
 8bc:	92 e0       	ldi	r25, 0x02	; 2
 8be:	90 93 05 01 	sts	0x0105, r25
 8c2:	80 93 04 01 	sts	0x0104, r24
	joint3_Pos = 0x288;
 8c6:	88 e8       	ldi	r24, 0x88	; 136
 8c8:	92 e0       	ldi	r25, 0x02	; 2
 8ca:	90 93 17 01 	sts	0x0117, r25
 8ce:	80 93 16 01 	sts	0x0116, r24
	joint4_Pos = 0x144;
 8d2:	84 e4       	ldi	r24, 0x44	; 68
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	90 93 20 01 	sts	0x0120, r25
 8da:	80 93 1f 01 	sts	0x011F, r24
	joint5_Pos = 0x1FF;
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	90 93 1e 01 	sts	0x011E, r25
 8e6:	80 93 1d 01 	sts	0x011D, r24
	joint6_Pos = 0x1FF;
 8ea:	90 93 24 01 	sts	0x0124, r25
 8ee:	80 93 23 01 	sts	0x0123, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f2:	2f ef       	ldi	r18, 0xFF	; 255
 8f4:	8b e7       	ldi	r24, 0x7B	; 123
 8f6:	92 e9       	ldi	r25, 0x92	; 146
 8f8:	21 50       	subi	r18, 0x01	; 1
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	90 40       	sbci	r25, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <pickupDefaultPosition+0xce>
 900:	00 c0       	rjmp	.+0      	; 0x902 <pickupDefaultPosition+0xd8>
 902:	00 00       	nop
	
	_delay_ms(3000);
	
	TIMSK0 |= (1<<OCIE0A);
 904:	ee e6       	ldi	r30, 0x6E	; 110
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	80 83       	st	Z, r24
	
}
 90e:	1f 91       	pop	r17
 910:	0f 91       	pop	r16
 912:	08 95       	ret

00000914 <dropItem>:

/*Drop the item on either left or right side.*/
void dropItem() { //Side = 1 right side, side = 0 left side
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
	
	//Only servo 1 that is different
	if(side == 0){ //Drop on left side
 918:	80 91 00 01 	lds	r24, 0x0100
 91c:	81 11       	cpse	r24, r1
 91e:	07 c0       	rjmp	.+14     	; 0x92e <dropItem+0x1a>
		moveSingleServo
		(0x332, 0x80, 0x00, 0x01); //Servo 1 in position 240 degrees
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	60 e8       	ldi	r22, 0x80	; 128
 926:	82 e3       	ldi	r24, 0x32	; 50
 928:	93 e0       	ldi	r25, 0x03	; 3
 92a:	95 de       	rcall	.-726    	; 0x656 <moveSingleServo>
 92c:	08 c0       	rjmp	.+16     	; 0x93e <dropItem+0x2a>
	}
	else if(side == 1){ //Drop on right side
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	31 f4       	brne	.+12     	; 0x93e <dropItem+0x2a>
		moveSingleServo(0xCC, 0x80, 0x00, 0x01); //Servo 1 in position 60 (CC) degrees
 932:	21 e0       	ldi	r18, 0x01	; 1
 934:	40 e0       	ldi	r20, 0x00	; 0
 936:	60 e8       	ldi	r22, 0x80	; 128
 938:	8c ec       	ldi	r24, 0xCC	; 204
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	8c de       	rcall	.-744    	; 0x656 <moveSingleServo>
 93e:	2f ef       	ldi	r18, 0xFF	; 255
 940:	87 ea       	ldi	r24, 0xA7	; 167
 942:	91 e6       	ldi	r25, 0x61	; 97
 944:	21 50       	subi	r18, 0x01	; 1
 946:	80 40       	sbci	r24, 0x00	; 0
 948:	90 40       	sbci	r25, 0x00	; 0
 94a:	e1 f7       	brne	.-8      	; 0x944 <dropItem+0x30>
 94c:	00 c0       	rjmp	.+0      	; 0x94e <dropItem+0x3a>
 94e:	00 00       	nop
	}
	
	_delay_ms(2000);
	
	moveDoubleServo(dropJoint2Pos, 0x60, 0x00, 0x02, 0x03);	//Servo 2 and 3 in position 203 (2B4) degrees
 950:	03 e0       	ldi	r16, 0x03	; 3
 952:	10 e0       	ldi	r17, 0x00	; 0
 954:	22 e0       	ldi	r18, 0x02	; 2
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	60 e6       	ldi	r22, 0x60	; 96
 95a:	80 91 01 01 	lds	r24, 0x0101
 95e:	90 91 02 01 	lds	r25, 0x0102
 962:	ac de       	rcall	.-680    	; 0x6bc <moveDoubleServo>
	moveDoubleServo(dropJoint3Pos, 0x60, 0x00, 0x04, 0x05);	//Servo 4 and 5 in position 210 degrees
 964:	05 e0       	ldi	r16, 0x05	; 5
 966:	10 e0       	ldi	r17, 0x00	; 0
 968:	24 e0       	ldi	r18, 0x04	; 4
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	60 e6       	ldi	r22, 0x60	; 96
 96e:	80 91 0a 01 	lds	r24, 0x010A
 972:	90 91 0b 01 	lds	r25, 0x010B
 976:	a2 de       	rcall	.-700    	; 0x6bc <moveDoubleServo>
	moveSingleServo(dropJoint4Pos, 0x60, 0x00, 0x06);		//Servo 6 in position 60 grader D3
 978:	26 e0       	ldi	r18, 0x06	; 6
 97a:	40 e0       	ldi	r20, 0x00	; 0
 97c:	60 e6       	ldi	r22, 0x60	; 96
 97e:	80 91 0d 01 	lds	r24, 0x010D
 982:	90 91 0e 01 	lds	r25, 0x010E
 986:	67 de       	rcall	.-818    	; 0x656 <moveSingleServo>
	moveSingleServo(dropJoint5Pos, 0x50, 0x01, 0x07);
 988:	27 e0       	ldi	r18, 0x07	; 7
 98a:	41 e0       	ldi	r20, 0x01	; 1
 98c:	60 e5       	ldi	r22, 0x50	; 80
 98e:	80 91 21 01 	lds	r24, 0x0121
 992:	90 91 22 01 	lds	r25, 0x0122
 996:	5f de       	rcall	.-834    	; 0x656 <moveSingleServo>
 998:	2f ef       	ldi	r18, 0xFF	; 255
 99a:	8b e7       	ldi	r24, 0x7B	; 123
 99c:	92 e9       	ldi	r25, 0x92	; 146
 99e:	21 50       	subi	r18, 0x01	; 1
 9a0:	80 40       	sbci	r24, 0x00	; 0
 9a2:	90 40       	sbci	r25, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <dropItem+0x8a>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <dropItem+0x94>
 9a8:	00 00       	nop
	
	_delay_ms(3000);
	
	moveSingleServo(0x1FF, 0x60, 0x00, 0x08); //Servo 8 in position 150 (1FF) degrees 
 9aa:	28 e0       	ldi	r18, 0x08	; 8
 9ac:	40 e0       	ldi	r20, 0x00	; 0
 9ae:	60 e6       	ldi	r22, 0x60	; 96
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	91 e0       	ldi	r25, 0x01	; 1
 9b4:	50 de       	rcall	.-864    	; 0x656 <moveSingleServo>
 9b6:	2f ef       	ldi	r18, 0xFF	; 255
 9b8:	8d e3       	ldi	r24, 0x3D	; 61
 9ba:	99 e4       	ldi	r25, 0x49	; 73
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	80 40       	sbci	r24, 0x00	; 0
 9c0:	90 40       	sbci	r25, 0x00	; 0
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <dropItem+0xa8>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <dropItem+0xb2>
 9c6:	00 00       	nop
	
	_delay_ms(1500);
	
	defaultPosition();
 9c8:	d5 de       	rcall	.-598    	; 0x774 <defaultPosition>
 9ca:	2f ef       	ldi	r18, 0xFF	; 255
 9cc:	87 e9       	ldi	r24, 0x97	; 151
 9ce:	9a e3       	ldi	r25, 0x3A	; 58
 9d0:	21 50       	subi	r18, 0x01	; 1
 9d2:	80 40       	sbci	r24, 0x00	; 0
 9d4:	90 40       	sbci	r25, 0x00	; 0
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <dropItem+0xbc>
 9d8:	00 c0       	rjmp	.+0      	; 0x9da <dropItem+0xc6>
 9da:	00 00       	nop
	
	_delay_ms(1200);
	
	TXFinishedDrop();
 9dc:	bf d1       	rcall	.+894    	; 0xd5c <TXFinishedDrop>
}
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	08 95       	ret

000009e4 <moveArm>:

/*Moves the arm according to armData byte. Byte received by communication module*/
void moveArm(uint8_t armData) {
 9e4:	0f 93       	push	r16
 9e6:	1f 93       	push	r17
	
	uint8_t joint = armData & 0x07;
	_Bool direction = (armData >> 4) & 0x01;
	_Bool amp = (armData >> 3) & 0x01;
	_Bool DPP = (armData >> 5) & 0x01;
	_Bool DTP = (armData >> 6) & 0x01;
 9e8:	86 fb       	bst	r24, 6
 9ea:	99 27       	eor	r25, r25
 9ec:	90 f9       	bld	r25, 0
	
	if (DPP)
 9ee:	85 ff       	sbrs	r24, 5
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <moveArm+0x12>
	{
		pickupDefaultPosition();
 9f2:	1b df       	rcall	.-458    	; 0x82a <pickupDefaultPosition>
 9f4:	7a c1       	rjmp	.+756    	; 0xcea <moveArm+0x306>
	}
	else if (DTP)
 9f6:	99 23       	and	r25, r25
 9f8:	39 f0       	breq	.+14     	; 0xa08 <moveArm+0x24>
	{
		
		TIMSK0 &= ~(1<<OCIE0A);
 9fa:	ee e6       	ldi	r30, 0x6E	; 110
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	8d 7f       	andi	r24, 0xFD	; 253
 a02:	80 83       	st	Z, r24
		
		defaultPosition();
 a04:	b7 de       	rcall	.-658    	; 0x774 <defaultPosition>
 a06:	71 c1       	rjmp	.+738    	; 0xcea <moveArm+0x306>
}

/*Moves the arm according to armData byte. Byte received by communication module*/
void moveArm(uint8_t armData) {
	
	uint8_t joint = armData & 0x07;
 a08:	98 2f       	mov	r25, r24
 a0a:	97 70       	andi	r25, 0x07	; 7
	_Bool direction = (armData >> 4) & 0x01;
 a0c:	84 fb       	bst	r24, 4
 a0e:	33 27       	eor	r19, r19
 a10:	30 f9       	bld	r19, 0
	_Bool amp = (armData >> 3) & 0x01;
 a12:	83 fb       	bst	r24, 3
 a14:	22 27       	eor	r18, r18
 a16:	20 f9       	bld	r18, 0
	}
	else
	{
		
		
		if (joint == 1)
 a18:	91 30       	cpi	r25, 0x01	; 1
 a1a:	91 f5       	brne	.+100    	; 0xa80 <moveArm+0x9c>
		{
			if (direction == 0 && (joint1_Pos - (10+40*amp)) > 0)
 a1c:	31 11       	cpse	r19, r1
 a1e:	18 c0       	rjmp	.+48     	; 0xa50 <moveArm+0x6c>
 a20:	38 ed       	ldi	r19, 0xD8	; 216
 a22:	32 03       	mulsu	r19, r18
 a24:	c0 01       	movw	r24, r0
 a26:	11 24       	eor	r1, r1
 a28:	20 91 08 01 	lds	r18, 0x0108
 a2c:	30 91 09 01 	lds	r19, 0x0109
 a30:	82 0f       	add	r24, r18
 a32:	93 1f       	adc	r25, r19
 a34:	8a 30       	cpi	r24, 0x0A	; 10
 a36:	91 05       	cpc	r25, r1
 a38:	09 f4       	brne	.+2      	; 0xa3c <moveArm+0x58>
 a3a:	57 c1       	rjmp	.+686    	; 0xcea <moveArm+0x306>
			{
				joint1_Pos -= (10+40*amp);
 a3c:	0a 97       	sbiw	r24, 0x0a	; 10
 a3e:	90 93 09 01 	sts	0x0109, r25
 a42:	80 93 08 01 	sts	0x0108, r24
				moveSingleServo(joint1_Pos, 0x50, 0x00, 0x01);
 a46:	21 e0       	ldi	r18, 0x01	; 1
 a48:	40 e0       	ldi	r20, 0x00	; 0
 a4a:	60 e5       	ldi	r22, 0x50	; 80
 a4c:	04 de       	rcall	.-1016   	; 0x656 <moveSingleServo>
 a4e:	4d c1       	rjmp	.+666    	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1 && (joint1_Pos + (10+40*amp)) < 1023)
 a50:	80 91 08 01 	lds	r24, 0x0108
 a54:	90 91 09 01 	lds	r25, 0x0109
 a58:	0a 96       	adiw	r24, 0x0a	; 10
 a5a:	48 e2       	ldi	r20, 0x28	; 40
 a5c:	24 9f       	mul	r18, r20
 a5e:	80 0d       	add	r24, r0
 a60:	91 1d       	adc	r25, r1
 a62:	11 24       	eor	r1, r1
 a64:	8f 3f       	cpi	r24, 0xFF	; 255
 a66:	23 e0       	ldi	r18, 0x03	; 3
 a68:	92 07       	cpc	r25, r18
 a6a:	08 f0       	brcs	.+2      	; 0xa6e <moveArm+0x8a>
 a6c:	3e c1       	rjmp	.+636    	; 0xcea <moveArm+0x306>
			{
				joint1_Pos += (10+40*amp);
 a6e:	90 93 09 01 	sts	0x0109, r25
 a72:	80 93 08 01 	sts	0x0108, r24
				moveSingleServo(joint1_Pos, 0x50, 0x00, 0x01);
 a76:	21 e0       	ldi	r18, 0x01	; 1
 a78:	40 e0       	ldi	r20, 0x00	; 0
 a7a:	60 e5       	ldi	r22, 0x50	; 80
 a7c:	ec dd       	rcall	.-1064   	; 0x656 <moveSingleServo>
 a7e:	35 c1       	rjmp	.+618    	; 0xcea <moveArm+0x306>
			}
		}
		else if(joint == 2)
 a80:	92 30       	cpi	r25, 0x02	; 2
 a82:	b1 f5       	brne	.+108    	; 0xaf0 <moveArm+0x10c>
		{
			if (direction == 0 && (joint2_Pos - (10+40*amp)) > 0xCD)
 a84:	31 11       	cpse	r19, r1
 a86:	1a c0       	rjmp	.+52     	; 0xabc <moveArm+0xd8>
 a88:	80 91 04 01 	lds	r24, 0x0104
 a8c:	90 91 05 01 	lds	r25, 0x0105
 a90:	0a 97       	sbiw	r24, 0x0a	; 10
 a92:	48 ed       	ldi	r20, 0xD8	; 216
 a94:	42 03       	mulsu	r20, r18
 a96:	90 01       	movw	r18, r0
 a98:	11 24       	eor	r1, r1
 a9a:	82 0f       	add	r24, r18
 a9c:	93 1f       	adc	r25, r19
 a9e:	8e 3c       	cpi	r24, 0xCE	; 206
 aa0:	91 05       	cpc	r25, r1
 aa2:	08 f4       	brcc	.+2      	; 0xaa6 <moveArm+0xc2>
 aa4:	22 c1       	rjmp	.+580    	; 0xcea <moveArm+0x306>
			{
				joint2_Pos -= (10+40*amp);
 aa6:	90 93 05 01 	sts	0x0105, r25
 aaa:	80 93 04 01 	sts	0x0104, r24
				moveDoubleServo(joint2_Pos, 0x50, 0x00, 0x02, 0x03);
 aae:	03 e0       	ldi	r16, 0x03	; 3
 ab0:	10 e0       	ldi	r17, 0x00	; 0
 ab2:	22 e0       	ldi	r18, 0x02	; 2
 ab4:	40 e0       	ldi	r20, 0x00	; 0
 ab6:	60 e5       	ldi	r22, 0x50	; 80
 ab8:	01 de       	rcall	.-1022   	; 0x6bc <moveDoubleServo>
 aba:	17 c1       	rjmp	.+558    	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1 && (joint2_Pos + (10+40*amp)) < 0x322)
 abc:	80 91 04 01 	lds	r24, 0x0104
 ac0:	90 91 05 01 	lds	r25, 0x0105
 ac4:	0a 96       	adiw	r24, 0x0a	; 10
 ac6:	38 e2       	ldi	r19, 0x28	; 40
 ac8:	23 9f       	mul	r18, r19
 aca:	80 0d       	add	r24, r0
 acc:	91 1d       	adc	r25, r1
 ace:	11 24       	eor	r1, r1
 ad0:	82 32       	cpi	r24, 0x22	; 34
 ad2:	43 e0       	ldi	r20, 0x03	; 3
 ad4:	94 07       	cpc	r25, r20
 ad6:	08 f0       	brcs	.+2      	; 0xada <moveArm+0xf6>
 ad8:	08 c1       	rjmp	.+528    	; 0xcea <moveArm+0x306>
			{
				joint2_Pos += (10+40*amp);
 ada:	90 93 05 01 	sts	0x0105, r25
 ade:	80 93 04 01 	sts	0x0104, r24
				moveDoubleServo(joint2_Pos, 0x50, 0x00, 0x02, 0x03);
 ae2:	03 e0       	ldi	r16, 0x03	; 3
 ae4:	10 e0       	ldi	r17, 0x00	; 0
 ae6:	22 e0       	ldi	r18, 0x02	; 2
 ae8:	40 e0       	ldi	r20, 0x00	; 0
 aea:	60 e5       	ldi	r22, 0x50	; 80
 aec:	e7 dd       	rcall	.-1074   	; 0x6bc <moveDoubleServo>
 aee:	fd c0       	rjmp	.+506    	; 0xcea <moveArm+0x306>
			}
		}
		else if(joint == 3)
 af0:	93 30       	cpi	r25, 0x03	; 3
 af2:	b1 f5       	brne	.+108    	; 0xb60 <moveArm+0x17c>
		{
			if (direction == 0 && (joint3_Pos - (10+40*amp)) > 0xCD)
 af4:	31 11       	cpse	r19, r1
 af6:	1a c0       	rjmp	.+52     	; 0xb2c <moveArm+0x148>
 af8:	80 91 16 01 	lds	r24, 0x0116
 afc:	90 91 17 01 	lds	r25, 0x0117
 b00:	0a 97       	sbiw	r24, 0x0a	; 10
 b02:	48 ed       	ldi	r20, 0xD8	; 216
 b04:	42 03       	mulsu	r20, r18
 b06:	90 01       	movw	r18, r0
 b08:	11 24       	eor	r1, r1
 b0a:	82 0f       	add	r24, r18
 b0c:	93 1f       	adc	r25, r19
 b0e:	8e 3c       	cpi	r24, 0xCE	; 206
 b10:	91 05       	cpc	r25, r1
 b12:	08 f4       	brcc	.+2      	; 0xb16 <moveArm+0x132>
 b14:	ea c0       	rjmp	.+468    	; 0xcea <moveArm+0x306>
			{
				joint3_Pos -= (10+40*amp);
 b16:	90 93 17 01 	sts	0x0117, r25
 b1a:	80 93 16 01 	sts	0x0116, r24
				moveDoubleServo(joint3_Pos, 0x50, 0x00, 0x04, 0x05);
 b1e:	05 e0       	ldi	r16, 0x05	; 5
 b20:	10 e0       	ldi	r17, 0x00	; 0
 b22:	24 e0       	ldi	r18, 0x04	; 4
 b24:	40 e0       	ldi	r20, 0x00	; 0
 b26:	60 e5       	ldi	r22, 0x50	; 80
 b28:	c9 dd       	rcall	.-1134   	; 0x6bc <moveDoubleServo>
 b2a:	df c0       	rjmp	.+446    	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1 && (joint3_Pos + (10+40*amp)) < 0x322)
 b2c:	80 91 16 01 	lds	r24, 0x0116
 b30:	90 91 17 01 	lds	r25, 0x0117
 b34:	0a 96       	adiw	r24, 0x0a	; 10
 b36:	38 e2       	ldi	r19, 0x28	; 40
 b38:	23 9f       	mul	r18, r19
 b3a:	80 0d       	add	r24, r0
 b3c:	91 1d       	adc	r25, r1
 b3e:	11 24       	eor	r1, r1
 b40:	82 32       	cpi	r24, 0x22	; 34
 b42:	43 e0       	ldi	r20, 0x03	; 3
 b44:	94 07       	cpc	r25, r20
 b46:	08 f0       	brcs	.+2      	; 0xb4a <moveArm+0x166>
 b48:	d0 c0       	rjmp	.+416    	; 0xcea <moveArm+0x306>
			{
				joint3_Pos += (10+40*amp);
 b4a:	90 93 17 01 	sts	0x0117, r25
 b4e:	80 93 16 01 	sts	0x0116, r24
				moveDoubleServo(joint3_Pos, 0x50, 0x00, 0x04, 0x05);
 b52:	05 e0       	ldi	r16, 0x05	; 5
 b54:	10 e0       	ldi	r17, 0x00	; 0
 b56:	24 e0       	ldi	r18, 0x04	; 4
 b58:	40 e0       	ldi	r20, 0x00	; 0
 b5a:	60 e5       	ldi	r22, 0x50	; 80
 b5c:	af dd       	rcall	.-1186   	; 0x6bc <moveDoubleServo>
 b5e:	c5 c0       	rjmp	.+394    	; 0xcea <moveArm+0x306>
			}
		}
		else if (joint == 4)
 b60:	94 30       	cpi	r25, 0x04	; 4
 b62:	91 f5       	brne	.+100    	; 0xbc8 <moveArm+0x1e4>
		{
			if (direction == 0 && (joint4_Pos - (10+40*amp)) > 0)
 b64:	31 11       	cpse	r19, r1
 b66:	18 c0       	rjmp	.+48     	; 0xb98 <moveArm+0x1b4>
 b68:	38 ed       	ldi	r19, 0xD8	; 216
 b6a:	32 03       	mulsu	r19, r18
 b6c:	c0 01       	movw	r24, r0
 b6e:	11 24       	eor	r1, r1
 b70:	40 91 1f 01 	lds	r20, 0x011F
 b74:	50 91 20 01 	lds	r21, 0x0120
 b78:	84 0f       	add	r24, r20
 b7a:	95 1f       	adc	r25, r21
 b7c:	8a 30       	cpi	r24, 0x0A	; 10
 b7e:	91 05       	cpc	r25, r1
 b80:	09 f4       	brne	.+2      	; 0xb84 <moveArm+0x1a0>
 b82:	b3 c0       	rjmp	.+358    	; 0xcea <moveArm+0x306>
			{
				joint4_Pos -= (10+40*amp);
 b84:	0a 97       	sbiw	r24, 0x0a	; 10
 b86:	90 93 20 01 	sts	0x0120, r25
 b8a:	80 93 1f 01 	sts	0x011F, r24
				moveSingleServo(joint4_Pos, 0x50, 0x00, 0x06);
 b8e:	26 e0       	ldi	r18, 0x06	; 6
 b90:	40 e0       	ldi	r20, 0x00	; 0
 b92:	60 e5       	ldi	r22, 0x50	; 80
 b94:	60 dd       	rcall	.-1344   	; 0x656 <moveSingleServo>
 b96:	a9 c0       	rjmp	.+338    	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1 && (joint4_Pos + (10+40*amp)) < 818)
 b98:	80 91 1f 01 	lds	r24, 0x011F
 b9c:	90 91 20 01 	lds	r25, 0x0120
 ba0:	0a 96       	adiw	r24, 0x0a	; 10
 ba2:	48 e2       	ldi	r20, 0x28	; 40
 ba4:	24 9f       	mul	r18, r20
 ba6:	80 0d       	add	r24, r0
 ba8:	91 1d       	adc	r25, r1
 baa:	11 24       	eor	r1, r1
 bac:	82 33       	cpi	r24, 0x32	; 50
 bae:	23 e0       	ldi	r18, 0x03	; 3
 bb0:	92 07       	cpc	r25, r18
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <moveArm+0x1d2>
 bb4:	9a c0       	rjmp	.+308    	; 0xcea <moveArm+0x306>
			{
				joint4_Pos += (10+40*amp);
 bb6:	90 93 20 01 	sts	0x0120, r25
 bba:	80 93 1f 01 	sts	0x011F, r24
				moveSingleServo(joint4_Pos, 0x50, 0x00, 0x06);
 bbe:	26 e0       	ldi	r18, 0x06	; 6
 bc0:	40 e0       	ldi	r20, 0x00	; 0
 bc2:	60 e5       	ldi	r22, 0x50	; 80
 bc4:	48 dd       	rcall	.-1392   	; 0x656 <moveSingleServo>
 bc6:	91 c0       	rjmp	.+290    	; 0xcea <moveArm+0x306>
			}
		}
		else if (joint == 5)
 bc8:	95 30       	cpi	r25, 0x05	; 5
 bca:	a1 f5       	brne	.+104    	; 0xc34 <moveArm+0x250>
		{
			if (direction == 0 && (joint5_Pos - (10+40*amp)) > 0)
 bcc:	31 11       	cpse	r19, r1
 bce:	18 c0       	rjmp	.+48     	; 0xc00 <moveArm+0x21c>
 bd0:	38 ed       	ldi	r19, 0xD8	; 216
 bd2:	32 03       	mulsu	r19, r18
 bd4:	c0 01       	movw	r24, r0
 bd6:	11 24       	eor	r1, r1
 bd8:	40 91 1d 01 	lds	r20, 0x011D
 bdc:	50 91 1e 01 	lds	r21, 0x011E
 be0:	84 0f       	add	r24, r20
 be2:	95 1f       	adc	r25, r21
 be4:	8a 30       	cpi	r24, 0x0A	; 10
 be6:	91 05       	cpc	r25, r1
 be8:	09 f4       	brne	.+2      	; 0xbec <moveArm+0x208>
 bea:	7f c0       	rjmp	.+254    	; 0xcea <moveArm+0x306>
			{
				joint5_Pos -= (10+40*amp);
 bec:	0a 97       	sbiw	r24, 0x0a	; 10
 bee:	90 93 1e 01 	sts	0x011E, r25
 bf2:	80 93 1d 01 	sts	0x011D, r24
				moveSingleServo(joint5_Pos, 0x50, 0x00, 0x07);
 bf6:	27 e0       	ldi	r18, 0x07	; 7
 bf8:	40 e0       	ldi	r20, 0x00	; 0
 bfa:	60 e5       	ldi	r22, 0x50	; 80
 bfc:	2c dd       	rcall	.-1448   	; 0x656 <moveSingleServo>
 bfe:	75 c0       	rjmp	.+234    	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1 && (joint5_Pos + (10+40*amp)) < 1023)
 c00:	40 91 1d 01 	lds	r20, 0x011D
 c04:	50 91 1e 01 	lds	r21, 0x011E
 c08:	46 5f       	subi	r20, 0xF6	; 246
 c0a:	5f 4f       	sbci	r21, 0xFF	; 255
 c0c:	ca 01       	movw	r24, r20
 c0e:	38 e2       	ldi	r19, 0x28	; 40
 c10:	23 9f       	mul	r18, r19
 c12:	80 0d       	add	r24, r0
 c14:	91 1d       	adc	r25, r1
 c16:	11 24       	eor	r1, r1
 c18:	8f 3f       	cpi	r24, 0xFF	; 255
 c1a:	43 e0       	ldi	r20, 0x03	; 3
 c1c:	94 07       	cpc	r25, r20
 c1e:	08 f0       	brcs	.+2      	; 0xc22 <moveArm+0x23e>
 c20:	64 c0       	rjmp	.+200    	; 0xcea <moveArm+0x306>
			{
				joint5_Pos += (10+40*amp);
 c22:	90 93 1e 01 	sts	0x011E, r25
 c26:	80 93 1d 01 	sts	0x011D, r24
				moveSingleServo(joint5_Pos, 0x50, 0x00, 0x07);
 c2a:	27 e0       	ldi	r18, 0x07	; 7
 c2c:	40 e0       	ldi	r20, 0x00	; 0
 c2e:	60 e5       	ldi	r22, 0x50	; 80
 c30:	12 dd       	rcall	.-1500   	; 0x656 <moveSingleServo>
 c32:	5b c0       	rjmp	.+182    	; 0xcea <moveArm+0x306>
			}
		}
		else if (joint == 6)
 c34:	96 30       	cpi	r25, 0x06	; 6
 c36:	09 f0       	breq	.+2      	; 0xc3a <moveArm+0x256>
 c38:	58 c0       	rjmp	.+176    	; 0xcea <moveArm+0x306>
		{
			if (direction == 0 && amp == 0)
 c3a:	31 11       	cpse	r19, r1
 c3c:	50 c0       	rjmp	.+160    	; 0xcde <moveArm+0x2fa>
 c3e:	21 11       	cpse	r18, r1
 c40:	27 c0       	rjmp	.+78     	; 0xc90 <moveArm+0x2ac>
			{
				moveSingleServo(0xBB, 0x50, 0x00, 0x08); //Grip narrow
 c42:	28 e0       	ldi	r18, 0x08	; 8
 c44:	40 e0       	ldi	r20, 0x00	; 0
 c46:	60 e5       	ldi	r22, 0x50	; 80
 c48:	8b eb       	ldi	r24, 0xBB	; 187
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	04 dd       	rcall	.-1528   	; 0x656 <moveSingleServo>
				dropJoint2Pos = joint2_Pos;
 c4e:	80 91 04 01 	lds	r24, 0x0104
 c52:	90 91 05 01 	lds	r25, 0x0105
 c56:	90 93 02 01 	sts	0x0102, r25
 c5a:	80 93 01 01 	sts	0x0101, r24
				dropJoint3Pos = joint3_Pos;
 c5e:	80 91 16 01 	lds	r24, 0x0116
 c62:	90 91 17 01 	lds	r25, 0x0117
 c66:	90 93 0b 01 	sts	0x010B, r25
 c6a:	80 93 0a 01 	sts	0x010A, r24
				dropJoint4Pos = joint4_Pos;
 c6e:	80 91 1f 01 	lds	r24, 0x011F
 c72:	90 91 20 01 	lds	r25, 0x0120
 c76:	90 93 0e 01 	sts	0x010E, r25
 c7a:	80 93 0d 01 	sts	0x010D, r24
				dropJoint5Pos = joint5_Pos;
 c7e:	80 91 1d 01 	lds	r24, 0x011D
 c82:	90 91 1e 01 	lds	r25, 0x011E
 c86:	90 93 22 01 	sts	0x0122, r25
 c8a:	80 93 21 01 	sts	0x0121, r24
 c8e:	2d c0       	rjmp	.+90     	; 0xcea <moveArm+0x306>
				
			}
			else if (direction == 0 && amp == 1)
			{
				moveSingleServo(0x12C, 0x50, 0x00, 0x08); //Grip broad
 c90:	28 e0       	ldi	r18, 0x08	; 8
 c92:	40 e0       	ldi	r20, 0x00	; 0
 c94:	60 e5       	ldi	r22, 0x50	; 80
 c96:	8c e2       	ldi	r24, 0x2C	; 44
 c98:	91 e0       	ldi	r25, 0x01	; 1
 c9a:	dd dc       	rcall	.-1606   	; 0x656 <moveSingleServo>
				dropJoint2Pos = joint2_Pos;
 c9c:	80 91 04 01 	lds	r24, 0x0104
 ca0:	90 91 05 01 	lds	r25, 0x0105
 ca4:	90 93 02 01 	sts	0x0102, r25
 ca8:	80 93 01 01 	sts	0x0101, r24
				dropJoint3Pos = joint3_Pos;
 cac:	80 91 16 01 	lds	r24, 0x0116
 cb0:	90 91 17 01 	lds	r25, 0x0117
 cb4:	90 93 0b 01 	sts	0x010B, r25
 cb8:	80 93 0a 01 	sts	0x010A, r24
				dropJoint4Pos = joint4_Pos;
 cbc:	80 91 1f 01 	lds	r24, 0x011F
 cc0:	90 91 20 01 	lds	r25, 0x0120
 cc4:	90 93 0e 01 	sts	0x010E, r25
 cc8:	80 93 0d 01 	sts	0x010D, r24
				dropJoint5Pos = joint5_Pos;
 ccc:	80 91 1d 01 	lds	r24, 0x011D
 cd0:	90 91 1e 01 	lds	r25, 0x011E
 cd4:	90 93 22 01 	sts	0x0122, r25
 cd8:	80 93 21 01 	sts	0x0121, r24
 cdc:	06 c0       	rjmp	.+12     	; 0xcea <moveArm+0x306>
			}
			else if(direction == 1)
			{
				moveSingleServo(0x1FF, 0x50, 0x00, 0x08); //Release
 cde:	28 e0       	ldi	r18, 0x08	; 8
 ce0:	40 e0       	ldi	r20, 0x00	; 0
 ce2:	60 e5       	ldi	r22, 0x50	; 80
 ce4:	8f ef       	ldi	r24, 0xFF	; 255
 ce6:	91 e0       	ldi	r25, 0x01	; 1
 ce8:	b6 dc       	rcall	.-1684   	; 0x656 <moveSingleServo>
			}
		}
	}
}
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	08 95       	ret

00000cf0 <updateServos>:

/*Updating the servo positions. Avoiding servos being tired*/
void updateServos()
{
 cf0:	0f 93       	push	r16
 cf2:	1f 93       	push	r17
		moveSingleServo(joint1_Pos, 0x30, 0x00, 0x01);
 cf4:	21 e0       	ldi	r18, 0x01	; 1
 cf6:	40 e0       	ldi	r20, 0x00	; 0
 cf8:	60 e3       	ldi	r22, 0x30	; 48
 cfa:	80 91 08 01 	lds	r24, 0x0108
 cfe:	90 91 09 01 	lds	r25, 0x0109
 d02:	a9 dc       	rcall	.-1710   	; 0x656 <moveSingleServo>
		moveDoubleServo(joint2_Pos, 0x30, 0x00, 0x02, 0x03);
 d04:	03 e0       	ldi	r16, 0x03	; 3
 d06:	10 e0       	ldi	r17, 0x00	; 0
 d08:	22 e0       	ldi	r18, 0x02	; 2
 d0a:	40 e0       	ldi	r20, 0x00	; 0
 d0c:	60 e3       	ldi	r22, 0x30	; 48
 d0e:	80 91 04 01 	lds	r24, 0x0104
 d12:	90 91 05 01 	lds	r25, 0x0105
 d16:	d2 dc       	rcall	.-1628   	; 0x6bc <moveDoubleServo>
		moveDoubleServo(joint3_Pos, 0x30, 0x00, 0x04, 0x05);
 d18:	05 e0       	ldi	r16, 0x05	; 5
 d1a:	10 e0       	ldi	r17, 0x00	; 0
 d1c:	24 e0       	ldi	r18, 0x04	; 4
 d1e:	40 e0       	ldi	r20, 0x00	; 0
 d20:	60 e3       	ldi	r22, 0x30	; 48
 d22:	80 91 16 01 	lds	r24, 0x0116
 d26:	90 91 17 01 	lds	r25, 0x0117
 d2a:	c8 dc       	rcall	.-1648   	; 0x6bc <moveDoubleServo>
		moveSingleServo(joint4_Pos, 0x30, 0x00, 0x06);
 d2c:	26 e0       	ldi	r18, 0x06	; 6
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	60 e3       	ldi	r22, 0x30	; 48
 d32:	80 91 1f 01 	lds	r24, 0x011F
 d36:	90 91 20 01 	lds	r25, 0x0120
 d3a:	8d dc       	rcall	.-1766   	; 0x656 <moveSingleServo>
 d3c:	1f 91       	pop	r17
 d3e:	0f 91       	pop	r16
 d40:	08 95       	ret

00000d42 <SPIInitSlave>:
#include "slaveControl.h"

/*Initializes the AVR as a slave*/
void SPIInitSlave()
{
	waitingForInstruction = 1;
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	80 93 1c 01 	sts	0x011C, r24
	DDRB = 0x48;	
 d48:	88 e4       	ldi	r24, 0x48	; 72
 d4a:	84 b9       	out	0x04, r24	; 4
	SPCR = 0xC3;		
 d4c:	83 ec       	ldi	r24, 0xC3	; 195
 d4e:	8c bd       	out	0x2c, r24	; 44
	sei(); 
 d50:	78 94       	sei
 d52:	08 95       	ret

00000d54 <slaveTX>:
}

/*Transmits a byte via SPI to Master*/
void slaveTX(uint8_t data)
{
	SPDR = data;
 d54:	8e bd       	out	0x2e, r24	; 46
	PORTB |= (1 << PORTB3); // Sets INT_Req high. I.e throws interrupt.
 d56:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~(1 << PORTB3); // Sets INT_Req low. Interrupt finished.
 d58:	2b 98       	cbi	0x05, 3	; 5
 d5a:	08 95       	ret

00000d5c <TXFinishedDrop>:
}

/*Tells communication AVR that drop of is finished*/
void TXFinishedDrop()
{
	slaveTX(1);
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	fa cf       	rjmp	.-12     	; 0xd54 <slaveTX>

00000d60 <_exit>:
 d60:	f8 94       	cli

00000d62 <__stop_program>:
 d62:	ff cf       	rjmp	.-2      	; 0xd62 <__stop_program>
