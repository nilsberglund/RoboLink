
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b42  00000bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00000bd6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001715  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000511  00000000  00000000  00002bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d48  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f4  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ee  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000120f  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  00005809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	30 c0       	rjmp	.+96     	; 0xae <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 31       	cpi	r26, 0x1C	; 28
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9c d0       	rcall	.+312    	; 0x1e2 <main>
  aa:	49 c5       	rjmp	.+2706   	; 0xb3e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_19>:
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	80 93 0c 01 	sts	0x010C, r24
  da:	80 91 15 01 	lds	r24, 0x0115
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	99 f5       	brne	.+102    	; 0x148 <__vector_19+0x9a>
  e2:	10 92 15 01 	sts	0x0115, r1
  e6:	80 91 0c 01 	lds	r24, 0x010C
  ea:	84 38       	cpi	r24, 0x84	; 132
  ec:	21 f4       	brne	.+8      	; 0xf6 <__vector_19+0x48>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 04 01 	sts	0x0104, r24
  f4:	63 c0       	rjmp	.+198    	; 0x1bc <__vector_19+0x10e>
  f6:	80 91 0c 01 	lds	r24, 0x010C
  fa:	85 38       	cpi	r24, 0x85	; 133
  fc:	21 f4       	brne	.+8      	; 0x106 <__vector_19+0x58>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 04 01 	sts	0x0104, r24
 104:	5b c0       	rjmp	.+182    	; 0x1bc <__vector_19+0x10e>
 106:	80 91 0c 01 	lds	r24, 0x010C
 10a:	86 38       	cpi	r24, 0x86	; 134
 10c:	21 f4       	brne	.+8      	; 0x116 <__vector_19+0x68>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 04 01 	sts	0x0104, r24
 114:	53 c0       	rjmp	.+166    	; 0x1bc <__vector_19+0x10e>
 116:	80 91 0c 01 	lds	r24, 0x010C
 11a:	87 38       	cpi	r24, 0x87	; 135
 11c:	21 f4       	brne	.+8      	; 0x126 <__vector_19+0x78>
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 04 01 	sts	0x0104, r24
 124:	4b c0       	rjmp	.+150    	; 0x1bc <__vector_19+0x10e>
 126:	80 91 0c 01 	lds	r24, 0x010C
 12a:	8b 38       	cpi	r24, 0x8B	; 139
 12c:	21 f4       	brne	.+8      	; 0x136 <__vector_19+0x88>
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	80 93 04 01 	sts	0x0104, r24
 134:	43 c0       	rjmp	.+134    	; 0x1bc <__vector_19+0x10e>
 136:	80 91 0c 01 	lds	r24, 0x010C
 13a:	8f 38       	cpi	r24, 0x8F	; 143
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_19+0x92>
 13e:	3e c0       	rjmp	.+124    	; 0x1bc <__vector_19+0x10e>
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 04 01 	sts	0x0104, r24
 146:	3a c0       	rjmp	.+116    	; 0x1bc <__vector_19+0x10e>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 15 01 	sts	0x0115, r24
 14e:	80 91 04 01 	lds	r24, 0x0104
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	31 f4       	brne	.+12     	; 0x162 <__vector_19+0xb4>
 156:	80 91 0c 01 	lds	r24, 0x010C
 15a:	80 93 09 01 	sts	0x0109, r24
 15e:	08 d1       	rcall	.+528    	; 0x370 <controlAlgorithm>
 160:	2d c0       	rjmp	.+90     	; 0x1bc <__vector_19+0x10e>
 162:	80 91 04 01 	lds	r24, 0x0104
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	41 f4       	brne	.+16     	; 0x17a <__vector_19+0xcc>
 16a:	80 91 0c 01 	lds	r24, 0x010C
 16e:	80 93 08 01 	sts	0x0108, r24
 172:	80 91 08 01 	lds	r24, 0x0108
 176:	7e d3       	rcall	.+1788   	; 0x874 <moveArm>
 178:	21 c0       	rjmp	.+66     	; 0x1bc <__vector_19+0x10e>
 17a:	80 91 04 01 	lds	r24, 0x0104
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	31 f4       	brne	.+12     	; 0x18e <__vector_19+0xe0>
 182:	80 91 0c 01 	lds	r24, 0x010C
 186:	80 93 0a 01 	sts	0x010A, r24
 18a:	a4 d1       	rcall	.+840    	; 0x4d4 <moveRobot>
 18c:	17 c0       	rjmp	.+46     	; 0x1bc <__vector_19+0x10e>
 18e:	80 91 04 01 	lds	r24, 0x0104
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	21 f4       	brne	.+8      	; 0x19e <__vector_19+0xf0>
 196:	80 91 0c 01 	lds	r24, 0x010C
 19a:	e5 d1       	rcall	.+970    	; 0x566 <changeProportional>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <__vector_19+0x10e>
 19e:	80 91 04 01 	lds	r24, 0x0104
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	21 f4       	brne	.+8      	; 0x1ae <__vector_19+0x100>
 1a6:	80 91 0c 01 	lds	r24, 0x010C
 1aa:	e0 d1       	rcall	.+960    	; 0x56c <changeDerivative>
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <__vector_19+0x10e>
 1ae:	80 91 04 01 	lds	r24, 0x0104
 1b2:	86 30       	cpi	r24, 0x06	; 6
 1b4:	19 f4       	brne	.+6      	; 0x1bc <__vector_19+0x10e>
 1b6:	80 91 0c 01 	lds	r24, 0x010C
 1ba:	07 d3       	rcall	.+1550   	; 0x7ca <dropItem>
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0b be       	out	0x3b, r0	; 59
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <main>:
 1e2:	9e d4       	rcall	.+2364   	; 0xb20 <SPIInitSlave>
 1e4:	91 d0       	rcall	.+290    	; 0x308 <drivingSetup>
 1e6:	a6 d2       	rcall	.+1356   	; 0x734 <armInit>
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0x6>

000001ea <getError>:
#include "Slave_control.h"
#include <stdlib.h>

/*Function that calculates the line error*/
int8_t getError()
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <getError+0x6>
 1f0:	1f 92       	push	r1
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t res = 0; 
 1f6:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t sum = 0; // Sum of all data from active sensors (1,..,7)
 1f8:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0; // Counter which counts number of sensors activated 
 1fa:	1b 82       	std	Y+3, r1	; 0x03
	error = 0; // Error from line
 1fc:	10 92 11 01 	sts	0x0111, r1
	uint8_t lineData; 
	lineData = sensorData;
 200:	40 91 09 01 	lds	r20, 0x0109
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((lineData >> noShift) & 0x01);
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	9a 01       	movw	r18, r20
 20c:	08 2e       	mov	r0, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <getError+0x2a>
 210:	35 95       	asr	r19
 212:	27 95       	ror	r18
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <getError+0x26>
 218:	21 70       	andi	r18, 0x01	; 1
 21a:	33 27       	eor	r19, r19
 21c:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	21 30       	cpi	r18, 0x01	; 1
 222:	39 f4       	brne	.+14     	; 0x232 <getError+0x48>
		{
			sum = sum + (7 - noShift);
 224:	2a 81       	ldd	r18, Y+2	; 0x02
 226:	29 5f       	subi	r18, 0xF9	; 249
 228:	28 1b       	sub	r18, r24
 22a:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 22c:	2b 81       	ldd	r18, Y+3	; 0x03
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	2b 83       	std	Y+3, r18	; 0x03
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	50 f7       	brcc	.-44     	; 0x20a <getError+0x20>
		}
	}
	if(counter1 == 1)
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	39 f4       	brne	.+14     	; 0x24a <getError+0x60>
	{
		error = sum + (sum-1);
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	89 0f       	add	r24, r25
 242:	81 50       	subi	r24, 0x01	; 1
 244:	80 93 11 01 	sts	0x0111, r24
 248:	22 c0       	rjmp	.+68     	; 0x28e <getError+0xa4>
	} else if(counter1 == 2)
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	29 f4       	brne	.+10     	; 0x25a <getError+0x70>

	{
		error = sum-1;
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	81 50       	subi	r24, 0x01	; 1
 254:	80 93 11 01 	sts	0x0111, r24
 258:	1a c0       	rjmp	.+52     	; 0x28e <getError+0xa4>
	} else if(counter1 == 3)
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	a1 f4       	brne	.+40     	; 0x288 <getError+0x9e>
	{
		error = sum*2;
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	88 0f       	add	r24, r24
 264:	80 93 11 01 	sts	0x0111, r24
		error = error/(0b00000011);
 268:	80 91 11 01 	lds	r24, 0x0111
 26c:	96 e5       	ldi	r25, 0x56	; 86
 26e:	89 02       	muls	r24, r25
 270:	91 2d       	mov	r25, r1
 272:	11 24       	eor	r1, r1
 274:	87 fd       	sbrc	r24, 7
 276:	93 95       	inc	r25
 278:	90 93 11 01 	sts	0x0111, r25
		error = error - 1;
 27c:	80 91 11 01 	lds	r24, 0x0111
 280:	81 50       	subi	r24, 0x01	; 1
 282:	80 93 11 01 	sts	0x0111, r24
 286:	03 c0       	rjmp	.+6      	; 0x28e <getError+0xa4>
// 			error = 50;
// 		} 
// 	} 	
	 else
	{
		error = -8;
 288:	88 ef       	ldi	r24, 0xF8	; 248
 28a:	80 93 11 01 	sts	0x0111, r24
	}
	error = 7 - error;
 28e:	90 91 11 01 	lds	r25, 0x0111
 292:	87 e0       	ldi	r24, 0x07	; 7
 294:	89 1b       	sub	r24, r25
 296:	80 93 11 01 	sts	0x0111, r24
	return error;
 29a:	80 91 11 01 	lds	r24, 0x0111
}
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <calculateSpeed>:
	}
}

/* function that calculates the speed */
int8_t calculateSpeed(int8_t error)
{
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <calculateSpeed+0x8>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 2b6:	1a 82       	std	Y+2, r1	; 0x02
 2b8:	19 82       	std	Y+1, r1	; 0x01
	
	speed = Kp * error + Kd * (error - prevError);
 2ba:	28 2f       	mov	r18, r24
 2bc:	33 27       	eor	r19, r19
 2be:	27 fd       	sbrc	r18, 7
 2c0:	30 95       	com	r19
 2c2:	40 91 13 01 	lds	r20, 0x0113
 2c6:	42 03       	mulsu	r20, r18
 2c8:	b0 01       	movw	r22, r0
 2ca:	43 9f       	mul	r20, r19
 2cc:	70 0d       	add	r23, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	10 91 0d 01 	lds	r17, 0x010D
 2d4:	90 91 07 01 	lds	r25, 0x0107
 2d8:	29 1b       	sub	r18, r25
 2da:	31 09       	sbc	r19, r1
 2dc:	97 fd       	sbrc	r25, 7
 2de:	33 95       	inc	r19
 2e0:	12 03       	mulsu	r17, r18
 2e2:	a0 01       	movw	r20, r0
 2e4:	13 9f       	mul	r17, r19
 2e6:	50 0d       	add	r21, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	9b 01       	movw	r18, r22
 2ec:	24 0f       	add	r18, r20
 2ee:	35 1f       	adc	r19, r21
 2f0:	3a 83       	std	Y+2, r19	; 0x02
 2f2:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 2f4:	80 93 07 01 	sts	0x0107, r24
	return speed;
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	08 95       	ret

00000308 <drivingSetup>:

/* function initiates driving */
void drivingSetup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 308:	81 ef       	ldi	r24, 0xF1	; 241
 30a:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 128
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //Starts the timer
 314:	10 92 85 00 	sts	0x0085, r1
 318:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 255; //Sets compare register => Robot does not move
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 89 00 	sts	0x0089, r25
 324:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 255; // Sets compare register => Robot does not move
 328:	90 93 8b 00 	sts	0x008B, r25
 32c:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7); //Sets the data direction for the PWM and direction ports. 
 330:	8a b1       	in	r24, 0x0a	; 10
 332:	80 6f       	ori	r24, 0xF0	; 240
 334:	8a b9       	out	0x0a, r24	; 10
	numberOfStopRequests = 0;
 336:	10 92 10 01 	sts	0x0110, r1
	Kp = 20;
 33a:	84 e1       	ldi	r24, 0x14	; 20
 33c:	80 93 13 01 	sts	0x0113, r24
	Kd = 5;
 340:	85 e0       	ldi	r24, 0x05	; 5
 342:	80 93 0d 01 	sts	0x010D, r24
 346:	08 95       	ret

00000348 <drive>:

/* Function that controls both direction and speed of the motors. 
	rightDir, leftDir = 1 => Forward. rightDir, leftDir = 0 => Backward. */
void drive(int rightDir, int leftDir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(rightDir == 1)
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	11 f4       	brne	.+4      	; 0x350 <drive+0x8>
	{
		PORTD &= ~(1 << PORTD7);
 34c:	5f 98       	cbi	0x0b, 7	; 11
 34e:	01 c0       	rjmp	.+2      	; 0x352 <drive+0xa>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 350:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(leftDir == 1)
 352:	61 30       	cpi	r22, 0x01	; 1
 354:	71 05       	cpc	r23, r1
 356:	11 f4       	brne	.+4      	; 0x35c <drive+0x14>
	{
		PORTD |= (1 << PORTD6);
 358:	5e 9a       	sbi	0x0b, 6	; 11
 35a:	01 c0       	rjmp	.+2      	; 0x35e <drive+0x16>
	}
	else
	{
		PORTD &= ~(1 << PORTD6);
 35c:	5e 98       	cbi	0x0b, 6	; 11
	}
	OCR1A = rightSpeed;
 35e:	30 93 89 00 	sts	0x0089, r19
 362:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 366:	50 93 8b 00 	sts	0x008B, r21
 36a:	40 93 8a 00 	sts	0x008A, r20
 36e:	08 95       	ret

00000370 <controlAlgorithm>:
}

/* Function that controls the robot movement when following a line */
void controlAlgorithm()
{
	error = getError();
 370:	3c df       	rcall	.-392    	; 0x1ea <getError>
 372:	80 93 11 01 	sts	0x0111, r24
		
	if(error == 15)  // No sensors activated
 376:	80 91 11 01 	lds	r24, 0x0111
 37a:	8f 30       	cpi	r24, 0x0F	; 15
 37c:	99 f4       	brne	.+38     	; 0x3a4 <controlAlgorithm+0x34>
	{
		rightWheelSpeed = rightWheelSpeed; 
 37e:	80 91 03 01 	lds	r24, 0x0103
 382:	80 93 03 01 	sts	0x0103, r24
		leftWheelSpeed = leftWheelSpeed;
 386:	80 91 00 01 	lds	r24, 0x0100
 38a:	80 93 00 01 	sts	0x0100, r24
		drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 38e:	20 91 03 01 	lds	r18, 0x0103
 392:	40 91 00 01 	lds	r20, 0x0100
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	d2 cf       	rjmp	.-92     	; 0x348 <drive>
// 	{
// 		stop(); //4 or 5 sensors on either side activated, indicates station. Will make the robot stop.
// 	}	
	else
	{	
		midSpeed = 80;  //Standard speed
 3a4:	80 e5       	ldi	r24, 0x50	; 80
 3a6:	80 93 12 01 	sts	0x0112, r24
		int16_t speed = calculateSpeed(error);  //calculate new speed 
 3aa:	80 91 11 01 	lds	r24, 0x0111
 3ae:	7d df       	rcall	.-262    	; 0x2aa <calculateSpeed>
 3b0:	28 2f       	mov	r18, r24
 3b2:	33 27       	eor	r19, r19
 3b4:	27 fd       	sbrc	r18, 7
 3b6:	30 95       	com	r19
		if ((midSpeed-speed) < 10)
 3b8:	90 91 12 01 	lds	r25, 0x0112
 3bc:	49 2f       	mov	r20, r25
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	42 1b       	sub	r20, r18
 3c2:	53 0b       	sbc	r21, r19
 3c4:	4a 30       	cpi	r20, 0x0A	; 10
 3c6:	51 05       	cpc	r21, r1
 3c8:	3c f4       	brge	.+14     	; 0x3d8 <controlAlgorithm+0x68>
		{
			rightWheelSpeed = 3;
 3ca:	93 e0       	ldi	r25, 0x03	; 3
 3cc:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 1;
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	90 93 14 01 	sts	0x0114, r25
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <controlAlgorithm+0x86>
		}
		else if ((midSpeed-speed) > 235)
 3d8:	4c 3e       	cpi	r20, 0xEC	; 236
 3da:	51 05       	cpc	r21, r1
 3dc:	34 f0       	brlt	.+12     	; 0x3ea <controlAlgorithm+0x7a>
		{
			rightWheelSpeed = 100;
 3de:	94 e6       	ldi	r25, 0x64	; 100
 3e0:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 0;
 3e4:	10 92 14 01 	sts	0x0114, r1
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <controlAlgorithm+0x86>
		}
		else
		{
			rightWheelSpeed = midSpeed - speed;
 3ea:	98 1b       	sub	r25, r24
 3ec:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 1;
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	90 93 14 01 	sts	0x0114, r25
		}
		
		if ((midSpeed+speed) < 10)
 3f6:	90 91 12 01 	lds	r25, 0x0112
 3fa:	29 0f       	add	r18, r25
 3fc:	31 1d       	adc	r19, r1
 3fe:	2a 30       	cpi	r18, 0x0A	; 10
 400:	31 05       	cpc	r19, r1
 402:	3c f4       	brge	.+14     	; 0x412 <controlAlgorithm+0xa2>
		{
			leftWheelSpeed = 40;
 404:	88 e2       	ldi	r24, 0x28	; 40
 406:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 0b 01 	sts	0x010B, r24
 410:	0f c0       	rjmp	.+30     	; 0x430 <controlAlgorithm+0xc0>
		}
		else if ((midSpeed+speed) > 235)
 412:	2c 3e       	cpi	r18, 0xEC	; 236
 414:	31 05       	cpc	r19, r1
 416:	34 f0       	brlt	.+12     	; 0x424 <controlAlgorithm+0xb4>
		{
			leftWheelSpeed = 80;
 418:	80 e5       	ldi	r24, 0x50	; 80
 41a:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 0;
 41e:	10 92 0b 01 	sts	0x010B, r1
 422:	06 c0       	rjmp	.+12     	; 0x430 <controlAlgorithm+0xc0>
		}
		else
		{
			leftWheelSpeed = midSpeed + speed;
 424:	89 0f       	add	r24, r25
 426:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 0b 01 	sts	0x010B, r24
		}
		drive(rightWheelDirection, leftWheelDirection, leftWheelSpeed, rightWheelSpeed);
 430:	20 91 03 01 	lds	r18, 0x0103
 434:	40 91 00 01 	lds	r20, 0x0100
 438:	60 91 0b 01 	lds	r22, 0x010B
 43c:	80 91 14 01 	lds	r24, 0x0114
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	7f cf       	rjmp	.-258    	; 0x348 <drive>

0000044a <driveForward>:
}

/* Function that makes the robot move forward */
void driveForward(uint8_t speed)
{
	drive(1, 1, speed, speed);
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	48 2f       	mov	r20, r24
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	76 cf       	rjmp	.-276    	; 0x348 <drive>

0000045c <driveBackward>:
}
/* Function that makes the robot move backward */
void driveBackward(uint8_t speed)
{
	drive(0, 0, speed, speed);
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	48 2f       	mov	r20, r24
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	6d cf       	rjmp	.-294    	; 0x348 <drive>

0000046e <stop>:
}
/* Function that makes the robot stop */
void stop()
{
	drive(1, 1, 255, 255);
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	4f ef       	ldi	r20, 0xFF	; 255
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	64 cf       	rjmp	.-312    	; 0x348 <drive>

00000480 <driveForwardRight>:
}
/* Function that makes the robot move forward and to the right */
void driveForwardRight(uint8_t speed)
{
	drive(1, 1, speed - 40, speed + 40);
 480:	48 2f       	mov	r20, r24
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	9a 01       	movw	r18, r20
 486:	28 5d       	subi	r18, 0xD8	; 216
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	48 52       	subi	r20, 0x28	; 40
 48c:	51 09       	sbc	r21, r1
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	58 cf       	rjmp	.-336    	; 0x348 <drive>

00000498 <driveForwardLeft>:
}

/* Function that makes the robot move forward and to the left */
void driveForwardLeft(uint8_t speed)
{
	drive(1, 1, speed + 40, speed - 40);
 498:	48 2f       	mov	r20, r24
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	9a 01       	movw	r18, r20
 49e:	28 52       	subi	r18, 0x28	; 40
 4a0:	31 09       	sbc	r19, r1
 4a2:	48 5d       	subi	r20, 0xD8	; 216
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	4c cf       	rjmp	.-360    	; 0x348 <drive>

000004b0 <rotateCCW>:

/* Function that rotates the robot counterclockwise */
void rotateCCW()
{
	uint8_t speed = 160;
	drive(1, 0, speed, speed);
 4b0:	20 ea       	ldi	r18, 0xA0	; 160
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	40 ea       	ldi	r20, 0xA0	; 160
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	43 cf       	rjmp	.-378    	; 0x348 <drive>

000004c2 <rotateCW>:

/* Function that rotates the robot clockwise */
void rotateCW()
{
	uint8_t speed = 160;
	drive(0, 1, speed, speed);
 4c2:	20 ea       	ldi	r18, 0xA0	; 160
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 ea       	ldi	r20, 0xA0	; 160
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	3a cf       	rjmp	.-396    	; 0x348 <drive>

000004d4 <moveRobot>:
/* Function that allows the user to control the robot movement via the GUI. */
void moveRobot()
{
	uint8_t FASTSPEED = 80;
	uint8_t SLOWSPEED = 200;
	if(((steeringData & 0x08) >> 3) == 1)
 4d4:	80 91 0a 01 	lds	r24, 0x010A
 4d8:	83 ff       	sbrs	r24, 3
 4da:	1d c0       	rjmp	.+58     	; 0x516 <moveRobot+0x42>
	{
		if(steeringData == 0b00001100)
 4dc:	80 91 0a 01 	lds	r24, 0x010A
 4e0:	8c 30       	cpi	r24, 0x0C	; 12
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <moveRobot+0x14>
		{
			driveForward(FASTSPEED);
 4e4:	80 e5       	ldi	r24, 0x50	; 80
 4e6:	b1 cf       	rjmp	.-158    	; 0x44a <driveForward>
		} else if(steeringData == 0b00001011)
 4e8:	80 91 0a 01 	lds	r24, 0x010A
 4ec:	8b 30       	cpi	r24, 0x0B	; 11
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <moveRobot+0x20>
		{
			driveForwardLeft(FASTSPEED);
 4f0:	80 e5       	ldi	r24, 0x50	; 80
 4f2:	d2 cf       	rjmp	.-92     	; 0x498 <driveForwardLeft>
		} else if(steeringData == 0b00001010)
 4f4:	80 91 0a 01 	lds	r24, 0x010A
 4f8:	8a 30       	cpi	r24, 0x0A	; 10
 4fa:	11 f4       	brne	.+4      	; 0x500 <moveRobot+0x2c>
		{
			driveForwardRight(FASTSPEED);
 4fc:	80 e5       	ldi	r24, 0x50	; 80
 4fe:	c0 cf       	rjmp	.-128    	; 0x480 <driveForwardRight>
		} else if(steeringData == 0b00001001)
 500:	80 91 0a 01 	lds	r24, 0x010A
 504:	89 30       	cpi	r24, 0x09	; 9
 506:	11 f4       	brne	.+4      	; 0x50c <moveRobot+0x38>
		{
			driveBackward(FASTSPEED);
 508:	80 e5       	ldi	r24, 0x50	; 80
 50a:	a8 cf       	rjmp	.-176    	; 0x45c <driveBackward>
		} else if(steeringData == 0b00001000)
 50c:	80 91 0a 01 	lds	r24, 0x010A
 510:	88 30       	cpi	r24, 0x08	; 8
 512:	41 f5       	brne	.+80     	; 0x564 <moveRobot+0x90>
		{
			stop();
 514:	ac cf       	rjmp	.-168    	; 0x46e <stop>
		}
	}	else
	{
		if(steeringData == 0b00000100)
 516:	80 91 0a 01 	lds	r24, 0x010A
 51a:	84 30       	cpi	r24, 0x04	; 4
 51c:	11 f4       	brne	.+4      	; 0x522 <moveRobot+0x4e>
		{
			driveForward(SLOWSPEED);
 51e:	88 ec       	ldi	r24, 0xC8	; 200
 520:	94 cf       	rjmp	.-216    	; 0x44a <driveForward>
		} else if(steeringData == 0b00000011)
 522:	80 91 0a 01 	lds	r24, 0x010A
 526:	83 30       	cpi	r24, 0x03	; 3
 528:	11 f4       	brne	.+4      	; 0x52e <moveRobot+0x5a>
		{
			driveForwardLeft(SLOWSPEED);
 52a:	88 ec       	ldi	r24, 0xC8	; 200
 52c:	b5 cf       	rjmp	.-150    	; 0x498 <driveForwardLeft>
		} else if(steeringData == 0b00000010)
 52e:	80 91 0a 01 	lds	r24, 0x010A
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	11 f4       	brne	.+4      	; 0x53a <moveRobot+0x66>
		{
			driveForwardRight(SLOWSPEED);
 536:	88 ec       	ldi	r24, 0xC8	; 200
 538:	a3 cf       	rjmp	.-186    	; 0x480 <driveForwardRight>
		} else if(steeringData == 0b00000001)
 53a:	80 91 0a 01 	lds	r24, 0x010A
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	11 f4       	brne	.+4      	; 0x546 <moveRobot+0x72>
		{
			driveBackward(SLOWSPEED);
 542:	88 ec       	ldi	r24, 0xC8	; 200
 544:	8b cf       	rjmp	.-234    	; 0x45c <driveBackward>
		} else if(steeringData == 0b00000000)
 546:	80 91 0a 01 	lds	r24, 0x010A
 54a:	81 11       	cpse	r24, r1
 54c:	01 c0       	rjmp	.+2      	; 0x550 <moveRobot+0x7c>
		{
			stop();
 54e:	8f cf       	rjmp	.-226    	; 0x46e <stop>
		} else if(steeringData == 0b00000101)
 550:	80 91 0a 01 	lds	r24, 0x010A
 554:	85 30       	cpi	r24, 0x05	; 5
 556:	09 f4       	brne	.+2      	; 0x55a <moveRobot+0x86>
		{
			rotateCW();
 558:	b4 cf       	rjmp	.-152    	; 0x4c2 <rotateCW>
		} else if(steeringData == 0b00000110)
 55a:	80 91 0a 01 	lds	r24, 0x010A
 55e:	86 30       	cpi	r24, 0x06	; 6
 560:	09 f4       	brne	.+2      	; 0x564 <moveRobot+0x90>
		{
			rotateCCW();
 562:	a6 cf       	rjmp	.-180    	; 0x4b0 <rotateCCW>
 564:	08 95       	ret

00000566 <changeProportional>:
	}
}

void changeProportional(uint8_t newKp)
{
	Kp = newKp;
 566:	80 93 13 01 	sts	0x0113, r24
 56a:	08 95       	ret

0000056c <changeDerivative>:
}

void changeDerivative(uint8_t newKd)
{
	Kd = newKd;
 56c:	80 93 0d 01 	sts	0x010D, r24
 570:	08 95       	ret

00000572 <USARTTransmit>:
 572:	5b 9a       	sbi	0x0b, 3	; 11
 574:	e0 ec       	ldi	r30, 0xC0	; 192
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	90 81       	ld	r25, Z
 57a:	95 ff       	sbrs	r25, 5
 57c:	fd cf       	rjmp	.-6      	; 0x578 <USARTTransmit+0x6>
 57e:	80 93 c6 00 	sts	0x00C6, r24
 582:	08 95       	ret

00000584 <moveSingleServo>:
 584:	ff 92       	push	r15
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	00 d0       	rcall	.+0      	; 0x590 <moveSingleServo+0xc>
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	f6 2e       	mov	r15, r22
 596:	04 2f       	mov	r16, r20
 598:	12 2f       	mov	r17, r18
 59a:	89 83       	std	Y+1, r24	; 0x01
 59c:	9a 83       	std	Y+2, r25	; 0x02
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	e8 df       	rcall	.-48     	; 0x572 <USARTTransmit>
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	e6 df       	rcall	.-52     	; 0x572 <USARTTransmit>
 5a6:	81 2f       	mov	r24, r17
 5a8:	e4 df       	rcall	.-56     	; 0x572 <USARTTransmit>
 5aa:	87 e0       	ldi	r24, 0x07	; 7
 5ac:	e2 df       	rcall	.-60     	; 0x572 <USARTTransmit>
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	e0 df       	rcall	.-64     	; 0x572 <USARTTransmit>
 5b2:	8e e1       	ldi	r24, 0x1E	; 30
 5b4:	de df       	rcall	.-68     	; 0x572 <USARTTransmit>
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	dc df       	rcall	.-72     	; 0x572 <USARTTransmit>
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	da df       	rcall	.-76     	; 0x572 <USARTTransmit>
 5be:	8f 2d       	mov	r24, r15
 5c0:	d8 df       	rcall	.-80     	; 0x572 <USARTTransmit>
 5c2:	80 2f       	mov	r24, r16
 5c4:	d6 df       	rcall	.-84     	; 0x572 <USARTTransmit>
 5c6:	99 81       	ldd	r25, Y+1	; 0x01
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	89 0f       	add	r24, r25
 5cc:	88 5d       	subi	r24, 0xD8	; 216
 5ce:	f8 0e       	add	r15, r24
 5d0:	0f 0d       	add	r16, r15
 5d2:	80 2f       	mov	r24, r16
 5d4:	81 0f       	add	r24, r17
 5d6:	80 95       	com	r24
 5d8:	cc df       	rcall	.-104    	; 0x572 <USARTTransmit>
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	08 95       	ret

000005ea <moveDoubleServo>:
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	00 d0       	rcall	.+0      	; 0x5f8 <moveDoubleServo+0xe>
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <moveDoubleServo+0x10>
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <moveDoubleServo+0x12>
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	f6 2e       	mov	r15, r22
 602:	14 2f       	mov	r17, r20
 604:	e2 2e       	mov	r14, r18
 606:	af ef       	ldi	r26, 0xFF	; 255
 608:	b3 e0       	ldi	r27, 0x03	; 3
 60a:	a8 1b       	sub	r26, r24
 60c:	b9 0b       	sbc	r27, r25
 60e:	ba 83       	std	Y+2, r27	; 0x02
 610:	a9 83       	std	Y+1, r26	; 0x01
 612:	8b 83       	std	Y+3, r24	; 0x03
 614:	9c 83       	std	Y+4, r25	; 0x04
 616:	e9 81       	ldd	r30, Y+1	; 0x01
 618:	fa 81       	ldd	r31, Y+2	; 0x02
 61a:	ed 83       	std	Y+5, r30	; 0x05
 61c:	e9 81       	ldd	r30, Y+1	; 0x01
 61e:	fa 81       	ldd	r31, Y+2	; 0x02
 620:	fe 83       	std	Y+6, r31	; 0x06
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	a6 df       	rcall	.-180    	; 0x572 <USARTTransmit>
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	a4 df       	rcall	.-184    	; 0x572 <USARTTransmit>
 62a:	8e ef       	ldi	r24, 0xFE	; 254
 62c:	a2 df       	rcall	.-188    	; 0x572 <USARTTransmit>
 62e:	8e e0       	ldi	r24, 0x0E	; 14
 630:	a0 df       	rcall	.-192    	; 0x572 <USARTTransmit>
 632:	83 e8       	ldi	r24, 0x83	; 131
 634:	9e df       	rcall	.-196    	; 0x572 <USARTTransmit>
 636:	8e e1       	ldi	r24, 0x1E	; 30
 638:	9c df       	rcall	.-200    	; 0x572 <USARTTransmit>
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	9a df       	rcall	.-204    	; 0x572 <USARTTransmit>
 63e:	8e 2d       	mov	r24, r14
 640:	98 df       	rcall	.-208    	; 0x572 <USARTTransmit>
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	96 df       	rcall	.-212    	; 0x572 <USARTTransmit>
 646:	8c 81       	ldd	r24, Y+4	; 0x04
 648:	94 df       	rcall	.-216    	; 0x572 <USARTTransmit>
 64a:	8f 2d       	mov	r24, r15
 64c:	92 df       	rcall	.-220    	; 0x572 <USARTTransmit>
 64e:	81 2f       	mov	r24, r17
 650:	90 df       	rcall	.-224    	; 0x572 <USARTTransmit>
 652:	80 2f       	mov	r24, r16
 654:	8e df       	rcall	.-228    	; 0x572 <USARTTransmit>
 656:	8d 81       	ldd	r24, Y+5	; 0x05
 658:	8c df       	rcall	.-232    	; 0x572 <USARTTransmit>
 65a:	8e 81       	ldd	r24, Y+6	; 0x06
 65c:	8a df       	rcall	.-236    	; 0x572 <USARTTransmit>
 65e:	8f 2d       	mov	r24, r15
 660:	88 df       	rcall	.-240    	; 0x572 <USARTTransmit>
 662:	81 2f       	mov	r24, r17
 664:	86 df       	rcall	.-244    	; 0x572 <USARTTransmit>
 666:	3b 81       	ldd	r19, Y+3	; 0x03
 668:	8c 81       	ldd	r24, Y+4	; 0x04
 66a:	2d 81       	ldd	r18, Y+5	; 0x05
 66c:	9e 81       	ldd	r25, Y+6	; 0x06
 66e:	83 0f       	add	r24, r19
 670:	8f 54       	subi	r24, 0x4F	; 79
 672:	82 0f       	add	r24, r18
 674:	89 0f       	add	r24, r25
 676:	8f 0d       	add	r24, r15
 678:	f8 0e       	add	r15, r24
 67a:	f1 0e       	add	r15, r17
 67c:	1f 0d       	add	r17, r15
 67e:	e1 0e       	add	r14, r17
 680:	8e 2d       	mov	r24, r14
 682:	80 0f       	add	r24, r16
 684:	80 95       	com	r24
 686:	75 df       	rcall	.-278    	; 0x572 <USARTTransmit>
 688:	26 96       	adiw	r28, 0x06	; 6
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	08 95       	ret

000006a2 <defaultPosition>:
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	27 e0       	ldi	r18, 0x07	; 7
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	60 e5       	ldi	r22, 0x50	; 80
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	69 df       	rcall	.-302    	; 0x584 <moveSingleServo>
 6b2:	26 e0       	ldi	r18, 0x06	; 6
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	60 e5       	ldi	r22, 0x50	; 80
 6b8:	82 e3       	ldi	r24, 0x32	; 50
 6ba:	93 e0       	ldi	r25, 0x03	; 3
 6bc:	63 df       	rcall	.-314    	; 0x584 <moveSingleServo>
 6be:	03 e0       	ldi	r16, 0x03	; 3
 6c0:	10 e0       	ldi	r17, 0x00	; 0
 6c2:	22 e0       	ldi	r18, 0x02	; 2
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	60 e5       	ldi	r22, 0x50	; 80
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	8e df       	rcall	.-228    	; 0x5ea <moveDoubleServo>
 6ce:	05 e0       	ldi	r16, 0x05	; 5
 6d0:	10 e0       	ldi	r17, 0x00	; 0
 6d2:	24 e0       	ldi	r18, 0x04	; 4
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	60 e5       	ldi	r22, 0x50	; 80
 6d8:	8c ec       	ldi	r24, 0xCC	; 204
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	86 df       	rcall	.-244    	; 0x5ea <moveDoubleServo>
 6de:	03 e0       	ldi	r16, 0x03	; 3
 6e0:	10 e0       	ldi	r17, 0x00	; 0
 6e2:	22 e0       	ldi	r18, 0x02	; 2
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	60 e5       	ldi	r22, 0x50	; 80
 6e8:	8c ec       	ldi	r24, 0xCC	; 204
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	7e df       	rcall	.-260    	; 0x5ea <moveDoubleServo>
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	60 e2       	ldi	r22, 0x20	; 32
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	45 df       	rcall	.-374    	; 0x584 <moveSingleServo>
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	90 93 06 01 	sts	0x0106, r25
 702:	80 93 05 01 	sts	0x0105, r24
 706:	2c ec       	ldi	r18, 0xCC	; 204
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	30 93 02 01 	sts	0x0102, r19
 70e:	20 93 01 01 	sts	0x0101, r18
 712:	30 93 0f 01 	sts	0x010F, r19
 716:	20 93 0e 01 	sts	0x010E, r18
 71a:	22 e3       	ldi	r18, 0x32	; 50
 71c:	33 e0       	ldi	r19, 0x03	; 3
 71e:	30 93 19 01 	sts	0x0119, r19
 722:	20 93 18 01 	sts	0x0118, r18
 726:	90 93 17 01 	sts	0x0117, r25
 72a:	80 93 16 01 	sts	0x0116, r24
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	08 95       	ret

00000734 <armInit>:
 734:	53 9a       	sbi	0x0a, 3	; 10
 736:	10 92 c5 00 	sts	0x00C5, r1
 73a:	10 92 c4 00 	sts	0x00C4, r1
 73e:	88 e1       	ldi	r24, 0x18	; 24
 740:	80 93 c1 00 	sts	0x00C1, r24
 744:	86 e0       	ldi	r24, 0x06	; 6
 746:	80 93 c2 00 	sts	0x00C2, r24
 74a:	ab cf       	rjmp	.-170    	; 0x6a2 <defaultPosition>

0000074c <pickupDefaultPosition>:
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	03 e0       	ldi	r16, 0x03	; 3
 752:	10 e0       	ldi	r17, 0x00	; 0
 754:	22 e0       	ldi	r18, 0x02	; 2
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	60 ef       	ldi	r22, 0xF0	; 240
 75a:	88 e8       	ldi	r24, 0x88	; 136
 75c:	92 e0       	ldi	r25, 0x02	; 2
 75e:	45 df       	rcall	.-374    	; 0x5ea <moveDoubleServo>
 760:	05 e0       	ldi	r16, 0x05	; 5
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	24 e0       	ldi	r18, 0x04	; 4
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	60 ef       	ldi	r22, 0xF0	; 240
 76a:	88 e8       	ldi	r24, 0x88	; 136
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	3d df       	rcall	.-390    	; 0x5ea <moveDoubleServo>
 770:	26 e0       	ldi	r18, 0x06	; 6
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	60 ef       	ldi	r22, 0xF0	; 240
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	04 df       	rcall	.-504    	; 0x584 <moveSingleServo>
 77c:	27 e0       	ldi	r18, 0x07	; 7
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	60 e5       	ldi	r22, 0x50	; 80
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	fe de       	rcall	.-516    	; 0x584 <moveSingleServo>
 788:	28 e0       	ldi	r18, 0x08	; 8
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	60 e5       	ldi	r22, 0x50	; 80
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	f8 de       	rcall	.-528    	; 0x584 <moveSingleServo>
 794:	88 e8       	ldi	r24, 0x88	; 136
 796:	92 e0       	ldi	r25, 0x02	; 2
 798:	90 93 02 01 	sts	0x0102, r25
 79c:	80 93 01 01 	sts	0x0101, r24
 7a0:	90 93 0f 01 	sts	0x010F, r25
 7a4:	80 93 0e 01 	sts	0x010E, r24
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	90 93 19 01 	sts	0x0119, r25
 7b0:	80 93 18 01 	sts	0x0118, r24
 7b4:	90 93 17 01 	sts	0x0117, r25
 7b8:	80 93 16 01 	sts	0x0116, r24
 7bc:	90 93 1b 01 	sts	0x011B, r25
 7c0:	80 93 1a 01 	sts	0x011A, r24
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <dropItem>:
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	81 11       	cpse	r24, r1
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <dropItem+0x16>
 7d2:	21 e0       	ldi	r18, 0x01	; 1
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	60 e5       	ldi	r22, 0x50	; 80
 7d8:	82 e3       	ldi	r24, 0x32	; 50
 7da:	93 e0       	ldi	r25, 0x03	; 3
 7dc:	d3 de       	rcall	.-602    	; 0x584 <moveSingleServo>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <dropItem+0x26>
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <dropItem+0x26>
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	60 e5       	ldi	r22, 0x50	; 80
 7ea:	8c ec       	ldi	r24, 0xCC	; 204
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	ca de       	rcall	.-620    	; 0x584 <moveSingleServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f0:	2f ef       	ldi	r18, 0xFF	; 255
 7f2:	8b e7       	ldi	r24, 0x7B	; 123
 7f4:	92 e9       	ldi	r25, 0x92	; 146
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	90 40       	sbci	r25, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <dropItem+0x2c>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <dropItem+0x36>
 800:	00 00       	nop
 802:	03 e0       	ldi	r16, 0x03	; 3
 804:	10 e0       	ldi	r17, 0x00	; 0
 806:	22 e0       	ldi	r18, 0x02	; 2
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	60 e6       	ldi	r22, 0x60	; 96
 80c:	8c ec       	ldi	r24, 0xCC	; 204
 80e:	92 e0       	ldi	r25, 0x02	; 2
 810:	ec de       	rcall	.-552    	; 0x5ea <moveDoubleServo>
 812:	05 e0       	ldi	r16, 0x05	; 5
 814:	10 e0       	ldi	r17, 0x00	; 0
 816:	24 e0       	ldi	r18, 0x04	; 4
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	60 e6       	ldi	r22, 0x60	; 96
 81c:	8c ec       	ldi	r24, 0xCC	; 204
 81e:	92 e0       	ldi	r25, 0x02	; 2
 820:	e4 de       	rcall	.-568    	; 0x5ea <moveDoubleServo>
 822:	26 e0       	ldi	r18, 0x06	; 6
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	60 e6       	ldi	r22, 0x60	; 96
 828:	81 e1       	ldi	r24, 0x11	; 17
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	ab de       	rcall	.-682    	; 0x584 <moveSingleServo>
 82e:	27 e0       	ldi	r18, 0x07	; 7
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	60 e5       	ldi	r22, 0x50	; 80
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	a5 de       	rcall	.-694    	; 0x584 <moveSingleServo>
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	8f e4       	ldi	r24, 0x4F	; 79
 83e:	93 ec       	ldi	r25, 0xC3	; 195
 840:	21 50       	subi	r18, 0x01	; 1
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <dropItem+0x76>
 848:	00 c0       	rjmp	.+0      	; 0x84a <dropItem+0x80>
 84a:	00 00       	nop
 84c:	28 e0       	ldi	r18, 0x08	; 8
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	60 e6       	ldi	r22, 0x60	; 96
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	96 de       	rcall	.-724    	; 0x584 <moveSingleServo>
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	8b e7       	ldi	r24, 0x7B	; 123
 85c:	92 e9       	ldi	r25, 0x92	; 146
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	80 40       	sbci	r24, 0x00	; 0
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	e1 f7       	brne	.-8      	; 0x85e <dropItem+0x94>
 866:	00 c0       	rjmp	.+0      	; 0x868 <dropItem+0x9e>
 868:	00 00       	nop
 86a:	1b df       	rcall	.-458    	; 0x6a2 <defaultPosition>
 86c:	66 d1       	rcall	.+716    	; 0xb3a <TXFinishedDrop>
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	08 95       	ret

00000874 <moveArm>:
 874:	0f 93       	push	r16
 876:	1f 93       	push	r17
 878:	86 fb       	bst	r24, 6
 87a:	99 27       	eor	r25, r25
 87c:	90 f9       	bld	r25, 0
 87e:	85 ff       	sbrs	r24, 5
 880:	02 c0       	rjmp	.+4      	; 0x886 <moveArm+0x12>
 882:	64 df       	rcall	.-312    	; 0x74c <pickupDefaultPosition>
 884:	4a c1       	rjmp	.+660    	; 0xb1a <moveArm+0x2a6>
 886:	99 23       	and	r25, r25
 888:	11 f0       	breq	.+4      	; 0x88e <moveArm+0x1a>
 88a:	0b df       	rcall	.-490    	; 0x6a2 <defaultPosition>
 88c:	46 c1       	rjmp	.+652    	; 0xb1a <moveArm+0x2a6>
 88e:	98 2f       	mov	r25, r24
 890:	97 70       	andi	r25, 0x07	; 7
 892:	84 fb       	bst	r24, 4
 894:	33 27       	eor	r19, r19
 896:	30 f9       	bld	r19, 0
 898:	83 fb       	bst	r24, 3
 89a:	22 27       	eor	r18, r18
 89c:	20 f9       	bld	r18, 0
 89e:	91 30       	cpi	r25, 0x01	; 1
 8a0:	91 f5       	brne	.+100    	; 0x906 <moveArm+0x92>
 8a2:	31 11       	cpse	r19, r1
 8a4:	18 c0       	rjmp	.+48     	; 0x8d6 <moveArm+0x62>
 8a6:	38 ed       	ldi	r19, 0xD8	; 216
 8a8:	32 03       	mulsu	r19, r18
 8aa:	c0 01       	movw	r24, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	20 91 05 01 	lds	r18, 0x0105
 8b2:	30 91 06 01 	lds	r19, 0x0106
 8b6:	82 0f       	add	r24, r18
 8b8:	93 1f       	adc	r25, r19
 8ba:	8a 30       	cpi	r24, 0x0A	; 10
 8bc:	91 05       	cpc	r25, r1
 8be:	09 f4       	brne	.+2      	; 0x8c2 <moveArm+0x4e>
 8c0:	2c c1       	rjmp	.+600    	; 0xb1a <moveArm+0x2a6>
 8c2:	0a 97       	sbiw	r24, 0x0a	; 10
 8c4:	90 93 06 01 	sts	0x0106, r25
 8c8:	80 93 05 01 	sts	0x0105, r24
 8cc:	21 e0       	ldi	r18, 0x01	; 1
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	60 e5       	ldi	r22, 0x50	; 80
 8d2:	58 de       	rcall	.-848    	; 0x584 <moveSingleServo>
 8d4:	22 c1       	rjmp	.+580    	; 0xb1a <moveArm+0x2a6>
 8d6:	80 91 05 01 	lds	r24, 0x0105
 8da:	90 91 06 01 	lds	r25, 0x0106
 8de:	0a 96       	adiw	r24, 0x0a	; 10
 8e0:	48 e2       	ldi	r20, 0x28	; 40
 8e2:	24 9f       	mul	r18, r20
 8e4:	80 0d       	add	r24, r0
 8e6:	91 1d       	adc	r25, r1
 8e8:	11 24       	eor	r1, r1
 8ea:	8f 3f       	cpi	r24, 0xFF	; 255
 8ec:	23 e0       	ldi	r18, 0x03	; 3
 8ee:	92 07       	cpc	r25, r18
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <moveArm+0x80>
 8f2:	13 c1       	rjmp	.+550    	; 0xb1a <moveArm+0x2a6>
 8f4:	90 93 06 01 	sts	0x0106, r25
 8f8:	80 93 05 01 	sts	0x0105, r24
 8fc:	21 e0       	ldi	r18, 0x01	; 1
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	60 e5       	ldi	r22, 0x50	; 80
 902:	40 de       	rcall	.-896    	; 0x584 <moveSingleServo>
 904:	0a c1       	rjmp	.+532    	; 0xb1a <moveArm+0x2a6>
 906:	92 30       	cpi	r25, 0x02	; 2
 908:	b1 f5       	brne	.+108    	; 0x976 <moveArm+0x102>
 90a:	31 11       	cpse	r19, r1
 90c:	1a c0       	rjmp	.+52     	; 0x942 <moveArm+0xce>
 90e:	80 91 01 01 	lds	r24, 0x0101
 912:	90 91 02 01 	lds	r25, 0x0102
 916:	0a 97       	sbiw	r24, 0x0a	; 10
 918:	48 ed       	ldi	r20, 0xD8	; 216
 91a:	42 03       	mulsu	r20, r18
 91c:	90 01       	movw	r18, r0
 91e:	11 24       	eor	r1, r1
 920:	82 0f       	add	r24, r18
 922:	93 1f       	adc	r25, r19
 924:	8e 3c       	cpi	r24, 0xCE	; 206
 926:	91 05       	cpc	r25, r1
 928:	08 f4       	brcc	.+2      	; 0x92c <moveArm+0xb8>
 92a:	f7 c0       	rjmp	.+494    	; 0xb1a <moveArm+0x2a6>
 92c:	90 93 02 01 	sts	0x0102, r25
 930:	80 93 01 01 	sts	0x0101, r24
 934:	03 e0       	ldi	r16, 0x03	; 3
 936:	10 e0       	ldi	r17, 0x00	; 0
 938:	22 e0       	ldi	r18, 0x02	; 2
 93a:	40 e0       	ldi	r20, 0x00	; 0
 93c:	60 e5       	ldi	r22, 0x50	; 80
 93e:	55 de       	rcall	.-854    	; 0x5ea <moveDoubleServo>
 940:	ec c0       	rjmp	.+472    	; 0xb1a <moveArm+0x2a6>
 942:	80 91 01 01 	lds	r24, 0x0101
 946:	90 91 02 01 	lds	r25, 0x0102
 94a:	0a 96       	adiw	r24, 0x0a	; 10
 94c:	38 e2       	ldi	r19, 0x28	; 40
 94e:	23 9f       	mul	r18, r19
 950:	80 0d       	add	r24, r0
 952:	91 1d       	adc	r25, r1
 954:	11 24       	eor	r1, r1
 956:	82 32       	cpi	r24, 0x22	; 34
 958:	43 e0       	ldi	r20, 0x03	; 3
 95a:	94 07       	cpc	r25, r20
 95c:	08 f0       	brcs	.+2      	; 0x960 <moveArm+0xec>
 95e:	dd c0       	rjmp	.+442    	; 0xb1a <moveArm+0x2a6>
 960:	90 93 02 01 	sts	0x0102, r25
 964:	80 93 01 01 	sts	0x0101, r24
 968:	03 e0       	ldi	r16, 0x03	; 3
 96a:	10 e0       	ldi	r17, 0x00	; 0
 96c:	22 e0       	ldi	r18, 0x02	; 2
 96e:	40 e0       	ldi	r20, 0x00	; 0
 970:	60 e5       	ldi	r22, 0x50	; 80
 972:	3b de       	rcall	.-906    	; 0x5ea <moveDoubleServo>
 974:	d2 c0       	rjmp	.+420    	; 0xb1a <moveArm+0x2a6>
 976:	93 30       	cpi	r25, 0x03	; 3
 978:	b1 f5       	brne	.+108    	; 0x9e6 <moveArm+0x172>
 97a:	31 11       	cpse	r19, r1
 97c:	1a c0       	rjmp	.+52     	; 0x9b2 <moveArm+0x13e>
 97e:	80 91 0e 01 	lds	r24, 0x010E
 982:	90 91 0f 01 	lds	r25, 0x010F
 986:	0a 97       	sbiw	r24, 0x0a	; 10
 988:	48 ed       	ldi	r20, 0xD8	; 216
 98a:	42 03       	mulsu	r20, r18
 98c:	90 01       	movw	r18, r0
 98e:	11 24       	eor	r1, r1
 990:	82 0f       	add	r24, r18
 992:	93 1f       	adc	r25, r19
 994:	8e 3c       	cpi	r24, 0xCE	; 206
 996:	91 05       	cpc	r25, r1
 998:	08 f4       	brcc	.+2      	; 0x99c <moveArm+0x128>
 99a:	bf c0       	rjmp	.+382    	; 0xb1a <moveArm+0x2a6>
 99c:	90 93 0f 01 	sts	0x010F, r25
 9a0:	80 93 0e 01 	sts	0x010E, r24
 9a4:	05 e0       	ldi	r16, 0x05	; 5
 9a6:	10 e0       	ldi	r17, 0x00	; 0
 9a8:	24 e0       	ldi	r18, 0x04	; 4
 9aa:	40 e0       	ldi	r20, 0x00	; 0
 9ac:	60 e5       	ldi	r22, 0x50	; 80
 9ae:	1d de       	rcall	.-966    	; 0x5ea <moveDoubleServo>
 9b0:	b4 c0       	rjmp	.+360    	; 0xb1a <moveArm+0x2a6>
 9b2:	80 91 0e 01 	lds	r24, 0x010E
 9b6:	90 91 0f 01 	lds	r25, 0x010F
 9ba:	0a 96       	adiw	r24, 0x0a	; 10
 9bc:	38 e2       	ldi	r19, 0x28	; 40
 9be:	23 9f       	mul	r18, r19
 9c0:	80 0d       	add	r24, r0
 9c2:	91 1d       	adc	r25, r1
 9c4:	11 24       	eor	r1, r1
 9c6:	82 32       	cpi	r24, 0x22	; 34
 9c8:	43 e0       	ldi	r20, 0x03	; 3
 9ca:	94 07       	cpc	r25, r20
 9cc:	08 f0       	brcs	.+2      	; 0x9d0 <moveArm+0x15c>
 9ce:	a5 c0       	rjmp	.+330    	; 0xb1a <moveArm+0x2a6>
 9d0:	90 93 0f 01 	sts	0x010F, r25
 9d4:	80 93 0e 01 	sts	0x010E, r24
 9d8:	05 e0       	ldi	r16, 0x05	; 5
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	24 e0       	ldi	r18, 0x04	; 4
 9de:	40 e0       	ldi	r20, 0x00	; 0
 9e0:	60 e5       	ldi	r22, 0x50	; 80
 9e2:	03 de       	rcall	.-1018   	; 0x5ea <moveDoubleServo>
 9e4:	9a c0       	rjmp	.+308    	; 0xb1a <moveArm+0x2a6>
 9e6:	94 30       	cpi	r25, 0x04	; 4
 9e8:	91 f5       	brne	.+100    	; 0xa4e <moveArm+0x1da>
 9ea:	31 11       	cpse	r19, r1
 9ec:	18 c0       	rjmp	.+48     	; 0xa1e <moveArm+0x1aa>
 9ee:	38 ed       	ldi	r19, 0xD8	; 216
 9f0:	32 03       	mulsu	r19, r18
 9f2:	c0 01       	movw	r24, r0
 9f4:	11 24       	eor	r1, r1
 9f6:	40 91 18 01 	lds	r20, 0x0118
 9fa:	50 91 19 01 	lds	r21, 0x0119
 9fe:	84 0f       	add	r24, r20
 a00:	95 1f       	adc	r25, r21
 a02:	8a 30       	cpi	r24, 0x0A	; 10
 a04:	91 05       	cpc	r25, r1
 a06:	09 f4       	brne	.+2      	; 0xa0a <moveArm+0x196>
 a08:	88 c0       	rjmp	.+272    	; 0xb1a <moveArm+0x2a6>
 a0a:	0a 97       	sbiw	r24, 0x0a	; 10
 a0c:	90 93 19 01 	sts	0x0119, r25
 a10:	80 93 18 01 	sts	0x0118, r24
 a14:	26 e0       	ldi	r18, 0x06	; 6
 a16:	40 e0       	ldi	r20, 0x00	; 0
 a18:	60 e5       	ldi	r22, 0x50	; 80
 a1a:	b4 dd       	rcall	.-1176   	; 0x584 <moveSingleServo>
 a1c:	7e c0       	rjmp	.+252    	; 0xb1a <moveArm+0x2a6>
 a1e:	80 91 18 01 	lds	r24, 0x0118
 a22:	90 91 19 01 	lds	r25, 0x0119
 a26:	0a 96       	adiw	r24, 0x0a	; 10
 a28:	48 e2       	ldi	r20, 0x28	; 40
 a2a:	24 9f       	mul	r18, r20
 a2c:	80 0d       	add	r24, r0
 a2e:	91 1d       	adc	r25, r1
 a30:	11 24       	eor	r1, r1
 a32:	82 33       	cpi	r24, 0x32	; 50
 a34:	23 e0       	ldi	r18, 0x03	; 3
 a36:	92 07       	cpc	r25, r18
 a38:	08 f0       	brcs	.+2      	; 0xa3c <moveArm+0x1c8>
 a3a:	6f c0       	rjmp	.+222    	; 0xb1a <moveArm+0x2a6>
 a3c:	90 93 19 01 	sts	0x0119, r25
 a40:	80 93 18 01 	sts	0x0118, r24
 a44:	26 e0       	ldi	r18, 0x06	; 6
 a46:	40 e0       	ldi	r20, 0x00	; 0
 a48:	60 e5       	ldi	r22, 0x50	; 80
 a4a:	9c dd       	rcall	.-1224   	; 0x584 <moveSingleServo>
 a4c:	66 c0       	rjmp	.+204    	; 0xb1a <moveArm+0x2a6>
 a4e:	95 30       	cpi	r25, 0x05	; 5
 a50:	99 f5       	brne	.+102    	; 0xab8 <moveArm+0x244>
 a52:	31 11       	cpse	r19, r1
 a54:	18 c0       	rjmp	.+48     	; 0xa86 <moveArm+0x212>
 a56:	38 ed       	ldi	r19, 0xD8	; 216
 a58:	32 03       	mulsu	r19, r18
 a5a:	c0 01       	movw	r24, r0
 a5c:	11 24       	eor	r1, r1
 a5e:	40 91 16 01 	lds	r20, 0x0116
 a62:	50 91 17 01 	lds	r21, 0x0117
 a66:	84 0f       	add	r24, r20
 a68:	95 1f       	adc	r25, r21
 a6a:	8a 30       	cpi	r24, 0x0A	; 10
 a6c:	91 05       	cpc	r25, r1
 a6e:	09 f4       	brne	.+2      	; 0xa72 <moveArm+0x1fe>
 a70:	54 c0       	rjmp	.+168    	; 0xb1a <moveArm+0x2a6>
 a72:	0a 97       	sbiw	r24, 0x0a	; 10
 a74:	90 93 17 01 	sts	0x0117, r25
 a78:	80 93 16 01 	sts	0x0116, r24
 a7c:	27 e0       	ldi	r18, 0x07	; 7
 a7e:	40 e0       	ldi	r20, 0x00	; 0
 a80:	60 e5       	ldi	r22, 0x50	; 80
 a82:	80 dd       	rcall	.-1280   	; 0x584 <moveSingleServo>
 a84:	4a c0       	rjmp	.+148    	; 0xb1a <moveArm+0x2a6>
 a86:	40 91 16 01 	lds	r20, 0x0116
 a8a:	50 91 17 01 	lds	r21, 0x0117
 a8e:	46 5f       	subi	r20, 0xF6	; 246
 a90:	5f 4f       	sbci	r21, 0xFF	; 255
 a92:	ca 01       	movw	r24, r20
 a94:	38 e2       	ldi	r19, 0x28	; 40
 a96:	23 9f       	mul	r18, r19
 a98:	80 0d       	add	r24, r0
 a9a:	91 1d       	adc	r25, r1
 a9c:	11 24       	eor	r1, r1
 a9e:	8f 3f       	cpi	r24, 0xFF	; 255
 aa0:	43 e0       	ldi	r20, 0x03	; 3
 aa2:	94 07       	cpc	r25, r20
 aa4:	d0 f5       	brcc	.+116    	; 0xb1a <moveArm+0x2a6>
 aa6:	90 93 17 01 	sts	0x0117, r25
 aaa:	80 93 16 01 	sts	0x0116, r24
 aae:	27 e0       	ldi	r18, 0x07	; 7
 ab0:	40 e0       	ldi	r20, 0x00	; 0
 ab2:	60 e5       	ldi	r22, 0x50	; 80
 ab4:	67 dd       	rcall	.-1330   	; 0x584 <moveSingleServo>
 ab6:	31 c0       	rjmp	.+98     	; 0xb1a <moveArm+0x2a6>
 ab8:	96 30       	cpi	r25, 0x06	; 6
 aba:	79 f5       	brne	.+94     	; 0xb1a <moveArm+0x2a6>
 abc:	31 11       	cpse	r19, r1
 abe:	17 c0       	rjmp	.+46     	; 0xaee <moveArm+0x27a>
 ac0:	38 ed       	ldi	r19, 0xD8	; 216
 ac2:	32 03       	mulsu	r19, r18
 ac4:	c0 01       	movw	r24, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	40 91 1a 01 	lds	r20, 0x011A
 acc:	50 91 1b 01 	lds	r21, 0x011B
 ad0:	84 0f       	add	r24, r20
 ad2:	95 1f       	adc	r25, r21
 ad4:	8a 30       	cpi	r24, 0x0A	; 10
 ad6:	91 05       	cpc	r25, r1
 ad8:	01 f1       	breq	.+64     	; 0xb1a <moveArm+0x2a6>
 ada:	0a 97       	sbiw	r24, 0x0a	; 10
 adc:	90 93 1b 01 	sts	0x011B, r25
 ae0:	80 93 1a 01 	sts	0x011A, r24
 ae4:	28 e0       	ldi	r18, 0x08	; 8
 ae6:	40 e0       	ldi	r20, 0x00	; 0
 ae8:	60 e5       	ldi	r22, 0x50	; 80
 aea:	4c dd       	rcall	.-1384   	; 0x584 <moveSingleServo>
 aec:	16 c0       	rjmp	.+44     	; 0xb1a <moveArm+0x2a6>
 aee:	80 91 1a 01 	lds	r24, 0x011A
 af2:	90 91 1b 01 	lds	r25, 0x011B
 af6:	0a 96       	adiw	r24, 0x0a	; 10
 af8:	48 e2       	ldi	r20, 0x28	; 40
 afa:	24 9f       	mul	r18, r20
 afc:	80 0d       	add	r24, r0
 afe:	91 1d       	adc	r25, r1
 b00:	11 24       	eor	r1, r1
 b02:	8f 3f       	cpi	r24, 0xFF	; 255
 b04:	23 e0       	ldi	r18, 0x03	; 3
 b06:	92 07       	cpc	r25, r18
 b08:	40 f4       	brcc	.+16     	; 0xb1a <moveArm+0x2a6>
 b0a:	90 93 1b 01 	sts	0x011B, r25
 b0e:	80 93 1a 01 	sts	0x011A, r24
 b12:	28 e0       	ldi	r18, 0x08	; 8
 b14:	40 e0       	ldi	r20, 0x00	; 0
 b16:	60 e5       	ldi	r22, 0x50	; 80
 b18:	35 dd       	rcall	.-1430   	; 0x584 <moveSingleServo>
 b1a:	1f 91       	pop	r17
 b1c:	0f 91       	pop	r16
 b1e:	08 95       	ret

00000b20 <SPIInitSlave>:
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	80 93 15 01 	sts	0x0115, r24
 b26:	88 e4       	ldi	r24, 0x48	; 72
 b28:	84 b9       	out	0x04, r24	; 4
 b2a:	83 ec       	ldi	r24, 0xC3	; 195
 b2c:	8c bd       	out	0x2c, r24	; 44
 b2e:	78 94       	sei
 b30:	08 95       	ret

00000b32 <slaveTX>:
 b32:	8e bd       	out	0x2e, r24	; 46
 b34:	2b 9a       	sbi	0x05, 3	; 5
 b36:	2b 98       	cbi	0x05, 3	; 5
 b38:	08 95       	ret

00000b3a <TXFinishedDrop>:
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	fa cf       	rjmp	.-12     	; 0xb32 <slaveTX>

00000b3e <_exit>:
 b3e:	f8 94       	cli

00000b40 <__stop_program>:
 b40:	ff cf       	rjmp	.-2      	; 0xb40 <__stop_program>
