
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d6c  00000e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  00000e00  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a92  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000054e  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eee  00000000  00000000  000036d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000388  00000000  00000000  000045c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a0  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001395  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  0000627d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6c c0       	rjmp	.+216    	; 0x126 <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 32       	cpi	r26, 0x25	; 37
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	36 d0       	rcall	.+108    	; 0x116 <main>
  aa:	5e c6       	rjmp	.+3260   	; 0xd68 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	if(stationMode == 1)
  d4:	80 91 14 01 	lds	r24, 0x0114
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	09 f4       	brne	.+2      	; 0xde <__vector_16+0x30>
	{
		updateServos();	
  dc:	0d d6       	rcall	.+3098   	; 0xcf8 <updateServos>
	}
	
}
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0b be       	out	0x3b, r0	; 59
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <initTimer>:
}


void initTimer()
{
	TCCR0A = 0;
 104:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 10a:	16 bc       	out	0x26, r1	; 38
	OCR0A = 150;
 10c:	86 e9       	ldi	r24, 0x96	; 150
 10e:	87 bd       	out	0x27, r24	; 39
	
	stationMode = 0;
 110:	10 92 14 01 	sts	0x0114, r1
 114:	08 95       	ret

00000116 <main>:
	
}

int main(void)
{
	SPIInitSlave();
 116:	19 d6       	rcall	.+3122   	; 0xd4a <SPIInitSlave>
	drivingSetup();
 118:	4a d1       	rcall	.+660    	; 0x3ae <drivingSetup>
	armInit();
 11a:	79 d3       	rcall	.+1778   	; 0x80e <armInit>
	initTimer();
 11c:	f3 df       	rcall	.-26     	; 0x104 <initTimer>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x8>

00000120 <startTransportMode>:
	stationMode = 0;
}

void startTransportMode()
{
	stationMode = 0;
 120:	10 92 14 01 	sts	0x0114, r1
 124:	08 95       	ret

00000126 <__vector_19>:
#include "Servo.h"
#include "Control_module.h"


ISR(SPI_STC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	0b b6       	in	r0, 0x3b	; 59
 132:	0f 92       	push	r0
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	data = SPDR;
 14c:	8e b5       	in	r24, 0x2e	; 46
 14e:	80 93 13 01 	sts	0x0113, r24
	
	if(waitingForInstruction == 1)
 152:	80 91 1c 01 	lds	r24, 0x011C
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_19+0x36>
 15a:	4b c0       	rjmp	.+150    	; 0x1f2 <__vector_19+0xcc>
	{
		//waitingForInstruction = 0;
		if(data == 0b10000100)
 15c:	80 91 13 01 	lds	r24, 0x0113
 160:	84 38       	cpi	r24, 0x84	; 132
 162:	59 f4       	brne	.+22     	; 0x17a <__vector_19+0x54>
		{
			component = SENSOR;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 16a:	10 92 1c 01 	sts	0x011C, r1
			
			TIMSK0 &= ~(1<<OCIE0A);
 16e:	ee e6       	ldi	r30, 0x6E	; 110
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	80 83       	st	Z, r24
 178:	78 c0       	rjmp	.+240    	; 0x26a <__vector_19+0x144>
			
			
		} else if (data == 0b10000101)
 17a:	80 91 13 01 	lds	r24, 0x0113
 17e:	85 38       	cpi	r24, 0x85	; 133
 180:	31 f4       	brne	.+12     	; 0x18e <__vector_19+0x68>
		{
			component = WHEEL;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 188:	10 92 1c 01 	sts	0x011C, r1
 18c:	6e c0       	rjmp	.+220    	; 0x26a <__vector_19+0x144>
		} else if(data == 0b10000110)
 18e:	80 91 13 01 	lds	r24, 0x0113
 192:	86 38       	cpi	r24, 0x86	; 134
 194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_19+0x7c>
		{
			waitingForInstruction = 0;
 196:	10 92 1c 01 	sts	0x011C, r1
			component = ARM;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 07 01 	sts	0x0107, r24
 1a0:	64 c0       	rjmp	.+200    	; 0x26a <__vector_19+0x144>
		} else if(data == 0b10000111)
 1a2:	80 91 13 01 	lds	r24, 0x0113
 1a6:	87 38       	cpi	r24, 0x87	; 135
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_19+0x90>
		{
			component = KPROPORTIONAL;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1b0:	10 92 1c 01 	sts	0x011C, r1
 1b4:	5a c0       	rjmp	.+180    	; 0x26a <__vector_19+0x144>
		} else if(data == 0b10001011)
 1b6:	80 91 13 01 	lds	r24, 0x0113
 1ba:	8b 38       	cpi	r24, 0x8B	; 139
 1bc:	31 f4       	brne	.+12     	; 0x1ca <__vector_19+0xa4>
		{
			component = KDERIVATIVE;
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1c4:	10 92 1c 01 	sts	0x011C, r1
 1c8:	50 c0       	rjmp	.+160    	; 0x26a <__vector_19+0x144>
		} else if(data == 0b10001111)
 1ca:	80 91 13 01 	lds	r24, 0x0113
 1ce:	8f 38       	cpi	r24, 0x8F	; 143
 1d0:	31 f4       	brne	.+12     	; 0x1de <__vector_19+0xb8>
		{
			component = DROPITEM;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	80 93 07 01 	sts	0x0107, r24
			waitingForInstruction = 0;
 1d8:	10 92 1c 01 	sts	0x011C, r1
 1dc:	46 c0       	rjmp	.+140    	; 0x26a <__vector_19+0x144>
		} else if(data == 0b10010000)
 1de:	80 91 13 01 	lds	r24, 0x0113
 1e2:	80 39       	cpi	r24, 0x90	; 144
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_19+0xc2>
 1e6:	41 c0       	rjmp	.+130    	; 0x26a <__vector_19+0x144>
		{
			waitingForInstruction = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 1c 01 	sts	0x011C, r24
			startTransportMode();
 1ee:	98 df       	rcall	.-208    	; 0x120 <startTransportMode>
 1f0:	3c c0       	rjmp	.+120    	; 0x26a <__vector_19+0x144>
		}
	}
	else
	{
		waitingForInstruction = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 1c 01 	sts	0x011C, r24
		if(component == SENSOR)
 1f8:	80 91 07 01 	lds	r24, 0x0107
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	51 f4       	brne	.+20     	; 0x214 <__vector_19+0xee>
		{
			sensorData = data;
 200:	80 91 13 01 	lds	r24, 0x0113
 204:	80 93 10 01 	sts	0x0110, r24
			if(stationMode == 0)
 208:	80 91 14 01 	lds	r24, 0x0114
 20c:	81 11       	cpse	r24, r1
 20e:	2d c0       	rjmp	.+90     	; 0x26a <__vector_19+0x144>
			{
				controlAlgorithm();
 210:	00 d1       	rcall	.+512    	; 0x412 <controlAlgorithm>
 212:	2b c0       	rjmp	.+86     	; 0x26a <__vector_19+0x144>
			}
		}else if (component == ARM)
 214:	80 91 07 01 	lds	r24, 0x0107
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	41 f4       	brne	.+16     	; 0x22c <__vector_19+0x106>
		{
			armData = data;
 21c:	80 91 13 01 	lds	r24, 0x0113
 220:	80 93 0f 01 	sts	0x010F, r24
			moveArm(armData);
 224:	80 91 0f 01 	lds	r24, 0x010F
 228:	e1 d3       	rcall	.+1986   	; 0x9ec <moveArm>
 22a:	1f c0       	rjmp	.+62     	; 0x26a <__vector_19+0x144>
		} else if (component == WHEEL)
 22c:	80 91 07 01 	lds	r24, 0x0107
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	31 f4       	brne	.+12     	; 0x240 <__vector_19+0x11a>
		{
			steeringData = data;
 234:	80 91 13 01 	lds	r24, 0x0113
 238:	80 93 11 01 	sts	0x0111, r24
			moveRobot();
 23c:	9c d1       	rcall	.+824    	; 0x576 <moveRobot>
 23e:	15 c0       	rjmp	.+42     	; 0x26a <__vector_19+0x144>
		}  else if (component == KPROPORTIONAL)
 240:	80 91 07 01 	lds	r24, 0x0107
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	21 f4       	brne	.+8      	; 0x250 <__vector_19+0x12a>
		{
			changeProportional(data);
 248:	80 91 13 01 	lds	r24, 0x0113
 24c:	f9 d1       	rcall	.+1010   	; 0x640 <changeProportional>
 24e:	0d c0       	rjmp	.+26     	; 0x26a <__vector_19+0x144>
		}  else if (component == KDERIVATIVE)
 250:	80 91 07 01 	lds	r24, 0x0107
 254:	85 30       	cpi	r24, 0x05	; 5
 256:	21 f4       	brne	.+8      	; 0x260 <__vector_19+0x13a>
		{
			changeDerivative(data);
 258:	80 91 13 01 	lds	r24, 0x0113
 25c:	f4 d1       	rcall	.+1000   	; 0x646 <changeDerivative>
 25e:	05 c0       	rjmp	.+10     	; 0x26a <__vector_19+0x144>
		}  else if (component == DROPITEM)
 260:	80 91 07 01 	lds	r24, 0x0107
 264:	86 30       	cpi	r24, 0x06	; 6
 266:	09 f4       	brne	.+2      	; 0x26a <__vector_19+0x144>
		{
			dropItem();
 268:	59 d3       	rcall	.+1714   	; 0x91c <dropItem>
		}
	}
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <getError>:
#include "Control_module.h"


/*Function that calculates the line error*/
int8_t getError()
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <getError+0x6>
 296:	1f 92       	push	r1
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t res = 0; 
 29c:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t sum = 0; // Sum of all data from active sensors (1,..,7)
 29e:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0; // Counter which counts number of sensors activated 
 2a0:	1b 82       	std	Y+3, r1	; 0x03
	error = 0; // Error from line
 2a2:	10 92 18 01 	sts	0x0118, r1
	uint8_t lineData; 
	lineData = sensorData;
 2a6:	40 91 10 01 	lds	r20, 0x0110
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((lineData >> noShift) & 0x01);
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	9a 01       	movw	r18, r20
 2b2:	08 2e       	mov	r0, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <getError+0x2a>
 2b6:	35 95       	asr	r19
 2b8:	27 95       	ror	r18
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <getError+0x26>
 2be:	21 70       	andi	r18, 0x01	; 1
 2c0:	33 27       	eor	r19, r19
 2c2:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 2c4:	29 81       	ldd	r18, Y+1	; 0x01
 2c6:	21 30       	cpi	r18, 0x01	; 1
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <getError+0x48>
		{
			sum = sum + (7 - noShift);
 2ca:	2a 81       	ldd	r18, Y+2	; 0x02
 2cc:	29 5f       	subi	r18, 0xF9	; 249
 2ce:	28 1b       	sub	r18, r24
 2d0:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 2d2:	2b 81       	ldd	r18, Y+3	; 0x03
 2d4:	2f 5f       	subi	r18, 0xFF	; 255
 2d6:	2b 83       	std	Y+3, r18	; 0x03
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	50 f7       	brcc	.-44     	; 0x2b0 <getError+0x20>
		}
	}
	if(counter1 == 1)
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <getError+0x60>
	{
		error = sum + (sum-1);
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	89 0f       	add	r24, r25
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	80 93 18 01 	sts	0x0118, r24
 2ee:	22 c0       	rjmp	.+68     	; 0x334 <getError+0xa4>
	} else if(counter1 == 2)
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	29 f4       	brne	.+10     	; 0x300 <getError+0x70>

	{
		error = sum-1;
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	81 50       	subi	r24, 0x01	; 1
 2fa:	80 93 18 01 	sts	0x0118, r24
 2fe:	1a c0       	rjmp	.+52     	; 0x334 <getError+0xa4>
	} else if(counter1 == 3)
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	a1 f4       	brne	.+40     	; 0x32e <getError+0x9e>
	{
		error = sum*2;
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	88 0f       	add	r24, r24
 30a:	80 93 18 01 	sts	0x0118, r24
		error = error/(0b00000011);
 30e:	80 91 18 01 	lds	r24, 0x0118
 312:	96 e5       	ldi	r25, 0x56	; 86
 314:	89 02       	muls	r24, r25
 316:	91 2d       	mov	r25, r1
 318:	11 24       	eor	r1, r1
 31a:	87 fd       	sbrc	r24, 7
 31c:	93 95       	inc	r25
 31e:	90 93 18 01 	sts	0x0118, r25
		error = error - 1;
 322:	80 91 18 01 	lds	r24, 0x0118
 326:	81 50       	subi	r24, 0x01	; 1
 328:	80 93 18 01 	sts	0x0118, r24
 32c:	03 c0       	rjmp	.+6      	; 0x334 <getError+0xa4>
		
	} 
	 else
	{
		error = -8;
 32e:	88 ef       	ldi	r24, 0xF8	; 248
 330:	80 93 18 01 	sts	0x0118, r24
	}
	error = 7 - error;
 334:	90 91 18 01 	lds	r25, 0x0118
 338:	87 e0       	ldi	r24, 0x07	; 7
 33a:	89 1b       	sub	r24, r25
 33c:	80 93 18 01 	sts	0x0118, r24
	return error;
 340:	80 91 18 01 	lds	r24, 0x0118
}
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <calculateSpeed>:
	}
}

/* function that calculates the speed */
int8_t calculateSpeed(int8_t error)
{
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 d0       	rcall	.+0      	; 0x358 <calculateSpeed+0x8>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 35c:	1a 82       	std	Y+2, r1	; 0x02
 35e:	19 82       	std	Y+1, r1	; 0x01
	
	speed = Kp * error + Kd * (error - prevError);
 360:	28 2f       	mov	r18, r24
 362:	33 27       	eor	r19, r19
 364:	27 fd       	sbrc	r18, 7
 366:	30 95       	com	r19
 368:	40 91 1a 01 	lds	r20, 0x011A
 36c:	42 03       	mulsu	r20, r18
 36e:	b0 01       	movw	r22, r0
 370:	43 9f       	mul	r20, r19
 372:	70 0d       	add	r23, r0
 374:	11 24       	eor	r1, r1
 376:	10 91 15 01 	lds	r17, 0x0115
 37a:	90 91 0c 01 	lds	r25, 0x010C
 37e:	29 1b       	sub	r18, r25
 380:	31 09       	sbc	r19, r1
 382:	97 fd       	sbrc	r25, 7
 384:	33 95       	inc	r19
 386:	12 03       	mulsu	r17, r18
 388:	a0 01       	movw	r20, r0
 38a:	13 9f       	mul	r17, r19
 38c:	50 0d       	add	r21, r0
 38e:	11 24       	eor	r1, r1
 390:	9b 01       	movw	r18, r22
 392:	24 0f       	add	r18, r20
 394:	35 1f       	adc	r19, r21
 396:	3a 83       	std	Y+2, r19	; 0x02
 398:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 39a:	80 93 0c 01 	sts	0x010C, r24
	return speed;
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	08 95       	ret

000003ae <drivingSetup>:

/* function initiates driving */
void drivingSetup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 3ae:	81 ef       	ldi	r24, 0xF1	; 241
 3b0:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 128
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //Starts the timer
 3ba:	10 92 85 00 	sts	0x0085, r1
 3be:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 255; //Sets compare register => Robot does not move
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	90 93 89 00 	sts	0x0089, r25
 3ca:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 255; // Sets compare register => Robot does not move
 3ce:	90 93 8b 00 	sts	0x008B, r25
 3d2:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7); //Sets the data direction for the PWM and direction ports. 
 3d6:	8a b1       	in	r24, 0x0a	; 10
 3d8:	80 6f       	ori	r24, 0xF0	; 240
 3da:	8a b9       	out	0x0a, r24	; 10
	Kp = 20;
 3dc:	84 e1       	ldi	r24, 0x14	; 20
 3de:	80 93 1a 01 	sts	0x011A, r24
	Kd = 5;
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	80 93 15 01 	sts	0x0115, r24
 3e8:	08 95       	ret

000003ea <drive>:

/* Function that controls both direction and speed of the motors. 
	rightDir, leftDir = 1 => Forward. rightDir, leftDir = 0 => Backward. */
void drive(int rightDir, int leftDir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(rightDir == 1)
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <drive+0x8>
	{
		PORTD &= ~(1 << PORTD7);
 3ee:	5f 98       	cbi	0x0b, 7	; 11
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <drive+0xa>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 3f2:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(leftDir == 1)
 3f4:	61 30       	cpi	r22, 0x01	; 1
 3f6:	71 05       	cpc	r23, r1
 3f8:	11 f4       	brne	.+4      	; 0x3fe <drive+0x14>
	{
		PORTD |= (1 << PORTD6);
 3fa:	5e 9a       	sbi	0x0b, 6	; 11
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <drive+0x16>
	}
	else
	{
		PORTD &= ~(1 << PORTD6);
 3fe:	5e 98       	cbi	0x0b, 6	; 11
	}
	OCR1A = rightSpeed;
 400:	30 93 89 00 	sts	0x0089, r19
 404:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 408:	50 93 8b 00 	sts	0x008B, r21
 40c:	40 93 8a 00 	sts	0x008A, r20
 410:	08 95       	ret

00000412 <controlAlgorithm>:
}

/* Function that controls the robot movement when following a line */
void controlAlgorithm()
{
	error = getError();
 412:	3e df       	rcall	.-388    	; 0x290 <getError>
 414:	80 93 18 01 	sts	0x0118, r24
		
	if(error == 15)  // No sensors activated
 418:	80 91 18 01 	lds	r24, 0x0118
 41c:	8f 30       	cpi	r24, 0x0F	; 15
 41e:	99 f4       	brne	.+38     	; 0x446 <controlAlgorithm+0x34>
	{
		rightWheelSpeed = rightWheelSpeed; 
 420:	80 91 06 01 	lds	r24, 0x0106
 424:	80 93 06 01 	sts	0x0106, r24
		leftWheelSpeed = leftWheelSpeed;
 428:	80 91 03 01 	lds	r24, 0x0103
 42c:	80 93 03 01 	sts	0x0103, r24
		drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 430:	20 91 06 01 	lds	r18, 0x0106
 434:	40 91 03 01 	lds	r20, 0x0103
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	d2 df       	rcall	.-92     	; 0x3ea <drive>
	else
	{
		
	}
	{	
		midSpeed = 140;  //Standard speed
 446:	8c e8       	ldi	r24, 0x8C	; 140
 448:	80 93 19 01 	sts	0x0119, r24
		int16_t speed = calculateSpeed(error);  //calculate new speed 
 44c:	80 91 18 01 	lds	r24, 0x0118
 450:	7f df       	rcall	.-258    	; 0x350 <calculateSpeed>
 452:	28 2f       	mov	r18, r24
 454:	33 27       	eor	r19, r19
 456:	27 fd       	sbrc	r18, 7
 458:	30 95       	com	r19
		if ((midSpeed-speed) < 10)
 45a:	90 91 19 01 	lds	r25, 0x0119
 45e:	49 2f       	mov	r20, r25
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	42 1b       	sub	r20, r18
 464:	53 0b       	sbc	r21, r19
 466:	4a 30       	cpi	r20, 0x0A	; 10
 468:	51 05       	cpc	r21, r1
 46a:	3c f4       	brge	.+14     	; 0x47a <controlAlgorithm+0x68>
		{
			rightWheelSpeed = 3;
 46c:	93 e0       	ldi	r25, 0x03	; 3
 46e:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	90 93 1b 01 	sts	0x011B, r25
 478:	0f c0       	rjmp	.+30     	; 0x498 <controlAlgorithm+0x86>
		}
		else if ((midSpeed-speed) > 235)
 47a:	4c 3e       	cpi	r20, 0xEC	; 236
 47c:	51 05       	cpc	r21, r1
 47e:	34 f0       	brlt	.+12     	; 0x48c <controlAlgorithm+0x7a>
		{
			rightWheelSpeed = 100;
 480:	94 e6       	ldi	r25, 0x64	; 100
 482:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 0;
 486:	10 92 1b 01 	sts	0x011B, r1
 48a:	06 c0       	rjmp	.+12     	; 0x498 <controlAlgorithm+0x86>
		}
		else
		{
			rightWheelSpeed = midSpeed - speed;
 48c:	98 1b       	sub	r25, r24
 48e:	90 93 06 01 	sts	0x0106, r25
			rightWheelDirection = 1;
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	90 93 1b 01 	sts	0x011B, r25
		}
		
		if ((midSpeed+speed) < 10)
 498:	90 91 19 01 	lds	r25, 0x0119
 49c:	29 0f       	add	r18, r25
 49e:	31 1d       	adc	r19, r1
 4a0:	2a 30       	cpi	r18, 0x0A	; 10
 4a2:	31 05       	cpc	r19, r1
 4a4:	3c f4       	brge	.+14     	; 0x4b4 <controlAlgorithm+0xa2>
		{
			leftWheelSpeed = 40;
 4a6:	88 e2       	ldi	r24, 0x28	; 40
 4a8:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 12 01 	sts	0x0112, r24
 4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <controlAlgorithm+0xc0>
		}
		else if ((midSpeed+speed) > 235)
 4b4:	2c 3e       	cpi	r18, 0xEC	; 236
 4b6:	31 05       	cpc	r19, r1
 4b8:	34 f0       	brlt	.+12     	; 0x4c6 <controlAlgorithm+0xb4>
		{
			leftWheelSpeed = 80;
 4ba:	80 e5       	ldi	r24, 0x50	; 80
 4bc:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 0;
 4c0:	10 92 12 01 	sts	0x0112, r1
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <controlAlgorithm+0xc0>
		}
		else
		{
			leftWheelSpeed = midSpeed + speed;
 4c6:	89 0f       	add	r24, r25
 4c8:	80 93 03 01 	sts	0x0103, r24
			leftWheelDirection = 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 12 01 	sts	0x0112, r24
		}
		drive(rightWheelDirection, leftWheelDirection, leftWheelSpeed, rightWheelSpeed);
 4d2:	20 91 06 01 	lds	r18, 0x0106
 4d6:	40 91 03 01 	lds	r20, 0x0103
 4da:	60 91 12 01 	lds	r22, 0x0112
 4de:	80 91 1b 01 	lds	r24, 0x011B
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	7f cf       	rjmp	.-258    	; 0x3ea <drive>

000004ec <driveForward>:
}

/* Function that makes the robot move forward */
void driveForward(uint8_t speed)
{
	drive(1, 1, speed, speed);
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	48 2f       	mov	r20, r24
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	76 cf       	rjmp	.-276    	; 0x3ea <drive>

000004fe <driveBackward>:
}
/* Function that makes the robot move backward */
void driveBackward(uint8_t speed)
{
	drive(0, 0, speed, speed);
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	48 2f       	mov	r20, r24
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	6d cf       	rjmp	.-294    	; 0x3ea <drive>

00000510 <stop>:
}
/* Function that makes the robot stop */
void stop()
{
	drive(1, 1, 255, 255);
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	4f ef       	ldi	r20, 0xFF	; 255
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	64 cf       	rjmp	.-312    	; 0x3ea <drive>

00000522 <driveForwardRight>:
}
/* Function that makes the robot move forward and to the right */
void driveForwardRight(uint8_t speed)
{
	drive(1, 1, speed - 40, speed + 40);
 522:	48 2f       	mov	r20, r24
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	9a 01       	movw	r18, r20
 528:	28 5d       	subi	r18, 0xD8	; 216
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	48 52       	subi	r20, 0x28	; 40
 52e:	51 09       	sbc	r21, r1
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	58 cf       	rjmp	.-336    	; 0x3ea <drive>

0000053a <driveForwardLeft>:
}

/* Function that makes the robot move forward and to the left */
void driveForwardLeft(uint8_t speed)
{
	drive(1, 1, speed + 40, speed - 40);
 53a:	48 2f       	mov	r20, r24
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	9a 01       	movw	r18, r20
 540:	28 52       	subi	r18, 0x28	; 40
 542:	31 09       	sbc	r19, r1
 544:	48 5d       	subi	r20, 0xD8	; 216
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	4c cf       	rjmp	.-360    	; 0x3ea <drive>

00000552 <rotateCCW>:

/* Function that rotates the robot counterclockwise */
void rotateCCW()
{
	uint8_t speed = 100;
	drive(1, 0, speed, speed);
 552:	24 e6       	ldi	r18, 0x64	; 100
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	44 e6       	ldi	r20, 0x64	; 100
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	43 cf       	rjmp	.-378    	; 0x3ea <drive>

00000564 <rotateCW>:

/* Function that rotates the robot clockwise */
void rotateCW()
{
	uint8_t speed = 100;
	drive(0, 1, speed, speed);
 564:	24 e6       	ldi	r18, 0x64	; 100
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	44 e6       	ldi	r20, 0x64	; 100
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	3a cf       	rjmp	.-396    	; 0x3ea <drive>

00000576 <moveRobot>:
/* Function that allows the user to control the robot movement via the GUI. */
void moveRobot()
{
	uint8_t FASTSPEED = 80;
	uint8_t SLOWSPEED = 200;
	if(((steeringData & 0x08) >> 3) == 1)
 576:	80 91 11 01 	lds	r24, 0x0111
 57a:	83 ff       	sbrs	r24, 3
 57c:	1e c0       	rjmp	.+60     	; 0x5ba <moveRobot+0x44>
	{
		if(steeringData == 0b00001100)
 57e:	80 91 11 01 	lds	r24, 0x0111
 582:	8c 30       	cpi	r24, 0x0C	; 12
 584:	11 f4       	brne	.+4      	; 0x58a <moveRobot+0x14>
		{
			driveBackward(FASTSPEED);
 586:	80 e5       	ldi	r24, 0x50	; 80
 588:	ba cf       	rjmp	.-140    	; 0x4fe <driveBackward>
		} else if(steeringData == 0b00001011)
 58a:	80 91 11 01 	lds	r24, 0x0111
 58e:	8b 30       	cpi	r24, 0x0B	; 11
 590:	11 f4       	brne	.+4      	; 0x596 <moveRobot+0x20>
		{
			driveForwardLeft(FASTSPEED);
 592:	80 e5       	ldi	r24, 0x50	; 80
 594:	d2 cf       	rjmp	.-92     	; 0x53a <driveForwardLeft>
		} else if(steeringData == 0b00001010)
 596:	80 91 11 01 	lds	r24, 0x0111
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	11 f4       	brne	.+4      	; 0x5a2 <moveRobot+0x2c>
		{
			driveForwardRight(FASTSPEED);
 59e:	80 e5       	ldi	r24, 0x50	; 80
 5a0:	c0 cf       	rjmp	.-128    	; 0x522 <driveForwardRight>
		} else if(steeringData == 0b00001001)
 5a2:	80 91 11 01 	lds	r24, 0x0111
 5a6:	89 30       	cpi	r24, 0x09	; 9
 5a8:	11 f4       	brne	.+4      	; 0x5ae <moveRobot+0x38>
		{
			driveForward(FASTSPEED);
 5aa:	80 e5       	ldi	r24, 0x50	; 80
 5ac:	9f cf       	rjmp	.-194    	; 0x4ec <driveForward>
		} else if(steeringData == 0b00001000)
 5ae:	80 91 11 01 	lds	r24, 0x0111
 5b2:	88 30       	cpi	r24, 0x08	; 8
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <moveRobot+0x42>
 5b6:	43 c0       	rjmp	.+134    	; 0x63e <moveRobot+0xc8>
		{
			stop();
 5b8:	ab cf       	rjmp	.-170    	; 0x510 <stop>
		}
	}	else
	{
		if(steeringData == 0b00000100)
 5ba:	80 91 11 01 	lds	r24, 0x0111
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <moveRobot+0x50>
		{
			driveBackward(SLOWSPEED);
 5c2:	88 ec       	ldi	r24, 0xC8	; 200
 5c4:	9c cf       	rjmp	.-200    	; 0x4fe <driveBackward>
		} else if(steeringData == 0b00000011)
 5c6:	80 91 11 01 	lds	r24, 0x0111
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <moveRobot+0x5c>
		{
			driveForwardLeft(SLOWSPEED);
 5ce:	88 ec       	ldi	r24, 0xC8	; 200
 5d0:	b4 cf       	rjmp	.-152    	; 0x53a <driveForwardLeft>
		} else if(steeringData == 0b00000010)
 5d2:	80 91 11 01 	lds	r24, 0x0111
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	11 f4       	brne	.+4      	; 0x5de <moveRobot+0x68>
		{
			driveForwardRight(SLOWSPEED);
 5da:	88 ec       	ldi	r24, 0xC8	; 200
 5dc:	a2 cf       	rjmp	.-188    	; 0x522 <driveForwardRight>
		} else if(steeringData == 0b00000001)
 5de:	80 91 11 01 	lds	r24, 0x0111
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	11 f4       	brne	.+4      	; 0x5ea <moveRobot+0x74>
		{
			driveForward(SLOWSPEED);
 5e6:	88 ec       	ldi	r24, 0xC8	; 200
 5e8:	81 cf       	rjmp	.-254    	; 0x4ec <driveForward>
		} else if(steeringData == 0b00000000 || steeringData == 0b10000000)
 5ea:	80 91 11 01 	lds	r24, 0x0111
 5ee:	88 23       	and	r24, r24
 5f0:	21 f0       	breq	.+8      	; 0x5fa <moveRobot+0x84>
 5f2:	80 91 11 01 	lds	r24, 0x0111
 5f6:	80 38       	cpi	r24, 0x80	; 128
 5f8:	c1 f4       	brne	.+48     	; 0x62a <moveRobot+0xb4>
		{
			
			stop();
 5fa:	8a df       	rcall	.-236    	; 0x510 <stop>
			TIMSK0 |= (1<<OCIE0A);
 5fc:	ee e6       	ldi	r30, 0x6E	; 110
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	82 60       	ori	r24, 0x02	; 2
 604:	80 83       	st	Z, r24
			
			stationMode = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 14 01 	sts	0x0114, r24
			if(steeringData == 0)
 60c:	80 91 11 01 	lds	r24, 0x0111
 610:	81 11       	cpse	r24, r1
 612:	04 c0       	rjmp	.+8      	; 0x61c <moveRobot+0xa6>
			{
				side = 1;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 00 01 	sts	0x0100, r24
 61a:	08 95       	ret
				
			} else if(steeringData == 128)
 61c:	80 91 11 01 	lds	r24, 0x0111
 620:	80 38       	cpi	r24, 0x80	; 128
 622:	69 f4       	brne	.+26     	; 0x63e <moveRobot+0xc8>
			{
				side = 0;
 624:	10 92 00 01 	sts	0x0100, r1
 628:	08 95       	ret
			}
			
		} else if(steeringData == 0b00000101)
 62a:	80 91 11 01 	lds	r24, 0x0111
 62e:	85 30       	cpi	r24, 0x05	; 5
 630:	09 f4       	brne	.+2      	; 0x634 <moveRobot+0xbe>
		{
			rotateCW();
 632:	98 cf       	rjmp	.-208    	; 0x564 <rotateCW>
		} else if(steeringData == 0b00000110)
 634:	80 91 11 01 	lds	r24, 0x0111
 638:	86 30       	cpi	r24, 0x06	; 6
 63a:	09 f4       	brne	.+2      	; 0x63e <moveRobot+0xc8>
		{
			rotateCCW();
 63c:	8a cf       	rjmp	.-236    	; 0x552 <rotateCCW>
 63e:	08 95       	ret

00000640 <changeProportional>:
	}
}

void changeProportional(uint8_t newKp)
{
	Kp = newKp;
 640:	80 93 1a 01 	sts	0x011A, r24
 644:	08 95       	ret

00000646 <changeDerivative>:
}

void changeDerivative(uint8_t newKd)
{
	Kd = newKd;
 646:	80 93 15 01 	sts	0x0115, r24
 64a:	08 95       	ret

0000064c <USARTTransmit>:
 64c:	5b 9a       	sbi	0x0b, 3	; 11
 64e:	e0 ec       	ldi	r30, 0xC0	; 192
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	90 81       	ld	r25, Z
 654:	95 ff       	sbrs	r25, 5
 656:	fd cf       	rjmp	.-6      	; 0x652 <USARTTransmit+0x6>
 658:	80 93 c6 00 	sts	0x00C6, r24
 65c:	08 95       	ret

0000065e <moveSingleServo>:
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	00 d0       	rcall	.+0      	; 0x66a <moveSingleServo+0xc>
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	f6 2e       	mov	r15, r22
 670:	04 2f       	mov	r16, r20
 672:	12 2f       	mov	r17, r18
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	e8 df       	rcall	.-48     	; 0x64c <USARTTransmit>
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	e6 df       	rcall	.-52     	; 0x64c <USARTTransmit>
 680:	81 2f       	mov	r24, r17
 682:	e4 df       	rcall	.-56     	; 0x64c <USARTTransmit>
 684:	87 e0       	ldi	r24, 0x07	; 7
 686:	e2 df       	rcall	.-60     	; 0x64c <USARTTransmit>
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	e0 df       	rcall	.-64     	; 0x64c <USARTTransmit>
 68c:	8e e1       	ldi	r24, 0x1E	; 30
 68e:	de df       	rcall	.-68     	; 0x64c <USARTTransmit>
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	dc df       	rcall	.-72     	; 0x64c <USARTTransmit>
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	da df       	rcall	.-76     	; 0x64c <USARTTransmit>
 698:	8f 2d       	mov	r24, r15
 69a:	d8 df       	rcall	.-80     	; 0x64c <USARTTransmit>
 69c:	80 2f       	mov	r24, r16
 69e:	d6 df       	rcall	.-84     	; 0x64c <USARTTransmit>
 6a0:	99 81       	ldd	r25, Y+1	; 0x01
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	89 0f       	add	r24, r25
 6a6:	88 5d       	subi	r24, 0xD8	; 216
 6a8:	f8 0e       	add	r15, r24
 6aa:	0f 0d       	add	r16, r15
 6ac:	80 2f       	mov	r24, r16
 6ae:	81 0f       	add	r24, r17
 6b0:	80 95       	com	r24
 6b2:	cc df       	rcall	.-104    	; 0x64c <USARTTransmit>
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ff 90       	pop	r15
 6c2:	08 95       	ret

000006c4 <moveDoubleServo>:
 6c4:	ef 92       	push	r14
 6c6:	ff 92       	push	r15
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <moveDoubleServo+0xe>
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <moveDoubleServo+0x10>
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <moveDoubleServo+0x12>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	f6 2e       	mov	r15, r22
 6dc:	14 2f       	mov	r17, r20
 6de:	e2 2e       	mov	r14, r18
 6e0:	af ef       	ldi	r26, 0xFF	; 255
 6e2:	b3 e0       	ldi	r27, 0x03	; 3
 6e4:	a8 1b       	sub	r26, r24
 6e6:	b9 0b       	sbc	r27, r25
 6e8:	ba 83       	std	Y+2, r27	; 0x02
 6ea:	a9 83       	std	Y+1, r26	; 0x01
 6ec:	8b 83       	std	Y+3, r24	; 0x03
 6ee:	9c 83       	std	Y+4, r25	; 0x04
 6f0:	e9 81       	ldd	r30, Y+1	; 0x01
 6f2:	fa 81       	ldd	r31, Y+2	; 0x02
 6f4:	ed 83       	std	Y+5, r30	; 0x05
 6f6:	e9 81       	ldd	r30, Y+1	; 0x01
 6f8:	fa 81       	ldd	r31, Y+2	; 0x02
 6fa:	fe 83       	std	Y+6, r31	; 0x06
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	a6 df       	rcall	.-180    	; 0x64c <USARTTransmit>
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	a4 df       	rcall	.-184    	; 0x64c <USARTTransmit>
 704:	8e ef       	ldi	r24, 0xFE	; 254
 706:	a2 df       	rcall	.-188    	; 0x64c <USARTTransmit>
 708:	8e e0       	ldi	r24, 0x0E	; 14
 70a:	a0 df       	rcall	.-192    	; 0x64c <USARTTransmit>
 70c:	83 e8       	ldi	r24, 0x83	; 131
 70e:	9e df       	rcall	.-196    	; 0x64c <USARTTransmit>
 710:	8e e1       	ldi	r24, 0x1E	; 30
 712:	9c df       	rcall	.-200    	; 0x64c <USARTTransmit>
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	9a df       	rcall	.-204    	; 0x64c <USARTTransmit>
 718:	8e 2d       	mov	r24, r14
 71a:	98 df       	rcall	.-208    	; 0x64c <USARTTransmit>
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	96 df       	rcall	.-212    	; 0x64c <USARTTransmit>
 720:	8c 81       	ldd	r24, Y+4	; 0x04
 722:	94 df       	rcall	.-216    	; 0x64c <USARTTransmit>
 724:	8f 2d       	mov	r24, r15
 726:	92 df       	rcall	.-220    	; 0x64c <USARTTransmit>
 728:	81 2f       	mov	r24, r17
 72a:	90 df       	rcall	.-224    	; 0x64c <USARTTransmit>
 72c:	80 2f       	mov	r24, r16
 72e:	8e df       	rcall	.-228    	; 0x64c <USARTTransmit>
 730:	8d 81       	ldd	r24, Y+5	; 0x05
 732:	8c df       	rcall	.-232    	; 0x64c <USARTTransmit>
 734:	8e 81       	ldd	r24, Y+6	; 0x06
 736:	8a df       	rcall	.-236    	; 0x64c <USARTTransmit>
 738:	8f 2d       	mov	r24, r15
 73a:	88 df       	rcall	.-240    	; 0x64c <USARTTransmit>
 73c:	81 2f       	mov	r24, r17
 73e:	86 df       	rcall	.-244    	; 0x64c <USARTTransmit>
 740:	3b 81       	ldd	r19, Y+3	; 0x03
 742:	8c 81       	ldd	r24, Y+4	; 0x04
 744:	2d 81       	ldd	r18, Y+5	; 0x05
 746:	9e 81       	ldd	r25, Y+6	; 0x06
 748:	83 0f       	add	r24, r19
 74a:	8f 54       	subi	r24, 0x4F	; 79
 74c:	82 0f       	add	r24, r18
 74e:	89 0f       	add	r24, r25
 750:	8f 0d       	add	r24, r15
 752:	f8 0e       	add	r15, r24
 754:	f1 0e       	add	r15, r17
 756:	1f 0d       	add	r17, r15
 758:	e1 0e       	add	r14, r17
 75a:	8e 2d       	mov	r24, r14
 75c:	80 0f       	add	r24, r16
 75e:	80 95       	com	r24
 760:	75 df       	rcall	.-278    	; 0x64c <USARTTransmit>
 762:	26 96       	adiw	r28, 0x06	; 6
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	08 95       	ret

0000077c <defaultPosition>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	27 e0       	ldi	r18, 0x07	; 7
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	60 e5       	ldi	r22, 0x50	; 80
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	69 df       	rcall	.-302    	; 0x65e <moveSingleServo>
 78c:	26 e0       	ldi	r18, 0x06	; 6
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	60 e5       	ldi	r22, 0x50	; 80
 792:	82 e3       	ldi	r24, 0x32	; 50
 794:	93 e0       	ldi	r25, 0x03	; 3
 796:	63 df       	rcall	.-314    	; 0x65e <moveSingleServo>
 798:	03 e0       	ldi	r16, 0x03	; 3
 79a:	10 e0       	ldi	r17, 0x00	; 0
 79c:	22 e0       	ldi	r18, 0x02	; 2
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	60 e5       	ldi	r22, 0x50	; 80
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	8e df       	rcall	.-228    	; 0x6c4 <moveDoubleServo>
 7a8:	05 e0       	ldi	r16, 0x05	; 5
 7aa:	10 e0       	ldi	r17, 0x00	; 0
 7ac:	24 e0       	ldi	r18, 0x04	; 4
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	60 e5       	ldi	r22, 0x50	; 80
 7b2:	8c ec       	ldi	r24, 0xCC	; 204
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	86 df       	rcall	.-244    	; 0x6c4 <moveDoubleServo>
 7b8:	03 e0       	ldi	r16, 0x03	; 3
 7ba:	10 e0       	ldi	r17, 0x00	; 0
 7bc:	22 e0       	ldi	r18, 0x02	; 2
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	60 e5       	ldi	r22, 0x50	; 80
 7c2:	8c ec       	ldi	r24, 0xCC	; 204
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	7e df       	rcall	.-260    	; 0x6c4 <moveDoubleServo>
 7c8:	21 e0       	ldi	r18, 0x01	; 1
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	60 e2       	ldi	r22, 0x20	; 32
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	45 df       	rcall	.-374    	; 0x65e <moveSingleServo>
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	90 93 09 01 	sts	0x0109, r25
 7dc:	80 93 08 01 	sts	0x0108, r24
 7e0:	2c ec       	ldi	r18, 0xCC	; 204
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	30 93 05 01 	sts	0x0105, r19
 7e8:	20 93 04 01 	sts	0x0104, r18
 7ec:	30 93 17 01 	sts	0x0117, r19
 7f0:	20 93 16 01 	sts	0x0116, r18
 7f4:	22 e3       	ldi	r18, 0x32	; 50
 7f6:	33 e0       	ldi	r19, 0x03	; 3
 7f8:	30 93 20 01 	sts	0x0120, r19
 7fc:	20 93 1f 01 	sts	0x011F, r18
 800:	90 93 1e 01 	sts	0x011E, r25
 804:	80 93 1d 01 	sts	0x011D, r24
 808:	1f 91       	pop	r17
 80a:	0f 91       	pop	r16
 80c:	08 95       	ret

0000080e <armInit>:
 80e:	53 9a       	sbi	0x0a, 3	; 10
 810:	10 92 c5 00 	sts	0x00C5, r1
 814:	10 92 c4 00 	sts	0x00C4, r1
 818:	88 e1       	ldi	r24, 0x18	; 24
 81a:	80 93 c1 00 	sts	0x00C1, r24
 81e:	86 e0       	ldi	r24, 0x06	; 6
 820:	80 93 c2 00 	sts	0x00C2, r24
 824:	ab df       	rcall	.-170    	; 0x77c <defaultPosition>
 826:	28 e0       	ldi	r18, 0x08	; 8
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	60 e5       	ldi	r22, 0x50	; 80
 82c:	8f ef       	ldi	r24, 0xFF	; 255
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	16 cf       	rjmp	.-468    	; 0x65e <moveSingleServo>

00000832 <pickupDefaultPosition>:
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	ee e6       	ldi	r30, 0x6E	; 110
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	8d 7f       	andi	r24, 0xFD	; 253
 83e:	80 83       	st	Z, r24
 840:	80 91 00 01 	lds	r24, 0x0100
 844:	81 11       	cpse	r24, r1
 846:	0d c0       	rjmp	.+26     	; 0x862 <pickupDefaultPosition+0x30>
 848:	21 e0       	ldi	r18, 0x01	; 1
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	60 e8       	ldi	r22, 0x80	; 128
 84e:	82 e3       	ldi	r24, 0x32	; 50
 850:	93 e0       	ldi	r25, 0x03	; 3
 852:	05 df       	rcall	.-502    	; 0x65e <moveSingleServo>
 854:	82 e3       	ldi	r24, 0x32	; 50
 856:	93 e0       	ldi	r25, 0x03	; 3
 858:	90 93 09 01 	sts	0x0109, r25
 85c:	80 93 08 01 	sts	0x0108, r24
 860:	0e c0       	rjmp	.+28     	; 0x87e <pickupDefaultPosition+0x4c>
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	61 f4       	brne	.+24     	; 0x87e <pickupDefaultPosition+0x4c>
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	60 e8       	ldi	r22, 0x80	; 128
 86c:	8c ec       	ldi	r24, 0xCC	; 204
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	f6 de       	rcall	.-532    	; 0x65e <moveSingleServo>
 872:	8c ec       	ldi	r24, 0xCC	; 204
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	90 93 09 01 	sts	0x0109, r25
 87a:	80 93 08 01 	sts	0x0108, r24
 87e:	03 e0       	ldi	r16, 0x03	; 3
 880:	10 e0       	ldi	r17, 0x00	; 0
 882:	22 e0       	ldi	r18, 0x02	; 2
 884:	40 e0       	ldi	r20, 0x00	; 0
 886:	60 ef       	ldi	r22, 0xF0	; 240
 888:	80 e7       	ldi	r24, 0x70	; 112
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	1b df       	rcall	.-458    	; 0x6c4 <moveDoubleServo>
 88e:	05 e0       	ldi	r16, 0x05	; 5
 890:	10 e0       	ldi	r17, 0x00	; 0
 892:	24 e0       	ldi	r18, 0x04	; 4
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	60 ef       	ldi	r22, 0xF0	; 240
 898:	88 e8       	ldi	r24, 0x88	; 136
 89a:	92 e0       	ldi	r25, 0x02	; 2
 89c:	13 df       	rcall	.-474    	; 0x6c4 <moveDoubleServo>
 89e:	26 e0       	ldi	r18, 0x06	; 6
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	60 ef       	ldi	r22, 0xF0	; 240
 8a4:	84 e4       	ldi	r24, 0x44	; 68
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	da de       	rcall	.-588    	; 0x65e <moveSingleServo>
 8aa:	27 e0       	ldi	r18, 0x07	; 7
 8ac:	41 e0       	ldi	r20, 0x01	; 1
 8ae:	60 e5       	ldi	r22, 0x50	; 80
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	d4 de       	rcall	.-600    	; 0x65e <moveSingleServo>
 8b6:	28 e0       	ldi	r18, 0x08	; 8
 8b8:	40 e0       	ldi	r20, 0x00	; 0
 8ba:	60 e5       	ldi	r22, 0x50	; 80
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	ce de       	rcall	.-612    	; 0x65e <moveSingleServo>
 8c2:	80 e7       	ldi	r24, 0x70	; 112
 8c4:	92 e0       	ldi	r25, 0x02	; 2
 8c6:	90 93 05 01 	sts	0x0105, r25
 8ca:	80 93 04 01 	sts	0x0104, r24
 8ce:	88 e8       	ldi	r24, 0x88	; 136
 8d0:	92 e0       	ldi	r25, 0x02	; 2
 8d2:	90 93 17 01 	sts	0x0117, r25
 8d6:	80 93 16 01 	sts	0x0116, r24
 8da:	84 e4       	ldi	r24, 0x44	; 68
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	90 93 20 01 	sts	0x0120, r25
 8e2:	80 93 1f 01 	sts	0x011F, r24
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	90 93 1e 01 	sts	0x011E, r25
 8ee:	80 93 1d 01 	sts	0x011D, r24
 8f2:	90 93 24 01 	sts	0x0124, r25
 8f6:	80 93 23 01 	sts	0x0123, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8fa:	2f ef       	ldi	r18, 0xFF	; 255
 8fc:	83 ed       	ldi	r24, 0xD3	; 211
 8fe:	90 e3       	ldi	r25, 0x30	; 48
 900:	21 50       	subi	r18, 0x01	; 1
 902:	80 40       	sbci	r24, 0x00	; 0
 904:	90 40       	sbci	r25, 0x00	; 0
 906:	e1 f7       	brne	.-8      	; 0x900 <pickupDefaultPosition+0xce>
 908:	00 c0       	rjmp	.+0      	; 0x90a <pickupDefaultPosition+0xd8>
 90a:	00 00       	nop
 90c:	ee e6       	ldi	r30, 0x6E	; 110
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	82 60       	ori	r24, 0x02	; 2
 914:	80 83       	st	Z, r24
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <dropItem>:
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	80 91 00 01 	lds	r24, 0x0100
 924:	81 11       	cpse	r24, r1
 926:	07 c0       	rjmp	.+14     	; 0x936 <dropItem+0x1a>
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	60 e8       	ldi	r22, 0x80	; 128
 92e:	82 e3       	ldi	r24, 0x32	; 50
 930:	93 e0       	ldi	r25, 0x03	; 3
 932:	95 de       	rcall	.-726    	; 0x65e <moveSingleServo>
 934:	08 c0       	rjmp	.+16     	; 0x946 <dropItem+0x2a>
 936:	81 30       	cpi	r24, 0x01	; 1
 938:	31 f4       	brne	.+12     	; 0x946 <dropItem+0x2a>
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	40 e0       	ldi	r20, 0x00	; 0
 93e:	60 e8       	ldi	r22, 0x80	; 128
 940:	8c ec       	ldi	r24, 0xCC	; 204
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	8c de       	rcall	.-744    	; 0x65e <moveSingleServo>
 946:	2f ef       	ldi	r18, 0xFF	; 255
 948:	87 ea       	ldi	r24, 0xA7	; 167
 94a:	91 e6       	ldi	r25, 0x61	; 97
 94c:	21 50       	subi	r18, 0x01	; 1
 94e:	80 40       	sbci	r24, 0x00	; 0
 950:	90 40       	sbci	r25, 0x00	; 0
 952:	e1 f7       	brne	.-8      	; 0x94c <dropItem+0x30>
 954:	00 c0       	rjmp	.+0      	; 0x956 <dropItem+0x3a>
 956:	00 00       	nop
 958:	03 e0       	ldi	r16, 0x03	; 3
 95a:	10 e0       	ldi	r17, 0x00	; 0
 95c:	22 e0       	ldi	r18, 0x02	; 2
 95e:	40 e0       	ldi	r20, 0x00	; 0
 960:	60 e6       	ldi	r22, 0x60	; 96
 962:	80 91 01 01 	lds	r24, 0x0101
 966:	90 91 02 01 	lds	r25, 0x0102
 96a:	ac de       	rcall	.-680    	; 0x6c4 <moveDoubleServo>
 96c:	05 e0       	ldi	r16, 0x05	; 5
 96e:	10 e0       	ldi	r17, 0x00	; 0
 970:	24 e0       	ldi	r18, 0x04	; 4
 972:	40 e0       	ldi	r20, 0x00	; 0
 974:	60 e6       	ldi	r22, 0x60	; 96
 976:	80 91 0a 01 	lds	r24, 0x010A
 97a:	90 91 0b 01 	lds	r25, 0x010B
 97e:	a2 de       	rcall	.-700    	; 0x6c4 <moveDoubleServo>
 980:	26 e0       	ldi	r18, 0x06	; 6
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	60 e6       	ldi	r22, 0x60	; 96
 986:	80 91 0d 01 	lds	r24, 0x010D
 98a:	90 91 0e 01 	lds	r25, 0x010E
 98e:	67 de       	rcall	.-818    	; 0x65e <moveSingleServo>
 990:	27 e0       	ldi	r18, 0x07	; 7
 992:	41 e0       	ldi	r20, 0x01	; 1
 994:	60 e5       	ldi	r22, 0x50	; 80
 996:	80 91 21 01 	lds	r24, 0x0121
 99a:	90 91 22 01 	lds	r25, 0x0122
 99e:	5f de       	rcall	.-834    	; 0x65e <moveSingleServo>
 9a0:	2f ef       	ldi	r18, 0xFF	; 255
 9a2:	8b e7       	ldi	r24, 0x7B	; 123
 9a4:	92 e9       	ldi	r25, 0x92	; 146
 9a6:	21 50       	subi	r18, 0x01	; 1
 9a8:	80 40       	sbci	r24, 0x00	; 0
 9aa:	90 40       	sbci	r25, 0x00	; 0
 9ac:	e1 f7       	brne	.-8      	; 0x9a6 <dropItem+0x8a>
 9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <dropItem+0x94>
 9b0:	00 00       	nop
 9b2:	28 e0       	ldi	r18, 0x08	; 8
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	60 e6       	ldi	r22, 0x60	; 96
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	50 de       	rcall	.-864    	; 0x65e <moveSingleServo>
 9be:	2f ef       	ldi	r18, 0xFF	; 255
 9c0:	87 ea       	ldi	r24, 0xA7	; 167
 9c2:	91 e6       	ldi	r25, 0x61	; 97
 9c4:	21 50       	subi	r18, 0x01	; 1
 9c6:	80 40       	sbci	r24, 0x00	; 0
 9c8:	90 40       	sbci	r25, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <dropItem+0xa8>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <dropItem+0xb2>
 9ce:	00 00       	nop
 9d0:	d5 de       	rcall	.-598    	; 0x77c <defaultPosition>
 9d2:	2f ef       	ldi	r18, 0xFF	; 255
 9d4:	83 ed       	ldi	r24, 0xD3	; 211
 9d6:	90 e3       	ldi	r25, 0x30	; 48
 9d8:	21 50       	subi	r18, 0x01	; 1
 9da:	80 40       	sbci	r24, 0x00	; 0
 9dc:	90 40       	sbci	r25, 0x00	; 0
 9de:	e1 f7       	brne	.-8      	; 0x9d8 <dropItem+0xbc>
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <dropItem+0xc6>
 9e2:	00 00       	nop
 9e4:	bf d1       	rcall	.+894    	; 0xd64 <TXFinishedDrop>
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <moveArm>:
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	86 fb       	bst	r24, 6
 9f2:	99 27       	eor	r25, r25
 9f4:	90 f9       	bld	r25, 0
 9f6:	85 ff       	sbrs	r24, 5
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <moveArm+0x12>
 9fa:	1b df       	rcall	.-458    	; 0x832 <pickupDefaultPosition>
 9fc:	7a c1       	rjmp	.+756    	; 0xcf2 <moveArm+0x306>
 9fe:	99 23       	and	r25, r25
 a00:	39 f0       	breq	.+14     	; 0xa10 <moveArm+0x24>
 a02:	ee e6       	ldi	r30, 0x6E	; 110
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8d 7f       	andi	r24, 0xFD	; 253
 a0a:	80 83       	st	Z, r24
 a0c:	b7 de       	rcall	.-658    	; 0x77c <defaultPosition>
 a0e:	71 c1       	rjmp	.+738    	; 0xcf2 <moveArm+0x306>
 a10:	98 2f       	mov	r25, r24
 a12:	97 70       	andi	r25, 0x07	; 7
 a14:	84 fb       	bst	r24, 4
 a16:	33 27       	eor	r19, r19
 a18:	30 f9       	bld	r19, 0
 a1a:	83 fb       	bst	r24, 3
 a1c:	22 27       	eor	r18, r18
 a1e:	20 f9       	bld	r18, 0
 a20:	91 30       	cpi	r25, 0x01	; 1
 a22:	91 f5       	brne	.+100    	; 0xa88 <moveArm+0x9c>
 a24:	31 11       	cpse	r19, r1
 a26:	18 c0       	rjmp	.+48     	; 0xa58 <moveArm+0x6c>
 a28:	38 ed       	ldi	r19, 0xD8	; 216
 a2a:	32 03       	mulsu	r19, r18
 a2c:	c0 01       	movw	r24, r0
 a2e:	11 24       	eor	r1, r1
 a30:	20 91 08 01 	lds	r18, 0x0108
 a34:	30 91 09 01 	lds	r19, 0x0109
 a38:	82 0f       	add	r24, r18
 a3a:	93 1f       	adc	r25, r19
 a3c:	8a 30       	cpi	r24, 0x0A	; 10
 a3e:	91 05       	cpc	r25, r1
 a40:	09 f4       	brne	.+2      	; 0xa44 <moveArm+0x58>
 a42:	57 c1       	rjmp	.+686    	; 0xcf2 <moveArm+0x306>
 a44:	0a 97       	sbiw	r24, 0x0a	; 10
 a46:	90 93 09 01 	sts	0x0109, r25
 a4a:	80 93 08 01 	sts	0x0108, r24
 a4e:	21 e0       	ldi	r18, 0x01	; 1
 a50:	40 e0       	ldi	r20, 0x00	; 0
 a52:	60 e5       	ldi	r22, 0x50	; 80
 a54:	04 de       	rcall	.-1016   	; 0x65e <moveSingleServo>
 a56:	4d c1       	rjmp	.+666    	; 0xcf2 <moveArm+0x306>
 a58:	80 91 08 01 	lds	r24, 0x0108
 a5c:	90 91 09 01 	lds	r25, 0x0109
 a60:	0a 96       	adiw	r24, 0x0a	; 10
 a62:	48 e2       	ldi	r20, 0x28	; 40
 a64:	24 9f       	mul	r18, r20
 a66:	80 0d       	add	r24, r0
 a68:	91 1d       	adc	r25, r1
 a6a:	11 24       	eor	r1, r1
 a6c:	8f 3f       	cpi	r24, 0xFF	; 255
 a6e:	23 e0       	ldi	r18, 0x03	; 3
 a70:	92 07       	cpc	r25, r18
 a72:	08 f0       	brcs	.+2      	; 0xa76 <moveArm+0x8a>
 a74:	3e c1       	rjmp	.+636    	; 0xcf2 <moveArm+0x306>
 a76:	90 93 09 01 	sts	0x0109, r25
 a7a:	80 93 08 01 	sts	0x0108, r24
 a7e:	21 e0       	ldi	r18, 0x01	; 1
 a80:	40 e0       	ldi	r20, 0x00	; 0
 a82:	60 e5       	ldi	r22, 0x50	; 80
 a84:	ec dd       	rcall	.-1064   	; 0x65e <moveSingleServo>
 a86:	35 c1       	rjmp	.+618    	; 0xcf2 <moveArm+0x306>
 a88:	92 30       	cpi	r25, 0x02	; 2
 a8a:	b1 f5       	brne	.+108    	; 0xaf8 <moveArm+0x10c>
 a8c:	31 11       	cpse	r19, r1
 a8e:	1a c0       	rjmp	.+52     	; 0xac4 <moveArm+0xd8>
 a90:	80 91 04 01 	lds	r24, 0x0104
 a94:	90 91 05 01 	lds	r25, 0x0105
 a98:	0a 97       	sbiw	r24, 0x0a	; 10
 a9a:	48 ed       	ldi	r20, 0xD8	; 216
 a9c:	42 03       	mulsu	r20, r18
 a9e:	90 01       	movw	r18, r0
 aa0:	11 24       	eor	r1, r1
 aa2:	82 0f       	add	r24, r18
 aa4:	93 1f       	adc	r25, r19
 aa6:	8e 3c       	cpi	r24, 0xCE	; 206
 aa8:	91 05       	cpc	r25, r1
 aaa:	08 f4       	brcc	.+2      	; 0xaae <moveArm+0xc2>
 aac:	22 c1       	rjmp	.+580    	; 0xcf2 <moveArm+0x306>
 aae:	90 93 05 01 	sts	0x0105, r25
 ab2:	80 93 04 01 	sts	0x0104, r24
 ab6:	03 e0       	ldi	r16, 0x03	; 3
 ab8:	10 e0       	ldi	r17, 0x00	; 0
 aba:	22 e0       	ldi	r18, 0x02	; 2
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	60 e5       	ldi	r22, 0x50	; 80
 ac0:	01 de       	rcall	.-1022   	; 0x6c4 <moveDoubleServo>
 ac2:	17 c1       	rjmp	.+558    	; 0xcf2 <moveArm+0x306>
 ac4:	80 91 04 01 	lds	r24, 0x0104
 ac8:	90 91 05 01 	lds	r25, 0x0105
 acc:	0a 96       	adiw	r24, 0x0a	; 10
 ace:	38 e2       	ldi	r19, 0x28	; 40
 ad0:	23 9f       	mul	r18, r19
 ad2:	80 0d       	add	r24, r0
 ad4:	91 1d       	adc	r25, r1
 ad6:	11 24       	eor	r1, r1
 ad8:	82 32       	cpi	r24, 0x22	; 34
 ada:	43 e0       	ldi	r20, 0x03	; 3
 adc:	94 07       	cpc	r25, r20
 ade:	08 f0       	brcs	.+2      	; 0xae2 <moveArm+0xf6>
 ae0:	08 c1       	rjmp	.+528    	; 0xcf2 <moveArm+0x306>
 ae2:	90 93 05 01 	sts	0x0105, r25
 ae6:	80 93 04 01 	sts	0x0104, r24
 aea:	03 e0       	ldi	r16, 0x03	; 3
 aec:	10 e0       	ldi	r17, 0x00	; 0
 aee:	22 e0       	ldi	r18, 0x02	; 2
 af0:	40 e0       	ldi	r20, 0x00	; 0
 af2:	60 e5       	ldi	r22, 0x50	; 80
 af4:	e7 dd       	rcall	.-1074   	; 0x6c4 <moveDoubleServo>
 af6:	fd c0       	rjmp	.+506    	; 0xcf2 <moveArm+0x306>
 af8:	93 30       	cpi	r25, 0x03	; 3
 afa:	b1 f5       	brne	.+108    	; 0xb68 <moveArm+0x17c>
 afc:	31 11       	cpse	r19, r1
 afe:	1a c0       	rjmp	.+52     	; 0xb34 <moveArm+0x148>
 b00:	80 91 16 01 	lds	r24, 0x0116
 b04:	90 91 17 01 	lds	r25, 0x0117
 b08:	0a 97       	sbiw	r24, 0x0a	; 10
 b0a:	48 ed       	ldi	r20, 0xD8	; 216
 b0c:	42 03       	mulsu	r20, r18
 b0e:	90 01       	movw	r18, r0
 b10:	11 24       	eor	r1, r1
 b12:	82 0f       	add	r24, r18
 b14:	93 1f       	adc	r25, r19
 b16:	8e 3c       	cpi	r24, 0xCE	; 206
 b18:	91 05       	cpc	r25, r1
 b1a:	08 f4       	brcc	.+2      	; 0xb1e <moveArm+0x132>
 b1c:	ea c0       	rjmp	.+468    	; 0xcf2 <moveArm+0x306>
 b1e:	90 93 17 01 	sts	0x0117, r25
 b22:	80 93 16 01 	sts	0x0116, r24
 b26:	05 e0       	ldi	r16, 0x05	; 5
 b28:	10 e0       	ldi	r17, 0x00	; 0
 b2a:	24 e0       	ldi	r18, 0x04	; 4
 b2c:	40 e0       	ldi	r20, 0x00	; 0
 b2e:	60 e5       	ldi	r22, 0x50	; 80
 b30:	c9 dd       	rcall	.-1134   	; 0x6c4 <moveDoubleServo>
 b32:	df c0       	rjmp	.+446    	; 0xcf2 <moveArm+0x306>
 b34:	80 91 16 01 	lds	r24, 0x0116
 b38:	90 91 17 01 	lds	r25, 0x0117
 b3c:	0a 96       	adiw	r24, 0x0a	; 10
 b3e:	38 e2       	ldi	r19, 0x28	; 40
 b40:	23 9f       	mul	r18, r19
 b42:	80 0d       	add	r24, r0
 b44:	91 1d       	adc	r25, r1
 b46:	11 24       	eor	r1, r1
 b48:	82 32       	cpi	r24, 0x22	; 34
 b4a:	43 e0       	ldi	r20, 0x03	; 3
 b4c:	94 07       	cpc	r25, r20
 b4e:	08 f0       	brcs	.+2      	; 0xb52 <moveArm+0x166>
 b50:	d0 c0       	rjmp	.+416    	; 0xcf2 <moveArm+0x306>
 b52:	90 93 17 01 	sts	0x0117, r25
 b56:	80 93 16 01 	sts	0x0116, r24
 b5a:	05 e0       	ldi	r16, 0x05	; 5
 b5c:	10 e0       	ldi	r17, 0x00	; 0
 b5e:	24 e0       	ldi	r18, 0x04	; 4
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	60 e5       	ldi	r22, 0x50	; 80
 b64:	af dd       	rcall	.-1186   	; 0x6c4 <moveDoubleServo>
 b66:	c5 c0       	rjmp	.+394    	; 0xcf2 <moveArm+0x306>
 b68:	94 30       	cpi	r25, 0x04	; 4
 b6a:	91 f5       	brne	.+100    	; 0xbd0 <moveArm+0x1e4>
 b6c:	31 11       	cpse	r19, r1
 b6e:	18 c0       	rjmp	.+48     	; 0xba0 <moveArm+0x1b4>
 b70:	38 ed       	ldi	r19, 0xD8	; 216
 b72:	32 03       	mulsu	r19, r18
 b74:	c0 01       	movw	r24, r0
 b76:	11 24       	eor	r1, r1
 b78:	40 91 1f 01 	lds	r20, 0x011F
 b7c:	50 91 20 01 	lds	r21, 0x0120
 b80:	84 0f       	add	r24, r20
 b82:	95 1f       	adc	r25, r21
 b84:	8a 30       	cpi	r24, 0x0A	; 10
 b86:	91 05       	cpc	r25, r1
 b88:	09 f4       	brne	.+2      	; 0xb8c <moveArm+0x1a0>
 b8a:	b3 c0       	rjmp	.+358    	; 0xcf2 <moveArm+0x306>
 b8c:	0a 97       	sbiw	r24, 0x0a	; 10
 b8e:	90 93 20 01 	sts	0x0120, r25
 b92:	80 93 1f 01 	sts	0x011F, r24
 b96:	26 e0       	ldi	r18, 0x06	; 6
 b98:	40 e0       	ldi	r20, 0x00	; 0
 b9a:	60 e5       	ldi	r22, 0x50	; 80
 b9c:	60 dd       	rcall	.-1344   	; 0x65e <moveSingleServo>
 b9e:	a9 c0       	rjmp	.+338    	; 0xcf2 <moveArm+0x306>
 ba0:	80 91 1f 01 	lds	r24, 0x011F
 ba4:	90 91 20 01 	lds	r25, 0x0120
 ba8:	0a 96       	adiw	r24, 0x0a	; 10
 baa:	48 e2       	ldi	r20, 0x28	; 40
 bac:	24 9f       	mul	r18, r20
 bae:	80 0d       	add	r24, r0
 bb0:	91 1d       	adc	r25, r1
 bb2:	11 24       	eor	r1, r1
 bb4:	82 33       	cpi	r24, 0x32	; 50
 bb6:	23 e0       	ldi	r18, 0x03	; 3
 bb8:	92 07       	cpc	r25, r18
 bba:	08 f0       	brcs	.+2      	; 0xbbe <moveArm+0x1d2>
 bbc:	9a c0       	rjmp	.+308    	; 0xcf2 <moveArm+0x306>
 bbe:	90 93 20 01 	sts	0x0120, r25
 bc2:	80 93 1f 01 	sts	0x011F, r24
 bc6:	26 e0       	ldi	r18, 0x06	; 6
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	60 e5       	ldi	r22, 0x50	; 80
 bcc:	48 dd       	rcall	.-1392   	; 0x65e <moveSingleServo>
 bce:	91 c0       	rjmp	.+290    	; 0xcf2 <moveArm+0x306>
 bd0:	95 30       	cpi	r25, 0x05	; 5
 bd2:	a1 f5       	brne	.+104    	; 0xc3c <moveArm+0x250>
 bd4:	31 11       	cpse	r19, r1
 bd6:	18 c0       	rjmp	.+48     	; 0xc08 <moveArm+0x21c>
 bd8:	38 ed       	ldi	r19, 0xD8	; 216
 bda:	32 03       	mulsu	r19, r18
 bdc:	c0 01       	movw	r24, r0
 bde:	11 24       	eor	r1, r1
 be0:	40 91 1d 01 	lds	r20, 0x011D
 be4:	50 91 1e 01 	lds	r21, 0x011E
 be8:	84 0f       	add	r24, r20
 bea:	95 1f       	adc	r25, r21
 bec:	8a 30       	cpi	r24, 0x0A	; 10
 bee:	91 05       	cpc	r25, r1
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <moveArm+0x208>
 bf2:	7f c0       	rjmp	.+254    	; 0xcf2 <moveArm+0x306>
 bf4:	0a 97       	sbiw	r24, 0x0a	; 10
 bf6:	90 93 1e 01 	sts	0x011E, r25
 bfa:	80 93 1d 01 	sts	0x011D, r24
 bfe:	27 e0       	ldi	r18, 0x07	; 7
 c00:	40 e0       	ldi	r20, 0x00	; 0
 c02:	60 e5       	ldi	r22, 0x50	; 80
 c04:	2c dd       	rcall	.-1448   	; 0x65e <moveSingleServo>
 c06:	75 c0       	rjmp	.+234    	; 0xcf2 <moveArm+0x306>
 c08:	40 91 1d 01 	lds	r20, 0x011D
 c0c:	50 91 1e 01 	lds	r21, 0x011E
 c10:	46 5f       	subi	r20, 0xF6	; 246
 c12:	5f 4f       	sbci	r21, 0xFF	; 255
 c14:	ca 01       	movw	r24, r20
 c16:	38 e2       	ldi	r19, 0x28	; 40
 c18:	23 9f       	mul	r18, r19
 c1a:	80 0d       	add	r24, r0
 c1c:	91 1d       	adc	r25, r1
 c1e:	11 24       	eor	r1, r1
 c20:	8f 3f       	cpi	r24, 0xFF	; 255
 c22:	43 e0       	ldi	r20, 0x03	; 3
 c24:	94 07       	cpc	r25, r20
 c26:	08 f0       	brcs	.+2      	; 0xc2a <moveArm+0x23e>
 c28:	64 c0       	rjmp	.+200    	; 0xcf2 <moveArm+0x306>
 c2a:	90 93 1e 01 	sts	0x011E, r25
 c2e:	80 93 1d 01 	sts	0x011D, r24
 c32:	27 e0       	ldi	r18, 0x07	; 7
 c34:	40 e0       	ldi	r20, 0x00	; 0
 c36:	60 e5       	ldi	r22, 0x50	; 80
 c38:	12 dd       	rcall	.-1500   	; 0x65e <moveSingleServo>
 c3a:	5b c0       	rjmp	.+182    	; 0xcf2 <moveArm+0x306>
 c3c:	96 30       	cpi	r25, 0x06	; 6
 c3e:	09 f0       	breq	.+2      	; 0xc42 <moveArm+0x256>
 c40:	58 c0       	rjmp	.+176    	; 0xcf2 <moveArm+0x306>
 c42:	31 11       	cpse	r19, r1
 c44:	50 c0       	rjmp	.+160    	; 0xce6 <moveArm+0x2fa>
 c46:	21 11       	cpse	r18, r1
 c48:	27 c0       	rjmp	.+78     	; 0xc98 <moveArm+0x2ac>
 c4a:	28 e0       	ldi	r18, 0x08	; 8
 c4c:	40 e0       	ldi	r20, 0x00	; 0
 c4e:	60 e5       	ldi	r22, 0x50	; 80
 c50:	8b eb       	ldi	r24, 0xBB	; 187
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	04 dd       	rcall	.-1528   	; 0x65e <moveSingleServo>
 c56:	80 91 04 01 	lds	r24, 0x0104
 c5a:	90 91 05 01 	lds	r25, 0x0105
 c5e:	90 93 02 01 	sts	0x0102, r25
 c62:	80 93 01 01 	sts	0x0101, r24
 c66:	80 91 16 01 	lds	r24, 0x0116
 c6a:	90 91 17 01 	lds	r25, 0x0117
 c6e:	90 93 0b 01 	sts	0x010B, r25
 c72:	80 93 0a 01 	sts	0x010A, r24
 c76:	80 91 1f 01 	lds	r24, 0x011F
 c7a:	90 91 20 01 	lds	r25, 0x0120
 c7e:	90 93 0e 01 	sts	0x010E, r25
 c82:	80 93 0d 01 	sts	0x010D, r24
 c86:	80 91 1d 01 	lds	r24, 0x011D
 c8a:	90 91 1e 01 	lds	r25, 0x011E
 c8e:	90 93 22 01 	sts	0x0122, r25
 c92:	80 93 21 01 	sts	0x0121, r24
 c96:	2d c0       	rjmp	.+90     	; 0xcf2 <moveArm+0x306>
 c98:	28 e0       	ldi	r18, 0x08	; 8
 c9a:	40 e0       	ldi	r20, 0x00	; 0
 c9c:	60 e5       	ldi	r22, 0x50	; 80
 c9e:	8c e2       	ldi	r24, 0x2C	; 44
 ca0:	91 e0       	ldi	r25, 0x01	; 1
 ca2:	dd dc       	rcall	.-1606   	; 0x65e <moveSingleServo>
 ca4:	80 91 04 01 	lds	r24, 0x0104
 ca8:	90 91 05 01 	lds	r25, 0x0105
 cac:	90 93 02 01 	sts	0x0102, r25
 cb0:	80 93 01 01 	sts	0x0101, r24
 cb4:	80 91 16 01 	lds	r24, 0x0116
 cb8:	90 91 17 01 	lds	r25, 0x0117
 cbc:	90 93 0b 01 	sts	0x010B, r25
 cc0:	80 93 0a 01 	sts	0x010A, r24
 cc4:	80 91 1f 01 	lds	r24, 0x011F
 cc8:	90 91 20 01 	lds	r25, 0x0120
 ccc:	90 93 0e 01 	sts	0x010E, r25
 cd0:	80 93 0d 01 	sts	0x010D, r24
 cd4:	80 91 1d 01 	lds	r24, 0x011D
 cd8:	90 91 1e 01 	lds	r25, 0x011E
 cdc:	90 93 22 01 	sts	0x0122, r25
 ce0:	80 93 21 01 	sts	0x0121, r24
 ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <moveArm+0x306>
 ce6:	28 e0       	ldi	r18, 0x08	; 8
 ce8:	40 e0       	ldi	r20, 0x00	; 0
 cea:	60 e5       	ldi	r22, 0x50	; 80
 cec:	8f ef       	ldi	r24, 0xFF	; 255
 cee:	91 e0       	ldi	r25, 0x01	; 1
 cf0:	b6 dc       	rcall	.-1684   	; 0x65e <moveSingleServo>
 cf2:	1f 91       	pop	r17
 cf4:	0f 91       	pop	r16
 cf6:	08 95       	ret

00000cf8 <updateServos>:
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	21 e0       	ldi	r18, 0x01	; 1
 cfe:	40 e0       	ldi	r20, 0x00	; 0
 d00:	60 e3       	ldi	r22, 0x30	; 48
 d02:	80 91 08 01 	lds	r24, 0x0108
 d06:	90 91 09 01 	lds	r25, 0x0109
 d0a:	a9 dc       	rcall	.-1710   	; 0x65e <moveSingleServo>
 d0c:	03 e0       	ldi	r16, 0x03	; 3
 d0e:	10 e0       	ldi	r17, 0x00	; 0
 d10:	22 e0       	ldi	r18, 0x02	; 2
 d12:	40 e0       	ldi	r20, 0x00	; 0
 d14:	60 e3       	ldi	r22, 0x30	; 48
 d16:	80 91 04 01 	lds	r24, 0x0104
 d1a:	90 91 05 01 	lds	r25, 0x0105
 d1e:	d2 dc       	rcall	.-1628   	; 0x6c4 <moveDoubleServo>
 d20:	05 e0       	ldi	r16, 0x05	; 5
 d22:	10 e0       	ldi	r17, 0x00	; 0
 d24:	24 e0       	ldi	r18, 0x04	; 4
 d26:	40 e0       	ldi	r20, 0x00	; 0
 d28:	60 e3       	ldi	r22, 0x30	; 48
 d2a:	80 91 16 01 	lds	r24, 0x0116
 d2e:	90 91 17 01 	lds	r25, 0x0117
 d32:	c8 dc       	rcall	.-1648   	; 0x6c4 <moveDoubleServo>
 d34:	26 e0       	ldi	r18, 0x06	; 6
 d36:	40 e0       	ldi	r20, 0x00	; 0
 d38:	60 e3       	ldi	r22, 0x30	; 48
 d3a:	80 91 1f 01 	lds	r24, 0x011F
 d3e:	90 91 20 01 	lds	r25, 0x0120
 d42:	8d dc       	rcall	.-1766   	; 0x65e <moveSingleServo>
 d44:	1f 91       	pop	r17
 d46:	0f 91       	pop	r16
 d48:	08 95       	ret

00000d4a <SPIInitSlave>:
 d4a:	81 e0       	ldi	r24, 0x01	; 1
 d4c:	80 93 1c 01 	sts	0x011C, r24
 d50:	88 e4       	ldi	r24, 0x48	; 72
 d52:	84 b9       	out	0x04, r24	; 4
 d54:	83 ec       	ldi	r24, 0xC3	; 195
 d56:	8c bd       	out	0x2c, r24	; 44
 d58:	78 94       	sei
 d5a:	08 95       	ret

00000d5c <slaveTX>:
 d5c:	8e bd       	out	0x2e, r24	; 46
 d5e:	2b 9a       	sbi	0x05, 3	; 5
 d60:	2b 98       	cbi	0x05, 3	; 5
 d62:	08 95       	ret

00000d64 <TXFinishedDrop>:
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	fa cf       	rjmp	.-12     	; 0xd5c <slaveTX>

00000d68 <_exit>:
 d68:	f8 94       	cli

00000d6a <__stop_program>:
 d6a:	ff cf       	rjmp	.-2      	; 0xd6a <__stop_program>
