
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  00000bea  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000016ea  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e8  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d5f  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f4  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004d9  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000120f  00000000  00000000  000045bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000057cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	30 c0       	rjmp	.+96     	; 0xae <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 31       	cpi	r26, 0x1B	; 27
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a6 d0       	rcall	.+332    	; 0x1f6 <main>
  aa:	53 c5       	rjmp	.+2726   	; 0xb52 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_19>:
#include <avr/interrupt.h>
#include "Servo.h"


ISR(SPI_STC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	data = SPDR;
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	80 93 0c 01 	sts	0x010C, r24
	
	if(waitingForInstruction == 1)
  da:	80 91 14 01 	lds	r24, 0x0114
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	e9 f5       	brne	.+122    	; 0x15c <__vector_19+0xae>
	{
		//waitingForInstruction = 0;
		if(data == 0b10000100)
  e2:	80 91 0c 01 	lds	r24, 0x010C
  e6:	84 38       	cpi	r24, 0x84	; 132
  e8:	31 f4       	brne	.+12     	; 0xf6 <__vector_19+0x48>
		{
			component = SENSOR;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 04 01 	sts	0x0104, r24
			waitingForInstruction = 0;
  f0:	10 92 14 01 	sts	0x0114, r1
  f4:	6d c0       	rjmp	.+218    	; 0x1d0 <__vector_19+0x122>
		} else if (data == 0b10000101)
  f6:	80 91 0c 01 	lds	r24, 0x010C
  fa:	85 38       	cpi	r24, 0x85	; 133
  fc:	31 f4       	brne	.+12     	; 0x10a <__vector_19+0x5c>
		{
			component = WHEEL;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 04 01 	sts	0x0104, r24
			waitingForInstruction = 0;
 104:	10 92 14 01 	sts	0x0114, r1
 108:	63 c0       	rjmp	.+198    	; 0x1d0 <__vector_19+0x122>
		} else if(data == 0b10000110)
 10a:	80 91 0c 01 	lds	r24, 0x010C
 10e:	86 38       	cpi	r24, 0x86	; 134
 110:	31 f4       	brne	.+12     	; 0x11e <__vector_19+0x70>
		{
			waitingForInstruction = 0;
 112:	10 92 14 01 	sts	0x0114, r1
			component = ARM;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 04 01 	sts	0x0104, r24
 11c:	59 c0       	rjmp	.+178    	; 0x1d0 <__vector_19+0x122>
		} else if(data == 0b10000111)
 11e:	80 91 0c 01 	lds	r24, 0x010C
 122:	87 38       	cpi	r24, 0x87	; 135
 124:	31 f4       	brne	.+12     	; 0x132 <__vector_19+0x84>
		{
			component = KPROPORTIONAL;
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 04 01 	sts	0x0104, r24
			waitingForInstruction = 0;
 12c:	10 92 14 01 	sts	0x0114, r1
 130:	4f c0       	rjmp	.+158    	; 0x1d0 <__vector_19+0x122>
		} else if(data == 0b10001011)
 132:	80 91 0c 01 	lds	r24, 0x010C
 136:	8b 38       	cpi	r24, 0x8B	; 139
 138:	31 f4       	brne	.+12     	; 0x146 <__vector_19+0x98>
		{
			component = KDERIVATIVE;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	80 93 04 01 	sts	0x0104, r24
			waitingForInstruction = 0;
 140:	10 92 14 01 	sts	0x0114, r1
 144:	45 c0       	rjmp	.+138    	; 0x1d0 <__vector_19+0x122>
		} else if(data == 0b10001111)
 146:	80 91 0c 01 	lds	r24, 0x010C
 14a:	8f 38       	cpi	r24, 0x8F	; 143
 14c:	09 f0       	breq	.+2      	; 0x150 <__vector_19+0xa2>
 14e:	40 c0       	rjmp	.+128    	; 0x1d0 <__vector_19+0x122>
		{
			component = DROPITEM;
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 04 01 	sts	0x0104, r24
			waitingForInstruction = 0;
 156:	10 92 14 01 	sts	0x0114, r1
 15a:	3a c0       	rjmp	.+116    	; 0x1d0 <__vector_19+0x122>
		}
	}
	else
	{
		waitingForInstruction = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 14 01 	sts	0x0114, r24
		if(component == SENSOR)
 162:	80 91 04 01 	lds	r24, 0x0104
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	31 f4       	brne	.+12     	; 0x176 <__vector_19+0xc8>
		{
			sensorData = data;
 16a:	80 91 0c 01 	lds	r24, 0x010C
 16e:	80 93 09 01 	sts	0x0109, r24
			controlAlgorithm();
 172:	06 d1       	rcall	.+524    	; 0x380 <controlAlgorithm>
 174:	2d c0       	rjmp	.+90     	; 0x1d0 <__vector_19+0x122>
		}else if (component == ARM)
 176:	80 91 04 01 	lds	r24, 0x0104
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	41 f4       	brne	.+16     	; 0x18e <__vector_19+0xe0>
		{
			armData = data;
 17e:	80 91 0c 01 	lds	r24, 0x010C
 182:	80 93 08 01 	sts	0x0108, r24
			moveArm(armData);
 186:	80 91 08 01 	lds	r24, 0x0108
 18a:	7e d3       	rcall	.+1788   	; 0x888 <moveArm>
 18c:	21 c0       	rjmp	.+66     	; 0x1d0 <__vector_19+0x122>
		} else if (component == WHEEL)
 18e:	80 91 04 01 	lds	r24, 0x0104
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_19+0xf4>
		{
			steeringData = data;
 196:	80 91 0c 01 	lds	r24, 0x010C
 19a:	80 93 0a 01 	sts	0x010A, r24
			moveRobot();
 19e:	a2 d1       	rcall	.+836    	; 0x4e4 <moveRobot>
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <__vector_19+0x122>
		}  else if (component == KPROPORTIONAL)
 1a2:	80 91 04 01 	lds	r24, 0x0104
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_19+0x104>
		{
			changeProportional(data);
 1aa:	80 91 0c 01 	lds	r24, 0x010C
 1ae:	e3 d1       	rcall	.+966    	; 0x576 <changeProportional>
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <__vector_19+0x122>
		}  else if (component == KDERIVATIVE)
 1b2:	80 91 04 01 	lds	r24, 0x0104
 1b6:	85 30       	cpi	r24, 0x05	; 5
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <__vector_19+0x114>
		{
			changeDerivative(data);
 1ba:	80 91 0c 01 	lds	r24, 0x010C
 1be:	de d1       	rcall	.+956    	; 0x57c <changeDerivative>
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__vector_19+0x122>
		}  else if (component == DROPITEM)
 1c2:	80 91 04 01 	lds	r24, 0x0104
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <__vector_19+0x122>
		{
			dropItem(data);
 1ca:	80 91 0c 01 	lds	r24, 0x010C
 1ce:	07 d3       	rcall	.+1550   	; 0x7de <dropItem>
		}
	}
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:


int main(void)
{
	SPIInitSlave();
 1f6:	9e d4       	rcall	.+2364   	; 0xb34 <SPIInitSlave>
	drivingSetup();
 1f8:	91 d0       	rcall	.+290    	; 0x31c <drivingSetup>
	armInit();
 1fa:	a4 d2       	rcall	.+1352   	; 0x744 <armInit>
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x6>

000001fe <getError>:
#include "Slave_control.h"
#include <stdlib.h>

/*Function that calculates the line error*/
int8_t getError()
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <getError+0x6>
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	volatile int8_t res = 0; 
 20a:	19 82       	std	Y+1, r1	; 0x01
	volatile int8_t sum = 0; // Sum of all data from active sensors (1,..,7)
 20c:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint8_t counter1 = 0; // Counter which counts number of sensors activated 
 20e:	1b 82       	std	Y+3, r1	; 0x03
	error = 0; // Error from line
 210:	10 92 10 01 	sts	0x0110, r1
	uint8_t lineData; 
	lineData = sensorData;
 214:	40 91 09 01 	lds	r20, 0x0109
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int8_t noShift = 6; noShift >= 0; noShift--)
	{
		res = ((lineData >> noShift) & 0x01);
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	9a 01       	movw	r18, r20
 220:	08 2e       	mov	r0, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <getError+0x2a>
 224:	35 95       	asr	r19
 226:	27 95       	ror	r18
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <getError+0x26>
 22c:	21 70       	andi	r18, 0x01	; 1
 22e:	33 27       	eor	r19, r19
 230:	29 83       	std	Y+1, r18	; 0x01
		if(res == 1)
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	21 30       	cpi	r18, 0x01	; 1
 236:	39 f4       	brne	.+14     	; 0x246 <getError+0x48>
		{
			sum = sum + (7 - noShift);
 238:	2a 81       	ldd	r18, Y+2	; 0x02
 23a:	29 5f       	subi	r18, 0xF9	; 249
 23c:	28 1b       	sub	r18, r24
 23e:	2a 83       	std	Y+2, r18	; 0x02
			counter1++;
 240:	2b 81       	ldd	r18, Y+3	; 0x03
 242:	2f 5f       	subi	r18, 0xFF	; 255
 244:	2b 83       	std	Y+3, r18	; 0x03
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	50 f7       	brcc	.-44     	; 0x21e <getError+0x20>
		}
	}
	if(counter1 == 1)
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	39 f4       	brne	.+14     	; 0x25e <getError+0x60>
	{
		error = sum + (sum-1);
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	89 0f       	add	r24, r25
 256:	81 50       	subi	r24, 0x01	; 1
 258:	80 93 10 01 	sts	0x0110, r24
 25c:	22 c0       	rjmp	.+68     	; 0x2a2 <getError+0xa4>
	} else if(counter1 == 2)
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	29 f4       	brne	.+10     	; 0x26e <getError+0x70>

	{
		error = sum-1;
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	81 50       	subi	r24, 0x01	; 1
 268:	80 93 10 01 	sts	0x0110, r24
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <getError+0xa4>
	} else if(counter1 == 3)
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	a1 f4       	brne	.+40     	; 0x29c <getError+0x9e>
	{
		error = sum*2;
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	88 0f       	add	r24, r24
 278:	80 93 10 01 	sts	0x0110, r24
		error = error/(0b00000011);
 27c:	80 91 10 01 	lds	r24, 0x0110
 280:	96 e5       	ldi	r25, 0x56	; 86
 282:	89 02       	muls	r24, r25
 284:	91 2d       	mov	r25, r1
 286:	11 24       	eor	r1, r1
 288:	87 fd       	sbrc	r24, 7
 28a:	93 95       	inc	r25
 28c:	90 93 10 01 	sts	0x0110, r25
		error = error - 1;
 290:	80 91 10 01 	lds	r24, 0x0110
 294:	81 50       	subi	r24, 0x01	; 1
 296:	80 93 10 01 	sts	0x0110, r24
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <getError+0xa4>
		
	} 
	 else
	{
		error = -8;
 29c:	88 ef       	ldi	r24, 0xF8	; 248
 29e:	80 93 10 01 	sts	0x0110, r24
	}
	error = 7 - error;
 2a2:	90 91 10 01 	lds	r25, 0x0110
 2a6:	87 e0       	ldi	r24, 0x07	; 7
 2a8:	89 1b       	sub	r24, r25
 2aa:	80 93 10 01 	sts	0x0110, r24
	return error;
 2ae:	80 91 10 01 	lds	r24, 0x0110
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <calculateSpeed>:
	}
}

/* function that calculates the speed */
int8_t calculateSpeed(int8_t error)
{
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <calculateSpeed+0x8>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	volatile int16_t speed = 0;
 2ca:	1a 82       	std	Y+2, r1	; 0x02
 2cc:	19 82       	std	Y+1, r1	; 0x01
	
	speed = Kp * error + Kd * (error - prevError);
 2ce:	28 2f       	mov	r18, r24
 2d0:	33 27       	eor	r19, r19
 2d2:	27 fd       	sbrc	r18, 7
 2d4:	30 95       	com	r19
 2d6:	40 91 12 01 	lds	r20, 0x0112
 2da:	42 03       	mulsu	r20, r18
 2dc:	b0 01       	movw	r22, r0
 2de:	43 9f       	mul	r20, r19
 2e0:	70 0d       	add	r23, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	10 91 0d 01 	lds	r17, 0x010D
 2e8:	90 91 07 01 	lds	r25, 0x0107
 2ec:	29 1b       	sub	r18, r25
 2ee:	31 09       	sbc	r19, r1
 2f0:	97 fd       	sbrc	r25, 7
 2f2:	33 95       	inc	r19
 2f4:	12 03       	mulsu	r17, r18
 2f6:	a0 01       	movw	r20, r0
 2f8:	13 9f       	mul	r17, r19
 2fa:	50 0d       	add	r21, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	9b 01       	movw	r18, r22
 300:	24 0f       	add	r18, r20
 302:	35 1f       	adc	r19, r21
 304:	3a 83       	std	Y+2, r19	; 0x02
 306:	29 83       	std	Y+1, r18	; 0x01

	prevError = error;
 308:	80 93 07 01 	sts	0x0107, r24
	return speed;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	08 95       	ret

0000031c <drivingSetup>:

/* function initiates driving */
void drivingSetup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 31c:	81 ef       	ldi	r24, 0xF1	; 241
 31e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 3; //Sets the prescaling to 128
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //Starts the timer
 328:	10 92 85 00 	sts	0x0085, r1
 32c:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 255; //Sets compare register => Robot does not move
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 89 00 	sts	0x0089, r25
 338:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 255; // Sets compare register => Robot does not move
 33c:	90 93 8b 00 	sts	0x008B, r25
 340:	80 93 8a 00 	sts	0x008A, r24
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7); //Sets the data direction for the PWM and direction ports. 
 344:	8a b1       	in	r24, 0x0a	; 10
 346:	80 6f       	ori	r24, 0xF0	; 240
 348:	8a b9       	out	0x0a, r24	; 10
	Kp = 20;
 34a:	84 e1       	ldi	r24, 0x14	; 20
 34c:	80 93 12 01 	sts	0x0112, r24
	Kd = 5;
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	80 93 0d 01 	sts	0x010D, r24
 356:	08 95       	ret

00000358 <drive>:

/* Function that controls both direction and speed of the motors. 
	rightDir, leftDir = 1 => Forward. rightDir, leftDir = 0 => Backward. */
void drive(int rightDir, int leftDir, uint16_t leftSpeed, uint16_t rightSpeed)
{
	if(rightDir == 1)
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	11 f4       	brne	.+4      	; 0x360 <drive+0x8>
	{
		PORTD &= ~(1 << PORTD7);
 35c:	5f 98       	cbi	0x0b, 7	; 11
 35e:	01 c0       	rjmp	.+2      	; 0x362 <drive+0xa>
	}
	else
	{
		PORTD |= (1 << PORTD7);
 360:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(leftDir == 1)
 362:	61 30       	cpi	r22, 0x01	; 1
 364:	71 05       	cpc	r23, r1
 366:	11 f4       	brne	.+4      	; 0x36c <drive+0x14>
	{
		PORTD |= (1 << PORTD6);
 368:	5e 9a       	sbi	0x0b, 6	; 11
 36a:	01 c0       	rjmp	.+2      	; 0x36e <drive+0x16>
	}
	else
	{
		PORTD &= ~(1 << PORTD6);
 36c:	5e 98       	cbi	0x0b, 6	; 11
	}
	OCR1A = rightSpeed;
 36e:	30 93 89 00 	sts	0x0089, r19
 372:	20 93 88 00 	sts	0x0088, r18
	OCR1B = leftSpeed;
 376:	50 93 8b 00 	sts	0x008B, r21
 37a:	40 93 8a 00 	sts	0x008A, r20
 37e:	08 95       	ret

00000380 <controlAlgorithm>:
}

/* Function that controls the robot movement when following a line */
void controlAlgorithm()
{
	error = getError();
 380:	3e df       	rcall	.-388    	; 0x1fe <getError>
 382:	80 93 10 01 	sts	0x0110, r24
		
	if(error == 15)  // No sensors activated
 386:	80 91 10 01 	lds	r24, 0x0110
 38a:	8f 30       	cpi	r24, 0x0F	; 15
 38c:	99 f4       	brne	.+38     	; 0x3b4 <controlAlgorithm+0x34>
	{
		rightWheelSpeed = rightWheelSpeed; 
 38e:	80 91 03 01 	lds	r24, 0x0103
 392:	80 93 03 01 	sts	0x0103, r24
		leftWheelSpeed = leftWheelSpeed;
 396:	80 91 00 01 	lds	r24, 0x0100
 39a:	80 93 00 01 	sts	0x0100, r24
		drive(1, 1, leftWheelSpeed, rightWheelSpeed);
 39e:	20 91 03 01 	lds	r18, 0x0103
 3a2:	40 91 00 01 	lds	r20, 0x0100
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	d2 cf       	rjmp	.-92     	; 0x358 <drive>
	} 	
	else
	{	
		midSpeed = 140;  //Standard speed
 3b4:	8c e8       	ldi	r24, 0x8C	; 140
 3b6:	80 93 11 01 	sts	0x0111, r24
		int16_t speed = calculateSpeed(error);  //calculate new speed 
 3ba:	80 91 10 01 	lds	r24, 0x0110
 3be:	7f df       	rcall	.-258    	; 0x2be <calculateSpeed>
 3c0:	28 2f       	mov	r18, r24
 3c2:	33 27       	eor	r19, r19
 3c4:	27 fd       	sbrc	r18, 7
 3c6:	30 95       	com	r19
		if ((midSpeed-speed) < 10)
 3c8:	90 91 11 01 	lds	r25, 0x0111
 3cc:	49 2f       	mov	r20, r25
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	42 1b       	sub	r20, r18
 3d2:	53 0b       	sbc	r21, r19
 3d4:	4a 30       	cpi	r20, 0x0A	; 10
 3d6:	51 05       	cpc	r21, r1
 3d8:	3c f4       	brge	.+14     	; 0x3e8 <controlAlgorithm+0x68>
		{
			rightWheelSpeed = 3;
 3da:	93 e0       	ldi	r25, 0x03	; 3
 3dc:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 1;
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	90 93 13 01 	sts	0x0113, r25
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <controlAlgorithm+0x86>
		}
		else if ((midSpeed-speed) > 235)
 3e8:	4c 3e       	cpi	r20, 0xEC	; 236
 3ea:	51 05       	cpc	r21, r1
 3ec:	34 f0       	brlt	.+12     	; 0x3fa <controlAlgorithm+0x7a>
		{
			rightWheelSpeed = 100;
 3ee:	94 e6       	ldi	r25, 0x64	; 100
 3f0:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 0;
 3f4:	10 92 13 01 	sts	0x0113, r1
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <controlAlgorithm+0x86>
		}
		else
		{
			rightWheelSpeed = midSpeed - speed;
 3fa:	98 1b       	sub	r25, r24
 3fc:	90 93 03 01 	sts	0x0103, r25
			rightWheelDirection = 1;
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	90 93 13 01 	sts	0x0113, r25
		}
		
		if ((midSpeed+speed) < 10)
 406:	90 91 11 01 	lds	r25, 0x0111
 40a:	29 0f       	add	r18, r25
 40c:	31 1d       	adc	r19, r1
 40e:	2a 30       	cpi	r18, 0x0A	; 10
 410:	31 05       	cpc	r19, r1
 412:	3c f4       	brge	.+14     	; 0x422 <controlAlgorithm+0xa2>
		{
			leftWheelSpeed = 40;
 414:	88 e2       	ldi	r24, 0x28	; 40
 416:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 0b 01 	sts	0x010B, r24
 420:	0f c0       	rjmp	.+30     	; 0x440 <controlAlgorithm+0xc0>
		}
		else if ((midSpeed+speed) > 235)
 422:	2c 3e       	cpi	r18, 0xEC	; 236
 424:	31 05       	cpc	r19, r1
 426:	34 f0       	brlt	.+12     	; 0x434 <controlAlgorithm+0xb4>
		{
			leftWheelSpeed = 80;
 428:	80 e5       	ldi	r24, 0x50	; 80
 42a:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 0;
 42e:	10 92 0b 01 	sts	0x010B, r1
 432:	06 c0       	rjmp	.+12     	; 0x440 <controlAlgorithm+0xc0>
		}
		else
		{
			leftWheelSpeed = midSpeed + speed;
 434:	89 0f       	add	r24, r25
 436:	80 93 00 01 	sts	0x0100, r24
			leftWheelDirection = 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 0b 01 	sts	0x010B, r24
		}
		drive(rightWheelDirection, leftWheelDirection, leftWheelSpeed, rightWheelSpeed);
 440:	20 91 03 01 	lds	r18, 0x0103
 444:	40 91 00 01 	lds	r20, 0x0100
 448:	60 91 0b 01 	lds	r22, 0x010B
 44c:	80 91 13 01 	lds	r24, 0x0113
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	7f cf       	rjmp	.-258    	; 0x358 <drive>

0000045a <driveForward>:
}

/* Function that makes the robot move forward */
void driveForward(uint8_t speed)
{
	drive(1, 1, speed, speed);
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	48 2f       	mov	r20, r24
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	76 cf       	rjmp	.-276    	; 0x358 <drive>

0000046c <driveBackward>:
}
/* Function that makes the robot move backward */
void driveBackward(uint8_t speed)
{
	drive(0, 0, speed, speed);
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	48 2f       	mov	r20, r24
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	6d cf       	rjmp	.-294    	; 0x358 <drive>

0000047e <stop>:
}
/* Function that makes the robot stop */
void stop()
{
	drive(1, 1, 255, 255);
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	4f ef       	ldi	r20, 0xFF	; 255
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	64 cf       	rjmp	.-312    	; 0x358 <drive>

00000490 <driveForwardRight>:
}
/* Function that makes the robot move forward and to the right */
void driveForwardRight(uint8_t speed)
{
	drive(1, 1, speed - 40, speed + 40);
 490:	48 2f       	mov	r20, r24
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	9a 01       	movw	r18, r20
 496:	28 5d       	subi	r18, 0xD8	; 216
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	48 52       	subi	r20, 0x28	; 40
 49c:	51 09       	sbc	r21, r1
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	58 cf       	rjmp	.-336    	; 0x358 <drive>

000004a8 <driveForwardLeft>:
}

/* Function that makes the robot move forward and to the left */
void driveForwardLeft(uint8_t speed)
{
	drive(1, 1, speed + 40, speed - 40);
 4a8:	48 2f       	mov	r20, r24
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	9a 01       	movw	r18, r20
 4ae:	28 52       	subi	r18, 0x28	; 40
 4b0:	31 09       	sbc	r19, r1
 4b2:	48 5d       	subi	r20, 0xD8	; 216
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	4c cf       	rjmp	.-360    	; 0x358 <drive>

000004c0 <rotateCCW>:

/* Function that rotates the robot counterclockwise */
void rotateCCW()
{
	uint8_t speed = 100;
	drive(1, 0, speed, speed);
 4c0:	24 e6       	ldi	r18, 0x64	; 100
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	44 e6       	ldi	r20, 0x64	; 100
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	43 cf       	rjmp	.-378    	; 0x358 <drive>

000004d2 <rotateCW>:

/* Function that rotates the robot clockwise */
void rotateCW()
{
	uint8_t speed = 100;
	drive(0, 1, speed, speed);
 4d2:	24 e6       	ldi	r18, 0x64	; 100
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	44 e6       	ldi	r20, 0x64	; 100
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	3a cf       	rjmp	.-396    	; 0x358 <drive>

000004e4 <moveRobot>:
/* Function that allows the user to control the robot movement via the GUI. */
void moveRobot()
{
	uint8_t FASTSPEED = 80;
	uint8_t SLOWSPEED = 200;
	if(((steeringData & 0x08) >> 3) == 1)
 4e4:	80 91 0a 01 	lds	r24, 0x010A
 4e8:	83 ff       	sbrs	r24, 3
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <moveRobot+0x42>
	{
		if(steeringData == 0b00001100)
 4ec:	80 91 0a 01 	lds	r24, 0x010A
 4f0:	8c 30       	cpi	r24, 0x0C	; 12
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <moveRobot+0x14>
		{
			driveBackward(FASTSPEED);
 4f4:	80 e5       	ldi	r24, 0x50	; 80
 4f6:	ba cf       	rjmp	.-140    	; 0x46c <driveBackward>
		} else if(steeringData == 0b00001011)
 4f8:	80 91 0a 01 	lds	r24, 0x010A
 4fc:	8b 30       	cpi	r24, 0x0B	; 11
 4fe:	11 f4       	brne	.+4      	; 0x504 <moveRobot+0x20>
		{
			driveForwardLeft(FASTSPEED);
 500:	80 e5       	ldi	r24, 0x50	; 80
 502:	d2 cf       	rjmp	.-92     	; 0x4a8 <driveForwardLeft>
		} else if(steeringData == 0b00001010)
 504:	80 91 0a 01 	lds	r24, 0x010A
 508:	8a 30       	cpi	r24, 0x0A	; 10
 50a:	11 f4       	brne	.+4      	; 0x510 <moveRobot+0x2c>
		{
			driveForwardRight(FASTSPEED);
 50c:	80 e5       	ldi	r24, 0x50	; 80
 50e:	c0 cf       	rjmp	.-128    	; 0x490 <driveForwardRight>
		} else if(steeringData == 0b00001001)
 510:	80 91 0a 01 	lds	r24, 0x010A
 514:	89 30       	cpi	r24, 0x09	; 9
 516:	11 f4       	brne	.+4      	; 0x51c <moveRobot+0x38>
		{
			driveForward(FASTSPEED);
 518:	80 e5       	ldi	r24, 0x50	; 80
 51a:	9f cf       	rjmp	.-194    	; 0x45a <driveForward>
		} else if(steeringData == 0b00001000)
 51c:	80 91 0a 01 	lds	r24, 0x010A
 520:	88 30       	cpi	r24, 0x08	; 8
 522:	41 f5       	brne	.+80     	; 0x574 <moveRobot+0x90>
		{
			stop();
 524:	ac cf       	rjmp	.-168    	; 0x47e <stop>
		}
	}	else
	{
		if(steeringData == 0b00000100)
 526:	80 91 0a 01 	lds	r24, 0x010A
 52a:	84 30       	cpi	r24, 0x04	; 4
 52c:	11 f4       	brne	.+4      	; 0x532 <moveRobot+0x4e>
		{
			driveBackward(SLOWSPEED);
 52e:	88 ec       	ldi	r24, 0xC8	; 200
 530:	9d cf       	rjmp	.-198    	; 0x46c <driveBackward>
		} else if(steeringData == 0b00000011)
 532:	80 91 0a 01 	lds	r24, 0x010A
 536:	83 30       	cpi	r24, 0x03	; 3
 538:	11 f4       	brne	.+4      	; 0x53e <moveRobot+0x5a>
		{
			driveForwardLeft(SLOWSPEED);
 53a:	88 ec       	ldi	r24, 0xC8	; 200
 53c:	b5 cf       	rjmp	.-150    	; 0x4a8 <driveForwardLeft>
		} else if(steeringData == 0b00000010)
 53e:	80 91 0a 01 	lds	r24, 0x010A
 542:	82 30       	cpi	r24, 0x02	; 2
 544:	11 f4       	brne	.+4      	; 0x54a <moveRobot+0x66>
		{
			driveForwardRight(SLOWSPEED);
 546:	88 ec       	ldi	r24, 0xC8	; 200
 548:	a3 cf       	rjmp	.-186    	; 0x490 <driveForwardRight>
		} else if(steeringData == 0b00000001)
 54a:	80 91 0a 01 	lds	r24, 0x010A
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	11 f4       	brne	.+4      	; 0x556 <moveRobot+0x72>
		{
			driveForward(SLOWSPEED);
 552:	88 ec       	ldi	r24, 0xC8	; 200
 554:	82 cf       	rjmp	.-252    	; 0x45a <driveForward>
		} else if(steeringData == 0b00000000)
 556:	80 91 0a 01 	lds	r24, 0x010A
 55a:	81 11       	cpse	r24, r1
 55c:	01 c0       	rjmp	.+2      	; 0x560 <moveRobot+0x7c>
		{
			stop();
 55e:	8f cf       	rjmp	.-226    	; 0x47e <stop>
		} else if(steeringData == 0b00000101)
 560:	80 91 0a 01 	lds	r24, 0x010A
 564:	85 30       	cpi	r24, 0x05	; 5
 566:	09 f4       	brne	.+2      	; 0x56a <moveRobot+0x86>
		{
			rotateCW();
 568:	b4 cf       	rjmp	.-152    	; 0x4d2 <rotateCW>
		} else if(steeringData == 0b00000110)
 56a:	80 91 0a 01 	lds	r24, 0x010A
 56e:	86 30       	cpi	r24, 0x06	; 6
 570:	09 f4       	brne	.+2      	; 0x574 <moveRobot+0x90>
		{
			rotateCCW();
 572:	a6 cf       	rjmp	.-180    	; 0x4c0 <rotateCCW>
 574:	08 95       	ret

00000576 <changeProportional>:
	}
}

void changeProportional(uint8_t newKp)
{
	Kp = newKp;
 576:	80 93 12 01 	sts	0x0112, r24
 57a:	08 95       	ret

0000057c <changeDerivative>:
}

void changeDerivative(uint8_t newKd)
{
	Kd = newKd;
 57c:	80 93 0d 01 	sts	0x010D, r24
 580:	08 95       	ret

00000582 <USARTTransmit>:
 582:	5b 9a       	sbi	0x0b, 3	; 11
 584:	e0 ec       	ldi	r30, 0xC0	; 192
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	90 81       	ld	r25, Z
 58a:	95 ff       	sbrs	r25, 5
 58c:	fd cf       	rjmp	.-6      	; 0x588 <USARTTransmit+0x6>
 58e:	80 93 c6 00 	sts	0x00C6, r24
 592:	08 95       	ret

00000594 <moveSingleServo>:
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <moveSingleServo+0xc>
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	f6 2e       	mov	r15, r22
 5a6:	04 2f       	mov	r16, r20
 5a8:	12 2f       	mov	r17, r18
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	9a 83       	std	Y+2, r25	; 0x02
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	e8 df       	rcall	.-48     	; 0x582 <USARTTransmit>
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	e6 df       	rcall	.-52     	; 0x582 <USARTTransmit>
 5b6:	81 2f       	mov	r24, r17
 5b8:	e4 df       	rcall	.-56     	; 0x582 <USARTTransmit>
 5ba:	87 e0       	ldi	r24, 0x07	; 7
 5bc:	e2 df       	rcall	.-60     	; 0x582 <USARTTransmit>
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	e0 df       	rcall	.-64     	; 0x582 <USARTTransmit>
 5c2:	8e e1       	ldi	r24, 0x1E	; 30
 5c4:	de df       	rcall	.-68     	; 0x582 <USARTTransmit>
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	dc df       	rcall	.-72     	; 0x582 <USARTTransmit>
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	da df       	rcall	.-76     	; 0x582 <USARTTransmit>
 5ce:	8f 2d       	mov	r24, r15
 5d0:	d8 df       	rcall	.-80     	; 0x582 <USARTTransmit>
 5d2:	80 2f       	mov	r24, r16
 5d4:	d6 df       	rcall	.-84     	; 0x582 <USARTTransmit>
 5d6:	99 81       	ldd	r25, Y+1	; 0x01
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	89 0f       	add	r24, r25
 5dc:	88 5d       	subi	r24, 0xD8	; 216
 5de:	f8 0e       	add	r15, r24
 5e0:	0f 0d       	add	r16, r15
 5e2:	80 2f       	mov	r24, r16
 5e4:	81 0f       	add	r24, r17
 5e6:	80 95       	com	r24
 5e8:	cc df       	rcall	.-104    	; 0x582 <USARTTransmit>
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	08 95       	ret

000005fa <moveDoubleServo>:
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	00 d0       	rcall	.+0      	; 0x608 <moveDoubleServo+0xe>
 608:	00 d0       	rcall	.+0      	; 0x60a <moveDoubleServo+0x10>
 60a:	00 d0       	rcall	.+0      	; 0x60c <moveDoubleServo+0x12>
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	f6 2e       	mov	r15, r22
 612:	14 2f       	mov	r17, r20
 614:	e2 2e       	mov	r14, r18
 616:	af ef       	ldi	r26, 0xFF	; 255
 618:	b3 e0       	ldi	r27, 0x03	; 3
 61a:	a8 1b       	sub	r26, r24
 61c:	b9 0b       	sbc	r27, r25
 61e:	ba 83       	std	Y+2, r27	; 0x02
 620:	a9 83       	std	Y+1, r26	; 0x01
 622:	8b 83       	std	Y+3, r24	; 0x03
 624:	9c 83       	std	Y+4, r25	; 0x04
 626:	e9 81       	ldd	r30, Y+1	; 0x01
 628:	fa 81       	ldd	r31, Y+2	; 0x02
 62a:	ed 83       	std	Y+5, r30	; 0x05
 62c:	e9 81       	ldd	r30, Y+1	; 0x01
 62e:	fa 81       	ldd	r31, Y+2	; 0x02
 630:	fe 83       	std	Y+6, r31	; 0x06
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	a6 df       	rcall	.-180    	; 0x582 <USARTTransmit>
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	a4 df       	rcall	.-184    	; 0x582 <USARTTransmit>
 63a:	8e ef       	ldi	r24, 0xFE	; 254
 63c:	a2 df       	rcall	.-188    	; 0x582 <USARTTransmit>
 63e:	8e e0       	ldi	r24, 0x0E	; 14
 640:	a0 df       	rcall	.-192    	; 0x582 <USARTTransmit>
 642:	83 e8       	ldi	r24, 0x83	; 131
 644:	9e df       	rcall	.-196    	; 0x582 <USARTTransmit>
 646:	8e e1       	ldi	r24, 0x1E	; 30
 648:	9c df       	rcall	.-200    	; 0x582 <USARTTransmit>
 64a:	84 e0       	ldi	r24, 0x04	; 4
 64c:	9a df       	rcall	.-204    	; 0x582 <USARTTransmit>
 64e:	8e 2d       	mov	r24, r14
 650:	98 df       	rcall	.-208    	; 0x582 <USARTTransmit>
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	96 df       	rcall	.-212    	; 0x582 <USARTTransmit>
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	94 df       	rcall	.-216    	; 0x582 <USARTTransmit>
 65a:	8f 2d       	mov	r24, r15
 65c:	92 df       	rcall	.-220    	; 0x582 <USARTTransmit>
 65e:	81 2f       	mov	r24, r17
 660:	90 df       	rcall	.-224    	; 0x582 <USARTTransmit>
 662:	80 2f       	mov	r24, r16
 664:	8e df       	rcall	.-228    	; 0x582 <USARTTransmit>
 666:	8d 81       	ldd	r24, Y+5	; 0x05
 668:	8c df       	rcall	.-232    	; 0x582 <USARTTransmit>
 66a:	8e 81       	ldd	r24, Y+6	; 0x06
 66c:	8a df       	rcall	.-236    	; 0x582 <USARTTransmit>
 66e:	8f 2d       	mov	r24, r15
 670:	88 df       	rcall	.-240    	; 0x582 <USARTTransmit>
 672:	81 2f       	mov	r24, r17
 674:	86 df       	rcall	.-244    	; 0x582 <USARTTransmit>
 676:	3b 81       	ldd	r19, Y+3	; 0x03
 678:	8c 81       	ldd	r24, Y+4	; 0x04
 67a:	2d 81       	ldd	r18, Y+5	; 0x05
 67c:	9e 81       	ldd	r25, Y+6	; 0x06
 67e:	83 0f       	add	r24, r19
 680:	8f 54       	subi	r24, 0x4F	; 79
 682:	82 0f       	add	r24, r18
 684:	89 0f       	add	r24, r25
 686:	8f 0d       	add	r24, r15
 688:	f8 0e       	add	r15, r24
 68a:	f1 0e       	add	r15, r17
 68c:	1f 0d       	add	r17, r15
 68e:	e1 0e       	add	r14, r17
 690:	8e 2d       	mov	r24, r14
 692:	80 0f       	add	r24, r16
 694:	80 95       	com	r24
 696:	75 df       	rcall	.-278    	; 0x582 <USARTTransmit>
 698:	26 96       	adiw	r28, 0x06	; 6
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	08 95       	ret

000006b2 <defaultPosition>:
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	27 e0       	ldi	r18, 0x07	; 7
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	60 e5       	ldi	r22, 0x50	; 80
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	69 df       	rcall	.-302    	; 0x594 <moveSingleServo>
 6c2:	26 e0       	ldi	r18, 0x06	; 6
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	60 e5       	ldi	r22, 0x50	; 80
 6c8:	82 e3       	ldi	r24, 0x32	; 50
 6ca:	93 e0       	ldi	r25, 0x03	; 3
 6cc:	63 df       	rcall	.-314    	; 0x594 <moveSingleServo>
 6ce:	03 e0       	ldi	r16, 0x03	; 3
 6d0:	10 e0       	ldi	r17, 0x00	; 0
 6d2:	22 e0       	ldi	r18, 0x02	; 2
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	60 e5       	ldi	r22, 0x50	; 80
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	8e df       	rcall	.-228    	; 0x5fa <moveDoubleServo>
 6de:	05 e0       	ldi	r16, 0x05	; 5
 6e0:	10 e0       	ldi	r17, 0x00	; 0
 6e2:	24 e0       	ldi	r18, 0x04	; 4
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	60 e5       	ldi	r22, 0x50	; 80
 6e8:	8c ec       	ldi	r24, 0xCC	; 204
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	86 df       	rcall	.-244    	; 0x5fa <moveDoubleServo>
 6ee:	03 e0       	ldi	r16, 0x03	; 3
 6f0:	10 e0       	ldi	r17, 0x00	; 0
 6f2:	22 e0       	ldi	r18, 0x02	; 2
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	60 e5       	ldi	r22, 0x50	; 80
 6f8:	8c ec       	ldi	r24, 0xCC	; 204
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	7e df       	rcall	.-260    	; 0x5fa <moveDoubleServo>
 6fe:	21 e0       	ldi	r18, 0x01	; 1
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	60 e2       	ldi	r22, 0x20	; 32
 704:	8f ef       	ldi	r24, 0xFF	; 255
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	45 df       	rcall	.-374    	; 0x594 <moveSingleServo>
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	90 93 06 01 	sts	0x0106, r25
 712:	80 93 05 01 	sts	0x0105, r24
 716:	2c ec       	ldi	r18, 0xCC	; 204
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	30 93 02 01 	sts	0x0102, r19
 71e:	20 93 01 01 	sts	0x0101, r18
 722:	30 93 0f 01 	sts	0x010F, r19
 726:	20 93 0e 01 	sts	0x010E, r18
 72a:	22 e3       	ldi	r18, 0x32	; 50
 72c:	33 e0       	ldi	r19, 0x03	; 3
 72e:	30 93 18 01 	sts	0x0118, r19
 732:	20 93 17 01 	sts	0x0117, r18
 736:	90 93 16 01 	sts	0x0116, r25
 73a:	80 93 15 01 	sts	0x0115, r24
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <armInit>:
 744:	53 9a       	sbi	0x0a, 3	; 10
 746:	10 92 c5 00 	sts	0x00C5, r1
 74a:	10 92 c4 00 	sts	0x00C4, r1
 74e:	88 e1       	ldi	r24, 0x18	; 24
 750:	80 93 c1 00 	sts	0x00C1, r24
 754:	86 e0       	ldi	r24, 0x06	; 6
 756:	80 93 c2 00 	sts	0x00C2, r24
 75a:	ab cf       	rjmp	.-170    	; 0x6b2 <defaultPosition>

0000075c <pickupDefaultPosition>:
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	03 e0       	ldi	r16, 0x03	; 3
 762:	10 e0       	ldi	r17, 0x00	; 0
 764:	22 e0       	ldi	r18, 0x02	; 2
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	60 ef       	ldi	r22, 0xF0	; 240
 76a:	88 e8       	ldi	r24, 0x88	; 136
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	45 df       	rcall	.-374    	; 0x5fa <moveDoubleServo>
 770:	05 e0       	ldi	r16, 0x05	; 5
 772:	10 e0       	ldi	r17, 0x00	; 0
 774:	24 e0       	ldi	r18, 0x04	; 4
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	60 ef       	ldi	r22, 0xF0	; 240
 77a:	88 e8       	ldi	r24, 0x88	; 136
 77c:	92 e0       	ldi	r25, 0x02	; 2
 77e:	3d df       	rcall	.-390    	; 0x5fa <moveDoubleServo>
 780:	26 e0       	ldi	r18, 0x06	; 6
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	60 ef       	ldi	r22, 0xF0	; 240
 786:	8d ec       	ldi	r24, 0xCD	; 205
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	04 df       	rcall	.-504    	; 0x594 <moveSingleServo>
 78c:	27 e0       	ldi	r18, 0x07	; 7
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	60 e5       	ldi	r22, 0x50	; 80
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	fe de       	rcall	.-516    	; 0x594 <moveSingleServo>
 798:	28 e0       	ldi	r18, 0x08	; 8
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	60 e5       	ldi	r22, 0x50	; 80
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	f8 de       	rcall	.-528    	; 0x594 <moveSingleServo>
 7a4:	88 e8       	ldi	r24, 0x88	; 136
 7a6:	92 e0       	ldi	r25, 0x02	; 2
 7a8:	90 93 02 01 	sts	0x0102, r25
 7ac:	80 93 01 01 	sts	0x0101, r24
 7b0:	90 93 0f 01 	sts	0x010F, r25
 7b4:	80 93 0e 01 	sts	0x010E, r24
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	90 93 18 01 	sts	0x0118, r25
 7c0:	80 93 17 01 	sts	0x0117, r24
 7c4:	90 93 16 01 	sts	0x0116, r25
 7c8:	80 93 15 01 	sts	0x0115, r24
 7cc:	8d ec       	ldi	r24, 0xCD	; 205
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	90 93 1a 01 	sts	0x011A, r25
 7d4:	80 93 19 01 	sts	0x0119, r24
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <dropItem>:
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	81 11       	cpse	r24, r1
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <dropItem+0x16>
 7e6:	21 e0       	ldi	r18, 0x01	; 1
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	60 e5       	ldi	r22, 0x50	; 80
 7ec:	82 e3       	ldi	r24, 0x32	; 50
 7ee:	93 e0       	ldi	r25, 0x03	; 3
 7f0:	d1 de       	rcall	.-606    	; 0x594 <moveSingleServo>
 7f2:	08 c0       	rjmp	.+16     	; 0x804 <dropItem+0x26>
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	31 f4       	brne	.+12     	; 0x804 <dropItem+0x26>
 7f8:	21 e0       	ldi	r18, 0x01	; 1
 7fa:	40 e0       	ldi	r20, 0x00	; 0
 7fc:	60 e5       	ldi	r22, 0x50	; 80
 7fe:	8c ec       	ldi	r24, 0xCC	; 204
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	c8 de       	rcall	.-624    	; 0x594 <moveSingleServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 804:	2f ef       	ldi	r18, 0xFF	; 255
 806:	8b e7       	ldi	r24, 0x7B	; 123
 808:	92 e9       	ldi	r25, 0x92	; 146
 80a:	21 50       	subi	r18, 0x01	; 1
 80c:	80 40       	sbci	r24, 0x00	; 0
 80e:	90 40       	sbci	r25, 0x00	; 0
 810:	e1 f7       	brne	.-8      	; 0x80a <dropItem+0x2c>
 812:	00 c0       	rjmp	.+0      	; 0x814 <dropItem+0x36>
 814:	00 00       	nop
 816:	03 e0       	ldi	r16, 0x03	; 3
 818:	10 e0       	ldi	r17, 0x00	; 0
 81a:	22 e0       	ldi	r18, 0x02	; 2
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	60 e6       	ldi	r22, 0x60	; 96
 820:	8c ec       	ldi	r24, 0xCC	; 204
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	ea de       	rcall	.-556    	; 0x5fa <moveDoubleServo>
 826:	05 e0       	ldi	r16, 0x05	; 5
 828:	10 e0       	ldi	r17, 0x00	; 0
 82a:	24 e0       	ldi	r18, 0x04	; 4
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	60 e6       	ldi	r22, 0x60	; 96
 830:	8c ec       	ldi	r24, 0xCC	; 204
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	e2 de       	rcall	.-572    	; 0x5fa <moveDoubleServo>
 836:	26 e0       	ldi	r18, 0x06	; 6
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	60 e6       	ldi	r22, 0x60	; 96
 83c:	81 e1       	ldi	r24, 0x11	; 17
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	a9 de       	rcall	.-686    	; 0x594 <moveSingleServo>
 842:	27 e0       	ldi	r18, 0x07	; 7
 844:	41 e0       	ldi	r20, 0x01	; 1
 846:	60 e5       	ldi	r22, 0x50	; 80
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	a3 de       	rcall	.-698    	; 0x594 <moveSingleServo>
 84e:	2f ef       	ldi	r18, 0xFF	; 255
 850:	8f e4       	ldi	r24, 0x4F	; 79
 852:	93 ec       	ldi	r25, 0xC3	; 195
 854:	21 50       	subi	r18, 0x01	; 1
 856:	80 40       	sbci	r24, 0x00	; 0
 858:	90 40       	sbci	r25, 0x00	; 0
 85a:	e1 f7       	brne	.-8      	; 0x854 <dropItem+0x76>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <dropItem+0x80>
 85e:	00 00       	nop
 860:	28 e0       	ldi	r18, 0x08	; 8
 862:	40 e0       	ldi	r20, 0x00	; 0
 864:	60 e6       	ldi	r22, 0x60	; 96
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	94 de       	rcall	.-728    	; 0x594 <moveSingleServo>
 86c:	2f ef       	ldi	r18, 0xFF	; 255
 86e:	8b e7       	ldi	r24, 0x7B	; 123
 870:	92 e9       	ldi	r25, 0x92	; 146
 872:	21 50       	subi	r18, 0x01	; 1
 874:	80 40       	sbci	r24, 0x00	; 0
 876:	90 40       	sbci	r25, 0x00	; 0
 878:	e1 f7       	brne	.-8      	; 0x872 <dropItem+0x94>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <dropItem+0x9e>
 87c:	00 00       	nop
 87e:	19 df       	rcall	.-462    	; 0x6b2 <defaultPosition>
 880:	66 d1       	rcall	.+716    	; 0xb4e <TXFinishedDrop>
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <moveArm>:
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	86 fb       	bst	r24, 6
 88e:	99 27       	eor	r25, r25
 890:	90 f9       	bld	r25, 0
 892:	85 ff       	sbrs	r24, 5
 894:	02 c0       	rjmp	.+4      	; 0x89a <moveArm+0x12>
 896:	62 df       	rcall	.-316    	; 0x75c <pickupDefaultPosition>
 898:	4a c1       	rjmp	.+660    	; 0xb2e <moveArm+0x2a6>
 89a:	99 23       	and	r25, r25
 89c:	11 f0       	breq	.+4      	; 0x8a2 <moveArm+0x1a>
 89e:	09 df       	rcall	.-494    	; 0x6b2 <defaultPosition>
 8a0:	46 c1       	rjmp	.+652    	; 0xb2e <moveArm+0x2a6>
 8a2:	98 2f       	mov	r25, r24
 8a4:	97 70       	andi	r25, 0x07	; 7
 8a6:	84 fb       	bst	r24, 4
 8a8:	33 27       	eor	r19, r19
 8aa:	30 f9       	bld	r19, 0
 8ac:	83 fb       	bst	r24, 3
 8ae:	22 27       	eor	r18, r18
 8b0:	20 f9       	bld	r18, 0
 8b2:	91 30       	cpi	r25, 0x01	; 1
 8b4:	91 f5       	brne	.+100    	; 0x91a <moveArm+0x92>
 8b6:	31 11       	cpse	r19, r1
 8b8:	18 c0       	rjmp	.+48     	; 0x8ea <moveArm+0x62>
 8ba:	38 ed       	ldi	r19, 0xD8	; 216
 8bc:	32 03       	mulsu	r19, r18
 8be:	c0 01       	movw	r24, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	20 91 05 01 	lds	r18, 0x0105
 8c6:	30 91 06 01 	lds	r19, 0x0106
 8ca:	82 0f       	add	r24, r18
 8cc:	93 1f       	adc	r25, r19
 8ce:	8a 30       	cpi	r24, 0x0A	; 10
 8d0:	91 05       	cpc	r25, r1
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <moveArm+0x4e>
 8d4:	2c c1       	rjmp	.+600    	; 0xb2e <moveArm+0x2a6>
 8d6:	0a 97       	sbiw	r24, 0x0a	; 10
 8d8:	90 93 06 01 	sts	0x0106, r25
 8dc:	80 93 05 01 	sts	0x0105, r24
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	60 e5       	ldi	r22, 0x50	; 80
 8e6:	56 de       	rcall	.-852    	; 0x594 <moveSingleServo>
 8e8:	22 c1       	rjmp	.+580    	; 0xb2e <moveArm+0x2a6>
 8ea:	80 91 05 01 	lds	r24, 0x0105
 8ee:	90 91 06 01 	lds	r25, 0x0106
 8f2:	0a 96       	adiw	r24, 0x0a	; 10
 8f4:	48 e2       	ldi	r20, 0x28	; 40
 8f6:	24 9f       	mul	r18, r20
 8f8:	80 0d       	add	r24, r0
 8fa:	91 1d       	adc	r25, r1
 8fc:	11 24       	eor	r1, r1
 8fe:	8f 3f       	cpi	r24, 0xFF	; 255
 900:	23 e0       	ldi	r18, 0x03	; 3
 902:	92 07       	cpc	r25, r18
 904:	08 f0       	brcs	.+2      	; 0x908 <moveArm+0x80>
 906:	13 c1       	rjmp	.+550    	; 0xb2e <moveArm+0x2a6>
 908:	90 93 06 01 	sts	0x0106, r25
 90c:	80 93 05 01 	sts	0x0105, r24
 910:	21 e0       	ldi	r18, 0x01	; 1
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	60 e5       	ldi	r22, 0x50	; 80
 916:	3e de       	rcall	.-900    	; 0x594 <moveSingleServo>
 918:	0a c1       	rjmp	.+532    	; 0xb2e <moveArm+0x2a6>
 91a:	92 30       	cpi	r25, 0x02	; 2
 91c:	b1 f5       	brne	.+108    	; 0x98a <moveArm+0x102>
 91e:	31 11       	cpse	r19, r1
 920:	1a c0       	rjmp	.+52     	; 0x956 <moveArm+0xce>
 922:	80 91 01 01 	lds	r24, 0x0101
 926:	90 91 02 01 	lds	r25, 0x0102
 92a:	0a 97       	sbiw	r24, 0x0a	; 10
 92c:	48 ed       	ldi	r20, 0xD8	; 216
 92e:	42 03       	mulsu	r20, r18
 930:	90 01       	movw	r18, r0
 932:	11 24       	eor	r1, r1
 934:	82 0f       	add	r24, r18
 936:	93 1f       	adc	r25, r19
 938:	8e 3c       	cpi	r24, 0xCE	; 206
 93a:	91 05       	cpc	r25, r1
 93c:	08 f4       	brcc	.+2      	; 0x940 <moveArm+0xb8>
 93e:	f7 c0       	rjmp	.+494    	; 0xb2e <moveArm+0x2a6>
 940:	90 93 02 01 	sts	0x0102, r25
 944:	80 93 01 01 	sts	0x0101, r24
 948:	03 e0       	ldi	r16, 0x03	; 3
 94a:	10 e0       	ldi	r17, 0x00	; 0
 94c:	22 e0       	ldi	r18, 0x02	; 2
 94e:	40 e0       	ldi	r20, 0x00	; 0
 950:	60 e5       	ldi	r22, 0x50	; 80
 952:	53 de       	rcall	.-858    	; 0x5fa <moveDoubleServo>
 954:	ec c0       	rjmp	.+472    	; 0xb2e <moveArm+0x2a6>
 956:	80 91 01 01 	lds	r24, 0x0101
 95a:	90 91 02 01 	lds	r25, 0x0102
 95e:	0a 96       	adiw	r24, 0x0a	; 10
 960:	38 e2       	ldi	r19, 0x28	; 40
 962:	23 9f       	mul	r18, r19
 964:	80 0d       	add	r24, r0
 966:	91 1d       	adc	r25, r1
 968:	11 24       	eor	r1, r1
 96a:	82 32       	cpi	r24, 0x22	; 34
 96c:	43 e0       	ldi	r20, 0x03	; 3
 96e:	94 07       	cpc	r25, r20
 970:	08 f0       	brcs	.+2      	; 0x974 <moveArm+0xec>
 972:	dd c0       	rjmp	.+442    	; 0xb2e <moveArm+0x2a6>
 974:	90 93 02 01 	sts	0x0102, r25
 978:	80 93 01 01 	sts	0x0101, r24
 97c:	03 e0       	ldi	r16, 0x03	; 3
 97e:	10 e0       	ldi	r17, 0x00	; 0
 980:	22 e0       	ldi	r18, 0x02	; 2
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	60 e5       	ldi	r22, 0x50	; 80
 986:	39 de       	rcall	.-910    	; 0x5fa <moveDoubleServo>
 988:	d2 c0       	rjmp	.+420    	; 0xb2e <moveArm+0x2a6>
 98a:	93 30       	cpi	r25, 0x03	; 3
 98c:	b1 f5       	brne	.+108    	; 0x9fa <moveArm+0x172>
 98e:	31 11       	cpse	r19, r1
 990:	1a c0       	rjmp	.+52     	; 0x9c6 <moveArm+0x13e>
 992:	80 91 0e 01 	lds	r24, 0x010E
 996:	90 91 0f 01 	lds	r25, 0x010F
 99a:	0a 97       	sbiw	r24, 0x0a	; 10
 99c:	48 ed       	ldi	r20, 0xD8	; 216
 99e:	42 03       	mulsu	r20, r18
 9a0:	90 01       	movw	r18, r0
 9a2:	11 24       	eor	r1, r1
 9a4:	82 0f       	add	r24, r18
 9a6:	93 1f       	adc	r25, r19
 9a8:	8e 3c       	cpi	r24, 0xCE	; 206
 9aa:	91 05       	cpc	r25, r1
 9ac:	08 f4       	brcc	.+2      	; 0x9b0 <moveArm+0x128>
 9ae:	bf c0       	rjmp	.+382    	; 0xb2e <moveArm+0x2a6>
 9b0:	90 93 0f 01 	sts	0x010F, r25
 9b4:	80 93 0e 01 	sts	0x010E, r24
 9b8:	05 e0       	ldi	r16, 0x05	; 5
 9ba:	10 e0       	ldi	r17, 0x00	; 0
 9bc:	24 e0       	ldi	r18, 0x04	; 4
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	60 e5       	ldi	r22, 0x50	; 80
 9c2:	1b de       	rcall	.-970    	; 0x5fa <moveDoubleServo>
 9c4:	b4 c0       	rjmp	.+360    	; 0xb2e <moveArm+0x2a6>
 9c6:	80 91 0e 01 	lds	r24, 0x010E
 9ca:	90 91 0f 01 	lds	r25, 0x010F
 9ce:	0a 96       	adiw	r24, 0x0a	; 10
 9d0:	38 e2       	ldi	r19, 0x28	; 40
 9d2:	23 9f       	mul	r18, r19
 9d4:	80 0d       	add	r24, r0
 9d6:	91 1d       	adc	r25, r1
 9d8:	11 24       	eor	r1, r1
 9da:	82 32       	cpi	r24, 0x22	; 34
 9dc:	43 e0       	ldi	r20, 0x03	; 3
 9de:	94 07       	cpc	r25, r20
 9e0:	08 f0       	brcs	.+2      	; 0x9e4 <moveArm+0x15c>
 9e2:	a5 c0       	rjmp	.+330    	; 0xb2e <moveArm+0x2a6>
 9e4:	90 93 0f 01 	sts	0x010F, r25
 9e8:	80 93 0e 01 	sts	0x010E, r24
 9ec:	05 e0       	ldi	r16, 0x05	; 5
 9ee:	10 e0       	ldi	r17, 0x00	; 0
 9f0:	24 e0       	ldi	r18, 0x04	; 4
 9f2:	40 e0       	ldi	r20, 0x00	; 0
 9f4:	60 e5       	ldi	r22, 0x50	; 80
 9f6:	01 de       	rcall	.-1022   	; 0x5fa <moveDoubleServo>
 9f8:	9a c0       	rjmp	.+308    	; 0xb2e <moveArm+0x2a6>
 9fa:	94 30       	cpi	r25, 0x04	; 4
 9fc:	91 f5       	brne	.+100    	; 0xa62 <moveArm+0x1da>
 9fe:	31 11       	cpse	r19, r1
 a00:	18 c0       	rjmp	.+48     	; 0xa32 <moveArm+0x1aa>
 a02:	38 ed       	ldi	r19, 0xD8	; 216
 a04:	32 03       	mulsu	r19, r18
 a06:	c0 01       	movw	r24, r0
 a08:	11 24       	eor	r1, r1
 a0a:	40 91 17 01 	lds	r20, 0x0117
 a0e:	50 91 18 01 	lds	r21, 0x0118
 a12:	84 0f       	add	r24, r20
 a14:	95 1f       	adc	r25, r21
 a16:	8a 30       	cpi	r24, 0x0A	; 10
 a18:	91 05       	cpc	r25, r1
 a1a:	09 f4       	brne	.+2      	; 0xa1e <moveArm+0x196>
 a1c:	88 c0       	rjmp	.+272    	; 0xb2e <moveArm+0x2a6>
 a1e:	0a 97       	sbiw	r24, 0x0a	; 10
 a20:	90 93 18 01 	sts	0x0118, r25
 a24:	80 93 17 01 	sts	0x0117, r24
 a28:	26 e0       	ldi	r18, 0x06	; 6
 a2a:	40 e0       	ldi	r20, 0x00	; 0
 a2c:	60 e5       	ldi	r22, 0x50	; 80
 a2e:	b2 dd       	rcall	.-1180   	; 0x594 <moveSingleServo>
 a30:	7e c0       	rjmp	.+252    	; 0xb2e <moveArm+0x2a6>
 a32:	80 91 17 01 	lds	r24, 0x0117
 a36:	90 91 18 01 	lds	r25, 0x0118
 a3a:	0a 96       	adiw	r24, 0x0a	; 10
 a3c:	48 e2       	ldi	r20, 0x28	; 40
 a3e:	24 9f       	mul	r18, r20
 a40:	80 0d       	add	r24, r0
 a42:	91 1d       	adc	r25, r1
 a44:	11 24       	eor	r1, r1
 a46:	82 33       	cpi	r24, 0x32	; 50
 a48:	23 e0       	ldi	r18, 0x03	; 3
 a4a:	92 07       	cpc	r25, r18
 a4c:	08 f0       	brcs	.+2      	; 0xa50 <moveArm+0x1c8>
 a4e:	6f c0       	rjmp	.+222    	; 0xb2e <moveArm+0x2a6>
 a50:	90 93 18 01 	sts	0x0118, r25
 a54:	80 93 17 01 	sts	0x0117, r24
 a58:	26 e0       	ldi	r18, 0x06	; 6
 a5a:	40 e0       	ldi	r20, 0x00	; 0
 a5c:	60 e5       	ldi	r22, 0x50	; 80
 a5e:	9a dd       	rcall	.-1228   	; 0x594 <moveSingleServo>
 a60:	66 c0       	rjmp	.+204    	; 0xb2e <moveArm+0x2a6>
 a62:	95 30       	cpi	r25, 0x05	; 5
 a64:	99 f5       	brne	.+102    	; 0xacc <moveArm+0x244>
 a66:	31 11       	cpse	r19, r1
 a68:	18 c0       	rjmp	.+48     	; 0xa9a <moveArm+0x212>
 a6a:	38 ed       	ldi	r19, 0xD8	; 216
 a6c:	32 03       	mulsu	r19, r18
 a6e:	c0 01       	movw	r24, r0
 a70:	11 24       	eor	r1, r1
 a72:	40 91 15 01 	lds	r20, 0x0115
 a76:	50 91 16 01 	lds	r21, 0x0116
 a7a:	84 0f       	add	r24, r20
 a7c:	95 1f       	adc	r25, r21
 a7e:	8a 30       	cpi	r24, 0x0A	; 10
 a80:	91 05       	cpc	r25, r1
 a82:	09 f4       	brne	.+2      	; 0xa86 <moveArm+0x1fe>
 a84:	54 c0       	rjmp	.+168    	; 0xb2e <moveArm+0x2a6>
 a86:	0a 97       	sbiw	r24, 0x0a	; 10
 a88:	90 93 16 01 	sts	0x0116, r25
 a8c:	80 93 15 01 	sts	0x0115, r24
 a90:	27 e0       	ldi	r18, 0x07	; 7
 a92:	40 e0       	ldi	r20, 0x00	; 0
 a94:	60 e5       	ldi	r22, 0x50	; 80
 a96:	7e dd       	rcall	.-1284   	; 0x594 <moveSingleServo>
 a98:	4a c0       	rjmp	.+148    	; 0xb2e <moveArm+0x2a6>
 a9a:	40 91 15 01 	lds	r20, 0x0115
 a9e:	50 91 16 01 	lds	r21, 0x0116
 aa2:	46 5f       	subi	r20, 0xF6	; 246
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	ca 01       	movw	r24, r20
 aa8:	38 e2       	ldi	r19, 0x28	; 40
 aaa:	23 9f       	mul	r18, r19
 aac:	80 0d       	add	r24, r0
 aae:	91 1d       	adc	r25, r1
 ab0:	11 24       	eor	r1, r1
 ab2:	8f 3f       	cpi	r24, 0xFF	; 255
 ab4:	43 e0       	ldi	r20, 0x03	; 3
 ab6:	94 07       	cpc	r25, r20
 ab8:	d0 f5       	brcc	.+116    	; 0xb2e <moveArm+0x2a6>
 aba:	90 93 16 01 	sts	0x0116, r25
 abe:	80 93 15 01 	sts	0x0115, r24
 ac2:	27 e0       	ldi	r18, 0x07	; 7
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	60 e5       	ldi	r22, 0x50	; 80
 ac8:	65 dd       	rcall	.-1334   	; 0x594 <moveSingleServo>
 aca:	31 c0       	rjmp	.+98     	; 0xb2e <moveArm+0x2a6>
 acc:	96 30       	cpi	r25, 0x06	; 6
 ace:	79 f5       	brne	.+94     	; 0xb2e <moveArm+0x2a6>
 ad0:	31 11       	cpse	r19, r1
 ad2:	17 c0       	rjmp	.+46     	; 0xb02 <moveArm+0x27a>
 ad4:	38 ed       	ldi	r19, 0xD8	; 216
 ad6:	32 03       	mulsu	r19, r18
 ad8:	c0 01       	movw	r24, r0
 ada:	11 24       	eor	r1, r1
 adc:	40 91 19 01 	lds	r20, 0x0119
 ae0:	50 91 1a 01 	lds	r21, 0x011A
 ae4:	84 0f       	add	r24, r20
 ae6:	95 1f       	adc	r25, r21
 ae8:	8a 30       	cpi	r24, 0x0A	; 10
 aea:	91 05       	cpc	r25, r1
 aec:	01 f1       	breq	.+64     	; 0xb2e <moveArm+0x2a6>
 aee:	0a 97       	sbiw	r24, 0x0a	; 10
 af0:	90 93 1a 01 	sts	0x011A, r25
 af4:	80 93 19 01 	sts	0x0119, r24
 af8:	28 e0       	ldi	r18, 0x08	; 8
 afa:	40 e0       	ldi	r20, 0x00	; 0
 afc:	60 e5       	ldi	r22, 0x50	; 80
 afe:	4a dd       	rcall	.-1388   	; 0x594 <moveSingleServo>
 b00:	16 c0       	rjmp	.+44     	; 0xb2e <moveArm+0x2a6>
 b02:	80 91 19 01 	lds	r24, 0x0119
 b06:	90 91 1a 01 	lds	r25, 0x011A
 b0a:	0a 96       	adiw	r24, 0x0a	; 10
 b0c:	48 e2       	ldi	r20, 0x28	; 40
 b0e:	24 9f       	mul	r18, r20
 b10:	80 0d       	add	r24, r0
 b12:	91 1d       	adc	r25, r1
 b14:	11 24       	eor	r1, r1
 b16:	8f 3f       	cpi	r24, 0xFF	; 255
 b18:	23 e0       	ldi	r18, 0x03	; 3
 b1a:	92 07       	cpc	r25, r18
 b1c:	40 f4       	brcc	.+16     	; 0xb2e <moveArm+0x2a6>
 b1e:	90 93 1a 01 	sts	0x011A, r25
 b22:	80 93 19 01 	sts	0x0119, r24
 b26:	28 e0       	ldi	r18, 0x08	; 8
 b28:	40 e0       	ldi	r20, 0x00	; 0
 b2a:	60 e5       	ldi	r22, 0x50	; 80
 b2c:	33 dd       	rcall	.-1434   	; 0x594 <moveSingleServo>
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <SPIInitSlave>:
#include <stdbool.h>
#include "Slave_control.h"

void SPIInitSlave()
{
	waitingForInstruction = 1;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	80 93 14 01 	sts	0x0114, r24
	DDRB = 0x48;	
 b3a:	88 e4       	ldi	r24, 0x48	; 72
 b3c:	84 b9       	out	0x04, r24	; 4
	SPCR = 0xC3;		
 b3e:	83 ec       	ldi	r24, 0xC3	; 195
 b40:	8c bd       	out	0x2c, r24	; 44
	sei(); 
 b42:	78 94       	sei
 b44:	08 95       	ret

00000b46 <slaveTX>:
}
	
void slaveTX(uint8_t data)
{
	SPDR = data;
 b46:	8e bd       	out	0x2e, r24	; 46
	PORTB |= (1 << PORTB3); // Sets INT_Req high. I.e throws interrupt.
 b48:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~(1 << PORTB3); // Sets INT_Req low. Interrupt finished.
 b4a:	2b 98       	cbi	0x05, 3	; 5
 b4c:	08 95       	ret

00000b4e <TXFinishedDrop>:
}

void TXFinishedDrop()
{
	slaveTX(1);
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	fa cf       	rjmp	.-12     	; 0xb46 <slaveTX>

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
