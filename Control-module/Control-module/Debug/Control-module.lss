
Control-module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008c0  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000033a  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005e5  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000194  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028a  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000034b  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	98 c0       	rjmp	.+304    	; 0x17e <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 31       	cpi	r26, 0x17	; 23
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	34 c1       	rjmp	.+616    	; 0x314 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "Control_wheel_steering.h"
#include <avr/interrupt.h>

int main(void)
{
	SPI_Init_Slave();
  ae:	49 d0       	rcall	.+146    	; 0x142 <SPI_Init_Slave>
	driving_setup();
  b0:	2d d0       	rcall	.+90     	; 0x10c <driving_setup>
	//init_arm()
	//init_LCD()
	
    while(1)
    {
        controlAlgorithm(); 
  b2:	2b d0       	rcall	.+86     	; 0x10a <controlAlgorithm>
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x4>

000000b6 <getError>:
	
	speed = Kp * error + Kd * (error - prevError);

	prevError = error;
	return speed;
}
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <getError+0x6>
  bc:	00 d0       	rcall	.+0      	; 0xbe <getError+0x8>
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	19 82       	std	Y+1, r1	; 0x01
  c6:	1a 82       	std	Y+2, r1	; 0x02
  c8:	1b 82       	std	Y+3, r1	; 0x03
  ca:	1c 82       	std	Y+4, r1	; 0x04
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <getError+0x32>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	9d 81       	ldd	r25, Y+5	; 0x05
  d6:	89 1b       	sub	r24, r25
  d8:	89 5f       	subi	r24, 0xF9	; 249
  da:	8a 83       	std	Y+2, r24	; 0x02
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	8b 83       	std	Y+3, r24	; 0x03
  e2:	8d 81       	ldd	r24, Y+5	; 0x05
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	8d 83       	std	Y+5, r24	; 0x05
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	80 91 02 01 	lds	r24, 0x0102
  ee:	2d 81       	ldd	r18, Y+5	; 0x05
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <getError+0x42>
  f4:	95 95       	asr	r25
  f6:	87 95       	ror	r24
  f8:	2a 95       	dec	r18
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <getError+0x3e>
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	99 27       	eor	r25, r25
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	29 f3       	breq	.-54     	; 0xd2 <getError+0x1c>
 108:	ec cf       	rjmp	.-40     	; 0xe2 <getError+0x2c>

0000010a <controlAlgorithm>:
 10a:	d5 df       	rcall	.-86     	; 0xb6 <getError>

0000010c <driving_setup>:

void driving_setup()
{
	TCCR1A    = 0b11110001; //Sets the mode to Phase Correct PWM and sets the Comp to set on incrementing.
 10c:	81 ef       	ldi	r24, 0xF1	; 241
 10e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 2; //Sets the prescaling to 8
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= (1 << OCIE1A)|(1 << OCIE0B); //Enables the compare interrupts
 118:	ef e6       	ldi	r30, 0x6F	; 111
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	80 83       	st	Z, r24
	TCNT1 = 0;
 122:	10 92 85 00 	sts	0x0085, r1
 126:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 0;
 12a:	10 92 89 00 	sts	0x0089, r1
 12e:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 132:	10 92 8b 00 	sts	0x008B, r1
 136:	10 92 8a 00 	sts	0x008A, r1
	DDRD |= (1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)|(1 << PORTD7);
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	80 6f       	ori	r24, 0xF0	; 240
 13e:	8a b9       	out	0x0a, r24	; 10
 140:	08 95       	ret

00000142 <SPI_Init_Slave>:
}

void SPI_Init_Slave()
	{

			DDRD = 0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a b9       	out	0x0a, r24	; 10
			DDRB = 0x48;
 146:	88 e4       	ldi	r24, 0x48	; 72
 148:	84 b9       	out	0x04, r24	; 4
			
			SPCR = 0xC3;
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	8c bd       	out	0x2c, r24	; 44
			
			sei(); 
 14e:	78 94       	sei
			
			
			waiting_for_instruction = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 12 01 	sts	0x0112, r24
			component = 0;
 156:	10 92 0f 01 	sts	0x010F, r1
			sensor = 1;
 15a:	80 93 14 01 	sts	0x0114, r24
			arm = 2;
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 15 01 	sts	0x0115, r24
			wheel = 3;
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	80 93 01 01 	sts	0x0101, r24
			RFIDcomp = 4;
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	80 93 16 01 	sts	0x0116, r24
			RFID_counter = 0;
 170:	10 92 0d 01 	sts	0x010D, r1
 174:	08 95       	ret

00000176 <Slave_TX>:
	}
	
void Slave_TX(uint8_t data)
{
	SPDR = data;
 176:	8e bd       	out	0x2e, r24	; 46
	PORTB |= (1 << PORTB3); // Sets INT_Req high. I.e throws interrupt.
 178:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~(1 << PORTB3); // Sets INT_Req low. Interrupt finished.
 17a:	2b 98       	cbi	0x05, 3	; 5
 17c:	08 95       	ret

0000017e <__vector_19>:
#include <avr/interrupt.h>
#include <stdbool.h>
#include "Slave_control.h"

ISR(SPI_STC_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	0b b6       	in	r0, 0x3b	; 59
 18a:	0f 92       	push	r0
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	data = SPDR;
 1ae:	8e b5       	in	r24, 0x2e	; 46
 1b0:	89 83       	std	Y+1, r24	; 0x01
	
	if(waiting_for_instruction)
 1b2:	80 91 12 01 	lds	r24, 0x0112
 1b6:	88 23       	and	r24, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <__vector_19+0x3e>
 1ba:	47 c0       	rjmp	.+142    	; 0x24a <__vector_19+0xcc>
	{
		if(data == 0b10000100)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	84 38       	cpi	r24, 0x84	; 132
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <__vector_19+0x5a>
		{
			waiting_for_instruction = !waiting_for_instruction;
 1c2:	90 91 12 01 	lds	r25, 0x0112
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	89 27       	eor	r24, r25
 1ca:	80 93 12 01 	sts	0x0112, r24
			component = sensor;
 1ce:	80 91 14 01 	lds	r24, 0x0114
 1d2:	80 93 0f 01 	sts	0x010F, r24
 1d6:	88 c0       	rjmp	.+272    	; 0x2e8 <__vector_19+0x16a>
		} else if (data == 0b10000101)
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	85 38       	cpi	r24, 0x85	; 133
 1dc:	59 f4       	brne	.+22     	; 0x1f4 <__vector_19+0x76>
		{
			waiting_for_instruction = !waiting_for_instruction;
 1de:	90 91 12 01 	lds	r25, 0x0112
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	89 27       	eor	r24, r25
 1e6:	80 93 12 01 	sts	0x0112, r24
			component = wheel;
 1ea:	80 91 01 01 	lds	r24, 0x0101
 1ee:	80 93 0f 01 	sts	0x010F, r24
 1f2:	7a c0       	rjmp	.+244    	; 0x2e8 <__vector_19+0x16a>
		} else if(data == 0b10000110)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	86 38       	cpi	r24, 0x86	; 134
 1f8:	59 f4       	brne	.+22     	; 0x210 <__vector_19+0x92>
		{
			waiting_for_instruction = !waiting_for_instruction;
 1fa:	90 91 12 01 	lds	r25, 0x0112
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	89 27       	eor	r24, r25
 202:	80 93 12 01 	sts	0x0112, r24
			component = arm;
 206:	80 91 15 01 	lds	r24, 0x0115
 20a:	80 93 0f 01 	sts	0x010F, r24
 20e:	6c c0       	rjmp	.+216    	; 0x2e8 <__vector_19+0x16a>
		}	else if(data == 0b10101011)
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	8b 3a       	cpi	r24, 0xAB	; 171
 214:	59 f4       	brne	.+22     	; 0x22c <__vector_19+0xae>
		{
			waiting_for_instruction = !waiting_for_instruction;
 216:	90 91 12 01 	lds	r25, 0x0112
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 27       	eor	r24, r25
 21e:	80 93 12 01 	sts	0x0112, r24
			component = RFIDcomp;
 222:	80 91 16 01 	lds	r24, 0x0116
 226:	80 93 0f 01 	sts	0x010F, r24
 22a:	5e c0       	rjmp	.+188    	; 0x2e8 <__vector_19+0x16a>
		}	else if(data == 0b00000101)
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	85 30       	cpi	r24, 0x05	; 5
 230:	21 f4       	brne	.+8      	; 0x23a <__vector_19+0xbc>
		{
			Slave_TX(wheel_steering_data);
 232:	80 91 0e 01 	lds	r24, 0x010E
 236:	9f df       	rcall	.-194    	; 0x176 <Slave_TX>
 238:	57 c0       	rjmp	.+174    	; 0x2e8 <__vector_19+0x16a>
		}	else if(data == 0b00000110)
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	86 30       	cpi	r24, 0x06	; 6
 23e:	09 f0       	breq	.+2      	; 0x242 <__vector_19+0xc4>
 240:	53 c0       	rjmp	.+166    	; 0x2e8 <__vector_19+0x16a>
		{
			Slave_TX(robot_arm_data);
 242:	80 91 00 01 	lds	r24, 0x0100
 246:	97 df       	rcall	.-210    	; 0x176 <Slave_TX>
 248:	4f c0       	rjmp	.+158    	; 0x2e8 <__vector_19+0x16a>
		}
	} else
	{
		if(component == sensor)
 24a:	90 91 0f 01 	lds	r25, 0x010F
 24e:	80 91 14 01 	lds	r24, 0x0114
 252:	98 13       	cpse	r25, r24
 254:	0a c0       	rjmp	.+20     	; 0x26a <__vector_19+0xec>
		{
			sensor_data = data;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	80 93 02 01 	sts	0x0102, r24
			waiting_for_instruction = !waiting_for_instruction;
 25c:	90 91 12 01 	lds	r25, 0x0112
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	89 27       	eor	r24, r25
 264:	80 93 12 01 	sts	0x0112, r24
 268:	3f c0       	rjmp	.+126    	; 0x2e8 <__vector_19+0x16a>
		}else if (component == arm)
 26a:	90 91 0f 01 	lds	r25, 0x010F
 26e:	80 91 15 01 	lds	r24, 0x0115
 272:	98 13       	cpse	r25, r24
 274:	0a c0       	rjmp	.+20     	; 0x28a <__vector_19+0x10c>
		{
			robot_arm_data = data;
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	80 93 00 01 	sts	0x0100, r24
			waiting_for_instruction = !waiting_for_instruction;
 27c:	90 91 12 01 	lds	r25, 0x0112
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 27       	eor	r24, r25
 284:	80 93 12 01 	sts	0x0112, r24
 288:	2f c0       	rjmp	.+94     	; 0x2e8 <__vector_19+0x16a>
		} else if (component == wheel)
 28a:	90 91 0f 01 	lds	r25, 0x010F
 28e:	80 91 01 01 	lds	r24, 0x0101
 292:	98 13       	cpse	r25, r24
 294:	0a c0       	rjmp	.+20     	; 0x2aa <__vector_19+0x12c>
		{
			wheel_steering_data = data;
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	80 93 0e 01 	sts	0x010E, r24
			waiting_for_instruction = !waiting_for_instruction;
 29c:	90 91 12 01 	lds	r25, 0x0112
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	89 27       	eor	r24, r25
 2a4:	80 93 12 01 	sts	0x0112, r24
 2a8:	1f c0       	rjmp	.+62     	; 0x2e8 <__vector_19+0x16a>
		} else if (component == RFIDcomp)
 2aa:	90 91 0f 01 	lds	r25, 0x010F
 2ae:	80 91 16 01 	lds	r24, 0x0116
 2b2:	98 13       	cpse	r25, r24
 2b4:	19 c0       	rjmp	.+50     	; 0x2e8 <__vector_19+0x16a>
		{
			
			RFID[RFID_counter] = data;
 2b6:	e0 91 0d 01 	lds	r30, 0x010D
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	ed 5f       	subi	r30, 0xFD	; 253
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	80 83       	st	Z, r24
			if(RFID_counter == 9)
 2c4:	80 91 0d 01 	lds	r24, 0x010D
 2c8:	89 30       	cpi	r24, 0x09	; 9
 2ca:	49 f4       	brne	.+18     	; 0x2de <__vector_19+0x160>
			{
				waiting_for_instruction = !waiting_for_instruction;
 2cc:	90 91 12 01 	lds	r25, 0x0112
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	89 27       	eor	r24, r25
 2d4:	80 93 12 01 	sts	0x0112, r24
				RFID_counter = 0;
 2d8:	10 92 0d 01 	sts	0x010D, r1
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <__vector_19+0x16a>
			} else
			{
				RFID_counter++;
 2de:	80 91 0d 01 	lds	r24, 0x010D
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 0d 01 	sts	0x010D, r24
			}
		}
	}
}
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
