
Newsteering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .stab         000016e0  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000060c  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002c3  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000124  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000211  00000000  00000000  00002322  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000bc  00000000  00000000  00002534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000182  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000013b  00000000  00000000  00002772  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000028ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	35 d0       	rcall	.+106    	; 0x114 <main>
  aa:	3e c0       	rjmp	.+124    	; 0x128 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <driving_setup>:
int pulse_width_from_speed(int speed)
{
	int converter = 65535/100;
	int temp = speed * converter;
	return temp;
}
  ae:	81 ef       	ldi	r24, 0xF1	; 241
  b0:	80 93 80 00 	sts	0x0080, r24
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 81 00 	sts	0x0081, r24
  ba:	ef e6       	ldi	r30, 0x6F	; 111
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
  c4:	10 92 85 00 	sts	0x0085, r1
  c8:	10 92 84 00 	sts	0x0084, r1
  cc:	10 92 89 00 	sts	0x0089, r1
  d0:	10 92 88 00 	sts	0x0088, r1
  d4:	10 92 8b 00 	sts	0x008B, r1
  d8:	10 92 8a 00 	sts	0x008A, r1
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	80 6f       	ori	r24, 0xF0	; 240
  e0:	8a b9       	out	0x0a, r24	; 10
  e2:	08 95       	ret

000000e4 <drive>:

/* Drive-function. Handles direction. Makes the robot move. */
void drive(int right_dir, int left_dir, int speed_left, int speed_right)
{
	if(right_dir == 1){
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	19 f4       	brne	.+6      	; 0xee <drive+0xa>
		PORTD |= (0 << PORTD7);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <drive+0xc>
	}
	else 
	{
		PORTD |= (1 << PORTD7);
  ee:	5f 9a       	sbi	0x0b, 7	; 11
	}
	
	if(left_dir == 1)
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	71 05       	cpc	r23, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <drive+0x16>
	{
		PORTD |= (1 << PORTD6);
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	08 95       	ret
	}
	else 
	{
		PORTD |= (0 << PORTD6);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	08 95       	ret

00000100 <drive_forward>:
}

/* Function allowing the robot to move forwards */
void drive_forward()
{
		drive(1,1, speed, speed);
 100:	40 91 00 01 	lds	r20, 0x0100
 104:	50 91 01 01 	lds	r21, 0x0101
 108:	9a 01       	movw	r18, r20
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	e8 cf       	rjmp	.-48     	; 0xe4 <drive>

00000114 <main>:
void drive_right_forward();


int main(void)
{
	speed = 25;
 114:	89 e1       	ldi	r24, 0x19	; 25
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	80 93 00 01 	sts	0x0100, r24
	driving_setup();
 120:	c6 df       	rcall	.-116    	; 0xae <driving_setup>
	sei();
 122:	78 94       	sei
	while(1)
    {
		
		drive_forward();
 124:	ed df       	rcall	.-38     	; 0x100 <drive_forward>
 126:	fe cf       	rjmp	.-4      	; 0x124 <main+0x10>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
