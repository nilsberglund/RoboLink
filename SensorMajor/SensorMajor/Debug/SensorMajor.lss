
SensorMajor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800108  00800108  00000296  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001d8  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000134  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001eb  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000bc  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000121  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000115  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c0       	rjmp	.+310    	; 0x198 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d0       	rcall	.+84     	; 0x118 <main>
  c4:	98 c0       	rjmp	.+304    	; 0x1f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initADC>:




void initADC() {
	ch = 0;										// Make sure that we start on first channel
  c8:	10 92 0a 01 	sts	0x010A, r1
  cc:	10 92 09 01 	sts	0x0109, r1
	DDRA = 0x00;								// Configure PortA as input for analog readings
  d0:	11 b8       	out	0x01, r1	; 1
	DDRB |= (1<<DDB2) | (1<<DDB1) | (1<<DDB0); 	// Configure PortB as output, pin PB0, PB1, PB2.
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;									// MUX-address = 0 =>Tänd lampa 0,		ändra sen till bara dom lägsta bitarna.
  d8:	15 b8       	out	0x05, r1	; 5
	ADMUX = 0x20;								// AREF, left justify (msb-lsb configuration), Data registers and select ADC0 as input channel. skapa loop som växlar mellan ADC0 och ADC6.
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0x8B;								// Enable the ADC and its interrupt feature
  e0:	8b e8       	ldi	r24, 0x8B	; 139
  e2:	80 93 7a 00 	sts	0x007A, r24
	// and set the ACD clock pre-scalar to clk/64
	EICRA |=(1<<ISC00);							// Sets the ISC00 to 1 rising edge triggering
  e6:	e9 e6       	ldi	r30, 0x69	; 105
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
	EICRA |=(1<<ISC01);							// Sets ISC01 to 1
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
	EIMSK =0x01;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8d bb       	out	0x1d, r24	; 29
  fa:	08 95       	ret

000000fc <analogRead>:
}

void analogRead (int ch){
	ADMUX &= 0xF8;									// Set 3 lsb:s to 0
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	98 7f       	andi	r25, 0xF8	; 248
 104:	90 83       	st	Z, r25
	ADMUX |= ch;									// Select pin ADC0..ADC6 using MUX.
 106:	90 81       	ld	r25, Z
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADSC);								// Start conversion
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <main>:
{


		
	
	initADC();
 118:	d7 df       	rcall	.-82     	; 0xc8 <initADC>
	 sei(); 										// Enable Global Interrupts
 11a:	78 94       	sei

	analogRead(0);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	ed df       	rcall	.-38     	; 0xfc <analogRead>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0xa>

00000124 <calcOneByteLineVector>:
}



////////////////////////////Mathematical functions//////////////////////////////////////////
void calcOneByteLineVector(){
 124:	ac e0       	ldi	r26, 0x0C	; 12
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	60 e0       	ldi	r22, 0x00	; 0
	oneByteLineVector = 0;
	
	for (int i=0; i<7; i++)
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (newSensorValues[i] > channelThresholds[i])
		{
			oneByteLineVector |= (1<<i);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
void calcOneByteLineVector(){
	oneByteLineVector = 0;
	
	for (int i=0; i<7; i++)
	{
		if (newSensorValues[i] > channelThresholds[i])
 136:	3d 91       	ld	r19, X+
 138:	21 91       	ld	r18, Z+
 13a:	23 17       	cp	r18, r19
 13c:	40 f4       	brcc	.+16     	; 0x14e <calcOneByteLineVector+0x2a>
		{
			oneByteLineVector |= (1<<i);
 13e:	9a 01       	movw	r18, r20
 140:	08 2e       	mov	r0, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <calcOneByteLineVector+0x24>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <calcOneByteLineVector+0x20>
 14c:	62 2b       	or	r22, r18

////////////////////////////Mathematical functions//////////////////////////////////////////
void calcOneByteLineVector(){
	oneByteLineVector = 0;
	
	for (int i=0; i<7; i++)
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	87 30       	cpi	r24, 0x07	; 7
 152:	91 05       	cpc	r25, r1
 154:	81 f7       	brne	.-32     	; 0x136 <calcOneByteLineVector+0x12>
 156:	60 93 08 01 	sts	0x0108, r22
 15a:	08 95       	ret

0000015c <defaultMode>:


////////////////////////////Modes for sensor value handlings//////////////////////////////////////////

void defaultMode() {
	newSensorValues[ch] = adcValue;
 15c:	80 91 09 01 	lds	r24, 0x0109
 160:	90 91 0a 01 	lds	r25, 0x010A
 164:	fc 01       	movw	r30, r24
 166:	e4 5f       	subi	r30, 0xF4	; 244
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	20 91 0b 01 	lds	r18, 0x010B
 16e:	20 83       	st	Z, r18
	ch++;									//go to next channel
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 0a 01 	sts	0x010A, r25
 176:	80 93 09 01 	sts	0x0109, r24
	if (ch==7) {
 17a:	07 97       	sbiw	r24, 0x07	; 7
 17c:	29 f4       	brne	.+10     	; 0x188 <defaultMode+0x2c>
		calcOneByteLineVector();
 17e:	d2 df       	rcall	.-92     	; 0x124 <calcOneByteLineVector>
		ch = 0;
 180:	10 92 0a 01 	sts	0x010A, r1
 184:	10 92 09 01 	sts	0x0109, r1
		//reti();
	}
	//else {
		
		PORTB = ch;							//Light up new channel, GLÖM EJ måste maskas istället för att överskirvas!
 188:	80 91 09 01 	lds	r24, 0x0109
 18c:	85 b9       	out	0x05, r24	; 5
		analogRead(ch);						//Read analog value on new channel
 18e:	80 91 09 01 	lds	r24, 0x0109
 192:	90 91 0a 01 	lds	r25, 0x010A
 196:	b2 cf       	rjmp	.-156    	; 0xfc <analogRead>

00000198 <__vector_24>:
uint8_t newSensorValues[7];
uint8_t oneByteLineVector = 0;

////////////Interupts///////////////
ISR(ADC_vect) //Interrupt Service Routine (ADC Conversion Complete)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	adcValue = ADCL;					// Must read ADCL before ADCH
 1be:	80 91 78 00 	lds	r24, 0x0078
 1c2:	80 93 0b 01 	sts	0x010B, r24
	adcValue = ADCH;					// Output ADCH to managable byte adcValue
 1c6:	80 91 79 00 	lds	r24, 0x0079
 1ca:	80 93 0b 01 	sts	0x010B, r24
	
	defaultMode();
 1ce:	c6 df       	rcall	.-116    	; 0x15c <defaultMode>
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
