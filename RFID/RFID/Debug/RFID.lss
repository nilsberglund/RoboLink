
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000016c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  0000020c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001211  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002af  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000073c  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f4  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001349  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4f d0       	rcall	.+158    	; 0x162 <main>
  c4:	51 c0       	rjmp	.+162    	; 0x168 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <rfid_Read>:
/*
Reads one byte and stores in in the loaded vector.
*/
void rfid_Read(uint8_t digit){
	
	loaded[digit] = UDR0;
  c8:	90 91 c6 00 	lds	r25, 0x00C6
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	90 83       	st	Z, r25
  d6:	08 95       	ret

000000d8 <__vector_28>:


/*
When the receive of one byte is complete, this interrupt will run.
*/
ISR(USART1_RX_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	rfid_Read(digit);
  fe:	80 91 0c 01 	lds	r24, 0x010C
 102:	e2 df       	rcall	.-60     	; 0xc8 <rfid_Read>
	
	digit++;
 104:	80 91 0c 01 	lds	r24, 0x010C
 108:	8f 5f       	subi	r24, 0xFF	; 255
	if (digit == 12) {
 10a:	8c 30       	cpi	r24, 0x0C	; 12
 10c:	19 f0       	breq	.+6      	; 0x114 <__vector_28+0x3c>
When the receive of one byte is complete, this interrupt will run.
*/
ISR(USART1_RX_vect){
	rfid_Read(digit);
	
	digit++;
 10e:	80 93 0c 01 	sts	0x010C, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_28+0x40>
	if (digit == 12) {
		digit = 0;
 114:	10 92 0c 01 	sts	0x010C, r1
		
		//TODO: Shut of card reader to prevent multiple readings of same card.
	}
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0b be       	out	0x3b, r0	; 59
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <lcd_Setup>:
// 	low_conf.line1_base_addr = 0x00;
// 	low_conf.line2_base_addr = 0x40;
// 	low_conf.dl = HD44780_L_FS_DL_8BIT;
// 	hd44780_l_init(&low_conf, HD44780_L_FS_N_DUAL, HD44780_L_FS_F_58, HD44780_L_EMS_ID_INC, HD44780_L_EMS_S_OFF);
// 	hd44780_l_disp(&low_conf, HD44780_L_DISP_D_ON, HD44780_L_DISP_C_OFF, HD44780_L_DISP_B_OFF);
	UCSR1B = (1<<RXEN1 | 1<<TXEN1); //Enable RX0 and TX0
 13e:	e9 ec       	ldi	r30, 0xC9	; 201
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 83       	st	Z, r24
	UCSR1C = (1 << UCSZ11 | 1 << UCSZ10); //set data length to 8-bit;
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1H = 0b00000000;
 14c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 0b00011001; //Sets baudvalue in AVR to 25(1mhz), which gives baude rate 2400. baudvalue = (Fcpu/baudrate*16)-1
 150:	89 e1       	ldi	r24, 0x19	; 25
 152:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B |= (1 << RXCIE1); //Enables the rc complete interrupt
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
	
	DDRD |= (1<<DDD5);
 15c:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~(1<<PORTD5);
 15e:	5d 98       	cbi	0x0b, 5	; 11
 160:	08 95       	ret

00000162 <main>:
	}
}

int main(void)
{
	lcd_Setup(); //Bör köras först av allt då den även innehåller rfid intrerupt initialisering
 162:	ed df       	rcall	.-38     	; 0x13e <lcd_Setup>
	//rfid_Print_LCD();
	sei();
 164:	78 94       	sei
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x4>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
