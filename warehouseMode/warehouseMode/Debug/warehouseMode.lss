
warehouseMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a24  00000ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080010c  0080010c  00000ac4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c4a  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000053f  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000be8  00000000  00000000  000034ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000032c  00000000  00000000  000040e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004be  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015ee  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00005ec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c4       	rjmp	.+2186   	; 0x8dc <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	54 c0       	rjmp	.+168    	; 0x11a <__vector_28>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ac d4       	rcall	.+2392   	; 0xa1c <main>
  c4:	ad c4       	rjmp	.+2394   	; 0xa20 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <handleData>:
	handleInstruction(instrByte);
}

void handleData(char temp) 
{
	switch(temp) {
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	68 f0       	brcs	.+26     	; 0xe6 <handleData+0x1e>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	18 f0       	brcs	.+6      	; 0xd6 <handleData+0xe>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	49 f4       	brne	.+18     	; 0xe6 <handleData+0x1e>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <handleData+0x14>
		case 0x01: //START PICKUP button pressed
			pickUpItem = 1;
			waitingForStartAbort = 1;
		case 0x02: //END PICKUP button pressed
			waitingForEndPickup = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 0d 01 	sts	0x010D, r24
		case 0x03: //ABORT PICKUP button pressed
			pickUpItem = 0;
  dc:	10 92 0f 01 	sts	0x010F, r1
			waitingForStartAbort = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 0e 01 	sts	0x010E, r24
  e6:	08 95       	ret

000000e8 <handleInstruction>:
	}
}

void handleInstruction(char instrByte)
{
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	char temp = UDR1;
  f0:	00 91 ce 00 	lds	r16, 0x00CE
	cli();	//Disable global interrupts
  f4:	f8 94       	cli
	while ( !(UCSR0A & (1<<RXC0)) ) //wait for byte to be received
  f6:	c0 ec       	ldi	r28, 0xC0	; 192
  f8:	d0 e0       	ldi	r29, 0x00	; 0
	switch (instrByte) {
  fa:	18 2f       	mov	r17, r24
  fc:	11 50       	subi	r17, 0x01	; 1

void handleInstruction(char instrByte)
{
	char temp = UDR1;
	cli();	//Disable global interrupts
	while ( !(UCSR0A & (1<<RXC0)) ) //wait for byte to be received
  fe:	04 c0       	rjmp	.+8      	; 0x108 <handleInstruction+0x20>
	switch (instrByte) {
 100:	14 30       	cpi	r17, 0x04	; 4
 102:	10 f4       	brcc	.+4      	; 0x108 <handleInstruction+0x20>
		case 0x02: //ARM instruction value
			// TODO: send ARM data byte over SPI to control AVR
		case 0x03: //CAL instruction value
			// TODO: send CAL data byte over SPI to sensor AVR
		case 0x04:
			handleData(temp);
 104:	80 2f       	mov	r24, r16
 106:	e0 df       	rcall	.-64     	; 0xc8 <handleData>

void handleInstruction(char instrByte)
{
	char temp = UDR1;
	cli();	//Disable global interrupts
	while ( !(UCSR0A & (1<<RXC0)) ) //wait for byte to be received
 108:	98 81       	ld	r25, Y
 10a:	99 23       	and	r25, r25
 10c:	cc f7       	brge	.-14     	; 0x100 <handleInstruction+0x18>
		case 0x03: //CAL instruction value
			// TODO: send CAL data byte over SPI to sensor AVR
		case 0x04:
			handleData(temp);
	}
	sei(); //Enable global interrupts again
 10e:	78 94       	sei
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <__vector_28>:
#include "warehouseMode.h"
char instrByte; //the byte received by the AVR, transmitted from computer


ISR(USART1_RX_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	0b b6       	in	r0, 0x3b	; 59
 126:	0f 92       	push	r0
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	instrByte = UDR1;
 140:	80 91 ce 00 	lds	r24, 0x00CE
 144:	80 93 11 01 	sts	0x0111, r24
	handleInstruction(instrByte);
 148:	cf df       	rcall	.-98     	; 0xe8 <handleInstruction>
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <_hd44780_l_func>:
	_hd44780_l_func(conf, 0, 0, (_BV(7) | addr), 40);
}

void hd44780_l_write(const struct hd44780_l_conf* conf, uint8_t data) {
	_hd44780_l_func(conf, 1, 0, data, 45);
}
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	fc 01       	movw	r30, r24
 17a:	90 81       	ld	r25, Z
 17c:	a3 85       	ldd	r26, Z+11	; 0x0b
 17e:	b4 85       	ldd	r27, Z+12	; 0x0c
 180:	61 11       	cpse	r22, r1
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <_hd44780_l_func+0x30>
 184:	3c 91       	ld	r19, X
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	eb 01       	movw	r28, r22
 18c:	02 c0       	rjmp	.+4      	; 0x192 <_hd44780_l_func+0x22>
 18e:	cc 0f       	add	r28, r28
 190:	dd 1f       	adc	r29, r29
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <_hd44780_l_func+0x1e>
 196:	ce 01       	movw	r24, r28
 198:	80 95       	com	r24
 19a:	83 23       	and	r24, r19
 19c:	8c 93       	st	X, r24
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <_hd44780_l_func+0x48>
 1a0:	3c 91       	ld	r19, X
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	eb 01       	movw	r28, r22
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_hd44780_l_func+0x3e>
 1aa:	cc 0f       	add	r28, r28
 1ac:	dd 1f       	adc	r29, r29
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <_hd44780_l_func+0x3a>
 1b2:	ce 01       	movw	r24, r28
 1b4:	83 2b       	or	r24, r19
 1b6:	8c 93       	st	X, r24
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	a5 85       	ldd	r26, Z+13	; 0x0d
 1bc:	b6 85       	ldd	r27, Z+14	; 0x0e
 1be:	41 11       	cpse	r20, r1
 1c0:	0e c0       	rjmp	.+28     	; 0x1de <_hd44780_l_func+0x6e>
 1c2:	3c 91       	ld	r19, X
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	ba 01       	movw	r22, r20
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <_hd44780_l_func+0x60>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	9a 95       	dec	r25
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <_hd44780_l_func+0x5c>
 1d4:	cb 01       	movw	r24, r22
 1d6:	80 95       	com	r24
 1d8:	83 23       	and	r24, r19
 1da:	8c 93       	st	X, r24
 1dc:	0c c0       	rjmp	.+24     	; 0x1f6 <_hd44780_l_func+0x86>
 1de:	3c 91       	ld	r19, X
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	ea 01       	movw	r28, r20
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <_hd44780_l_func+0x7c>
 1e8:	cc 0f       	add	r28, r28
 1ea:	dd 1f       	adc	r29, r29
 1ec:	9a 95       	dec	r25
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <_hd44780_l_func+0x78>
 1f0:	ce 01       	movw	r24, r28
 1f2:	83 2b       	or	r24, r19
 1f4:	8c 93       	st	X, r24
 1f6:	93 81       	ldd	r25, Z+3	; 0x03
 1f8:	a1 89       	ldd	r26, Z+17	; 0x11
 1fa:	b2 89       	ldd	r27, Z+18	; 0x12
 1fc:	22 23       	and	r18, r18
 1fe:	74 f0       	brlt	.+28     	; 0x21c <_hd44780_l_func+0xac>
 200:	3c 91       	ld	r19, X
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	ba 01       	movw	r22, r20
 208:	02 c0       	rjmp	.+4      	; 0x20e <_hd44780_l_func+0x9e>
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	9a 95       	dec	r25
 210:	e2 f7       	brpl	.-8      	; 0x20a <_hd44780_l_func+0x9a>
 212:	cb 01       	movw	r24, r22
 214:	80 95       	com	r24
 216:	83 23       	and	r24, r19
 218:	8c 93       	st	X, r24
 21a:	0c c0       	rjmp	.+24     	; 0x234 <_hd44780_l_func+0xc4>
 21c:	3c 91       	ld	r19, X
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	ea 01       	movw	r28, r20
 224:	02 c0       	rjmp	.+4      	; 0x22a <_hd44780_l_func+0xba>
 226:	cc 0f       	add	r28, r28
 228:	dd 1f       	adc	r29, r29
 22a:	9a 95       	dec	r25
 22c:	e2 f7       	brpl	.-8      	; 0x226 <_hd44780_l_func+0xb6>
 22e:	ce 01       	movw	r24, r28
 230:	83 2b       	or	r24, r19
 232:	8c 93       	st	X, r24
 234:	94 81       	ldd	r25, Z+4	; 0x04
 236:	a3 89       	ldd	r26, Z+19	; 0x13
 238:	b4 89       	ldd	r27, Z+20	; 0x14
 23a:	26 fd       	sbrc	r18, 6
 23c:	0e c0       	rjmp	.+28     	; 0x25a <_hd44780_l_func+0xea>
 23e:	3c 91       	ld	r19, X
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <_hd44780_l_func+0xdc>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	9a 95       	dec	r25
 24e:	e2 f7       	brpl	.-8      	; 0x248 <_hd44780_l_func+0xd8>
 250:	cb 01       	movw	r24, r22
 252:	80 95       	com	r24
 254:	83 23       	and	r24, r19
 256:	8c 93       	st	X, r24
 258:	0c c0       	rjmp	.+24     	; 0x272 <_hd44780_l_func+0x102>
 25a:	3c 91       	ld	r19, X
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	ea 01       	movw	r28, r20
 262:	02 c0       	rjmp	.+4      	; 0x268 <_hd44780_l_func+0xf8>
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	9a 95       	dec	r25
 26a:	e2 f7       	brpl	.-8      	; 0x264 <_hd44780_l_func+0xf4>
 26c:	ce 01       	movw	r24, r28
 26e:	83 2b       	or	r24, r19
 270:	8c 93       	st	X, r24
 272:	95 81       	ldd	r25, Z+5	; 0x05
 274:	a5 89       	ldd	r26, Z+21	; 0x15
 276:	b6 89       	ldd	r27, Z+22	; 0x16
 278:	25 fd       	sbrc	r18, 5
 27a:	0e c0       	rjmp	.+28     	; 0x298 <_hd44780_l_func+0x128>
 27c:	3c 91       	ld	r19, X
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	ba 01       	movw	r22, r20
 284:	02 c0       	rjmp	.+4      	; 0x28a <_hd44780_l_func+0x11a>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	9a 95       	dec	r25
 28c:	e2 f7       	brpl	.-8      	; 0x286 <_hd44780_l_func+0x116>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	83 23       	and	r24, r19
 294:	8c 93       	st	X, r24
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <_hd44780_l_func+0x140>
 298:	3c 91       	ld	r19, X
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	ea 01       	movw	r28, r20
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_hd44780_l_func+0x136>
 2a2:	cc 0f       	add	r28, r28
 2a4:	dd 1f       	adc	r29, r29
 2a6:	9a 95       	dec	r25
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_hd44780_l_func+0x132>
 2aa:	ce 01       	movw	r24, r28
 2ac:	83 2b       	or	r24, r19
 2ae:	8c 93       	st	X, r24
 2b0:	96 81       	ldd	r25, Z+6	; 0x06
 2b2:	a7 89       	ldd	r26, Z+23	; 0x17
 2b4:	b0 8d       	ldd	r27, Z+24	; 0x18
 2b6:	24 fd       	sbrc	r18, 4
 2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <_hd44780_l_func+0x166>
 2ba:	3c 91       	ld	r19, X
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	ba 01       	movw	r22, r20
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_hd44780_l_func+0x158>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	9a 95       	dec	r25
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <_hd44780_l_func+0x154>
 2cc:	cb 01       	movw	r24, r22
 2ce:	80 95       	com	r24
 2d0:	83 23       	and	r24, r19
 2d2:	8c 93       	st	X, r24
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <_hd44780_l_func+0x17e>
 2d6:	3c 91       	ld	r19, X
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	ea 01       	movw	r28, r20
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_hd44780_l_func+0x174>
 2e0:	cc 0f       	add	r28, r28
 2e2:	dd 1f       	adc	r29, r29
 2e4:	9a 95       	dec	r25
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <_hd44780_l_func+0x170>
 2e8:	ce 01       	movw	r24, r28
 2ea:	83 2b       	or	r24, r19
 2ec:	8c 93       	st	X, r24
 2ee:	83 a1       	ldd	r24, Z+35	; 0x23
 2f0:	81 11       	cpse	r24, r1
 2f2:	1f c0       	rjmp	.+62     	; 0x332 <_hd44780_l_func+0x1c2>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <_hd44780_l_func+0x186>
 2f6:	a7 85       	ldd	r26, Z+15	; 0x0f
 2f8:	b0 89       	ldd	r27, Z+16	; 0x10
 2fa:	3c 91       	ld	r19, X
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	02 80       	ldd	r0, Z+2	; 0x02
 304:	02 c0       	rjmp	.+4      	; 0x30a <_hd44780_l_func+0x19a>
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <_hd44780_l_func+0x196>
 30e:	43 2b       	or	r20, r19
 310:	4c 93       	st	X, r20
 312:	00 c0       	rjmp	.+0      	; 0x314 <_hd44780_l_func+0x1a4>
 314:	00 c0       	rjmp	.+0      	; 0x316 <_hd44780_l_func+0x1a6>
 316:	a7 85       	ldd	r26, Z+15	; 0x0f
 318:	b0 89       	ldd	r27, Z+16	; 0x10
 31a:	3c 91       	ld	r19, X
 31c:	02 80       	ldd	r0, Z+2	; 0x02
 31e:	02 c0       	rjmp	.+4      	; 0x324 <_hd44780_l_func+0x1b4>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <_hd44780_l_func+0x1b0>
 328:	80 95       	com	r24
 32a:	83 23       	and	r24, r19
 32c:	8c 93       	st	X, r24
 32e:	00 c0       	rjmp	.+0      	; 0x330 <_hd44780_l_func+0x1c0>
 330:	00 c0       	rjmp	.+0      	; 0x332 <_hd44780_l_func+0x1c2>
 332:	83 a1       	ldd	r24, Z+35	; 0x23
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <_hd44780_l_func+0x1ca>
 338:	7d c0       	rjmp	.+250    	; 0x434 <_hd44780_l_func+0x2c4>
 33a:	97 81       	ldd	r25, Z+7	; 0x07
 33c:	a1 8d       	ldd	r26, Z+25	; 0x19
 33e:	b2 8d       	ldd	r27, Z+26	; 0x1a
 340:	23 fd       	sbrc	r18, 3
 342:	0e c0       	rjmp	.+28     	; 0x360 <_hd44780_l_func+0x1f0>
 344:	3c 91       	ld	r19, X
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	ba 01       	movw	r22, r20
 34c:	02 c0       	rjmp	.+4      	; 0x352 <_hd44780_l_func+0x1e2>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	9a 95       	dec	r25
 354:	e2 f7       	brpl	.-8      	; 0x34e <_hd44780_l_func+0x1de>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	83 23       	and	r24, r19
 35c:	8c 93       	st	X, r24
 35e:	0c c0       	rjmp	.+24     	; 0x378 <_hd44780_l_func+0x208>
 360:	3c 91       	ld	r19, X
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	ea 01       	movw	r28, r20
 368:	02 c0       	rjmp	.+4      	; 0x36e <_hd44780_l_func+0x1fe>
 36a:	cc 0f       	add	r28, r28
 36c:	dd 1f       	adc	r29, r29
 36e:	9a 95       	dec	r25
 370:	e2 f7       	brpl	.-8      	; 0x36a <_hd44780_l_func+0x1fa>
 372:	ce 01       	movw	r24, r28
 374:	83 2b       	or	r24, r19
 376:	8c 93       	st	X, r24
 378:	90 85       	ldd	r25, Z+8	; 0x08
 37a:	a3 8d       	ldd	r26, Z+27	; 0x1b
 37c:	b4 8d       	ldd	r27, Z+28	; 0x1c
 37e:	22 fd       	sbrc	r18, 2
 380:	0e c0       	rjmp	.+28     	; 0x39e <_hd44780_l_func+0x22e>
 382:	3c 91       	ld	r19, X
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	ba 01       	movw	r22, r20
 38a:	02 c0       	rjmp	.+4      	; 0x390 <_hd44780_l_func+0x220>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	9a 95       	dec	r25
 392:	e2 f7       	brpl	.-8      	; 0x38c <_hd44780_l_func+0x21c>
 394:	cb 01       	movw	r24, r22
 396:	80 95       	com	r24
 398:	83 23       	and	r24, r19
 39a:	8c 93       	st	X, r24
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <_hd44780_l_func+0x246>
 39e:	3c 91       	ld	r19, X
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	ea 01       	movw	r28, r20
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <_hd44780_l_func+0x23c>
 3a8:	cc 0f       	add	r28, r28
 3aa:	dd 1f       	adc	r29, r29
 3ac:	9a 95       	dec	r25
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <_hd44780_l_func+0x238>
 3b0:	ce 01       	movw	r24, r28
 3b2:	83 2b       	or	r24, r19
 3b4:	8c 93       	st	X, r24
 3b6:	91 85       	ldd	r25, Z+9	; 0x09
 3b8:	a5 8d       	ldd	r26, Z+29	; 0x1d
 3ba:	b6 8d       	ldd	r27, Z+30	; 0x1e
 3bc:	21 fd       	sbrc	r18, 1
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <_hd44780_l_func+0x26c>
 3c0:	3c 91       	ld	r19, X
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	ba 01       	movw	r22, r20
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_hd44780_l_func+0x25e>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	9a 95       	dec	r25
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_hd44780_l_func+0x25a>
 3d2:	cb 01       	movw	r24, r22
 3d4:	80 95       	com	r24
 3d6:	83 23       	and	r24, r19
 3d8:	8c 93       	st	X, r24
 3da:	0c c0       	rjmp	.+24     	; 0x3f4 <_hd44780_l_func+0x284>
 3dc:	3c 91       	ld	r19, X
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	ea 01       	movw	r28, r20
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <_hd44780_l_func+0x27a>
 3e6:	cc 0f       	add	r28, r28
 3e8:	dd 1f       	adc	r29, r29
 3ea:	9a 95       	dec	r25
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <_hd44780_l_func+0x276>
 3ee:	ce 01       	movw	r24, r28
 3f0:	83 2b       	or	r24, r19
 3f2:	8c 93       	st	X, r24
 3f4:	92 85       	ldd	r25, Z+10	; 0x0a
 3f6:	a7 8d       	ldd	r26, Z+31	; 0x1f
 3f8:	b0 a1       	ldd	r27, Z+32	; 0x20
 3fa:	20 fd       	sbrc	r18, 0
 3fc:	0e c0       	rjmp	.+28     	; 0x41a <_hd44780_l_func+0x2aa>
 3fe:	4c 91       	ld	r20, X
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <_hd44780_l_func+0x29c>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	9a 95       	dec	r25
 40e:	e2 f7       	brpl	.-8      	; 0x408 <_hd44780_l_func+0x298>
 410:	cb 01       	movw	r24, r22
 412:	80 95       	com	r24
 414:	84 23       	and	r24, r20
 416:	8c 93       	st	X, r24
 418:	89 c0       	rjmp	.+274    	; 0x52c <_hd44780_l_func+0x3bc>
 41a:	4c 91       	ld	r20, X
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	e9 01       	movw	r28, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <_hd44780_l_func+0x2b8>
 424:	cc 0f       	add	r28, r28
 426:	dd 1f       	adc	r29, r29
 428:	9a 95       	dec	r25
 42a:	e2 f7       	brpl	.-8      	; 0x424 <_hd44780_l_func+0x2b4>
 42c:	ce 01       	movw	r24, r28
 42e:	84 2b       	or	r24, r20
 430:	8c 93       	st	X, r24
 432:	7c c0       	rjmp	.+248    	; 0x52c <_hd44780_l_func+0x3bc>
 434:	93 81       	ldd	r25, Z+3	; 0x03
 436:	a1 89       	ldd	r26, Z+17	; 0x11
 438:	b2 89       	ldd	r27, Z+18	; 0x12
 43a:	23 fd       	sbrc	r18, 3
 43c:	0e c0       	rjmp	.+28     	; 0x45a <_hd44780_l_func+0x2ea>
 43e:	3c 91       	ld	r19, X
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	ba 01       	movw	r22, r20
 446:	02 c0       	rjmp	.+4      	; 0x44c <_hd44780_l_func+0x2dc>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	9a 95       	dec	r25
 44e:	e2 f7       	brpl	.-8      	; 0x448 <_hd44780_l_func+0x2d8>
 450:	cb 01       	movw	r24, r22
 452:	80 95       	com	r24
 454:	83 23       	and	r24, r19
 456:	8c 93       	st	X, r24
 458:	0c c0       	rjmp	.+24     	; 0x472 <_hd44780_l_func+0x302>
 45a:	3c 91       	ld	r19, X
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	ea 01       	movw	r28, r20
 462:	02 c0       	rjmp	.+4      	; 0x468 <_hd44780_l_func+0x2f8>
 464:	cc 0f       	add	r28, r28
 466:	dd 1f       	adc	r29, r29
 468:	9a 95       	dec	r25
 46a:	e2 f7       	brpl	.-8      	; 0x464 <_hd44780_l_func+0x2f4>
 46c:	ce 01       	movw	r24, r28
 46e:	83 2b       	or	r24, r19
 470:	8c 93       	st	X, r24
 472:	94 81       	ldd	r25, Z+4	; 0x04
 474:	a3 89       	ldd	r26, Z+19	; 0x13
 476:	b4 89       	ldd	r27, Z+20	; 0x14
 478:	22 fd       	sbrc	r18, 2
 47a:	0e c0       	rjmp	.+28     	; 0x498 <_hd44780_l_func+0x328>
 47c:	3c 91       	ld	r19, X
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	ba 01       	movw	r22, r20
 484:	02 c0       	rjmp	.+4      	; 0x48a <_hd44780_l_func+0x31a>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	9a 95       	dec	r25
 48c:	e2 f7       	brpl	.-8      	; 0x486 <_hd44780_l_func+0x316>
 48e:	cb 01       	movw	r24, r22
 490:	80 95       	com	r24
 492:	83 23       	and	r24, r19
 494:	8c 93       	st	X, r24
 496:	0c c0       	rjmp	.+24     	; 0x4b0 <_hd44780_l_func+0x340>
 498:	3c 91       	ld	r19, X
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	ea 01       	movw	r28, r20
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <_hd44780_l_func+0x336>
 4a2:	cc 0f       	add	r28, r28
 4a4:	dd 1f       	adc	r29, r29
 4a6:	9a 95       	dec	r25
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <_hd44780_l_func+0x332>
 4aa:	ce 01       	movw	r24, r28
 4ac:	83 2b       	or	r24, r19
 4ae:	8c 93       	st	X, r24
 4b0:	95 81       	ldd	r25, Z+5	; 0x05
 4b2:	a5 89       	ldd	r26, Z+21	; 0x15
 4b4:	b6 89       	ldd	r27, Z+22	; 0x16
 4b6:	21 fd       	sbrc	r18, 1
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <_hd44780_l_func+0x366>
 4ba:	3c 91       	ld	r19, X
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	ba 01       	movw	r22, r20
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <_hd44780_l_func+0x358>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	9a 95       	dec	r25
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <_hd44780_l_func+0x354>
 4cc:	cb 01       	movw	r24, r22
 4ce:	80 95       	com	r24
 4d0:	83 23       	and	r24, r19
 4d2:	8c 93       	st	X, r24
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <_hd44780_l_func+0x37e>
 4d6:	3c 91       	ld	r19, X
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	ea 01       	movw	r28, r20
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_hd44780_l_func+0x374>
 4e0:	cc 0f       	add	r28, r28
 4e2:	dd 1f       	adc	r29, r29
 4e4:	9a 95       	dec	r25
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <_hd44780_l_func+0x370>
 4e8:	ce 01       	movw	r24, r28
 4ea:	83 2b       	or	r24, r19
 4ec:	8c 93       	st	X, r24
 4ee:	96 81       	ldd	r25, Z+6	; 0x06
 4f0:	a7 89       	ldd	r26, Z+23	; 0x17
 4f2:	b0 8d       	ldd	r27, Z+24	; 0x18
 4f4:	20 fd       	sbrc	r18, 0
 4f6:	0e c0       	rjmp	.+28     	; 0x514 <_hd44780_l_func+0x3a4>
 4f8:	4c 91       	ld	r20, X
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <_hd44780_l_func+0x396>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	9a 95       	dec	r25
 508:	e2 f7       	brpl	.-8      	; 0x502 <_hd44780_l_func+0x392>
 50a:	cb 01       	movw	r24, r22
 50c:	80 95       	com	r24
 50e:	84 23       	and	r24, r20
 510:	8c 93       	st	X, r24
 512:	0c c0       	rjmp	.+24     	; 0x52c <_hd44780_l_func+0x3bc>
 514:	4c 91       	ld	r20, X
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	e9 01       	movw	r28, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <_hd44780_l_func+0x3b2>
 51e:	cc 0f       	add	r28, r28
 520:	dd 1f       	adc	r29, r29
 522:	9a 95       	dec	r25
 524:	e2 f7       	brpl	.-8      	; 0x51e <_hd44780_l_func+0x3ae>
 526:	ce 01       	movw	r24, r28
 528:	84 2b       	or	r24, r20
 52a:	8c 93       	st	X, r24
 52c:	00 c0       	rjmp	.+0      	; 0x52e <_hd44780_l_func+0x3be>
 52e:	a7 85       	ldd	r26, Z+15	; 0x0f
 530:	b0 89       	ldd	r27, Z+16	; 0x10
 532:	4c 91       	ld	r20, X
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	9c 01       	movw	r18, r24
 53a:	02 80       	ldd	r0, Z+2	; 0x02
 53c:	02 c0       	rjmp	.+4      	; 0x542 <_hd44780_l_func+0x3d2>
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <_hd44780_l_func+0x3ce>
 546:	24 2b       	or	r18, r20
 548:	2c 93       	st	X, r18
 54a:	00 c0       	rjmp	.+0      	; 0x54c <_hd44780_l_func+0x3dc>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <_hd44780_l_func+0x3de>
 54e:	a7 85       	ldd	r26, Z+15	; 0x0f
 550:	b0 89       	ldd	r27, Z+16	; 0x10
 552:	2c 91       	ld	r18, X
 554:	02 80       	ldd	r0, Z+2	; 0x02
 556:	02 c0       	rjmp	.+4      	; 0x55c <_hd44780_l_func+0x3ec>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <_hd44780_l_func+0x3e8>
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	8c 93       	st	X, r24
 566:	00 c0       	rjmp	.+0      	; 0x568 <_hd44780_l_func+0x3f8>
 568:	00 c0       	rjmp	.+0      	; 0x56a <_hd44780_l_func+0x3fa>
 56a:	01 15       	cp	r16, r1
 56c:	11 05       	cpc	r17, r1
 56e:	49 f0       	breq	.+18     	; 0x582 <_hd44780_l_func+0x412>
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	d5 e0       	ldi	r29, 0x05	; 5
 576:	da 95       	dec	r29
 578:	f1 f7       	brne	.-4      	; 0x576 <_hd44780_l_func+0x406>
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	80 17       	cp	r24, r16
 57e:	91 07       	cpc	r25, r17
 580:	c9 f7       	brne	.-14     	; 0x574 <_hd44780_l_func+0x404>
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	08 95       	ret

0000058c <hd44780_l_clear_disp>:
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	08 e6       	ldi	r16, 0x68	; 104
 592:	16 e0       	ldi	r17, 0x06	; 6
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	ea dd       	rcall	.-1068   	; 0x170 <_hd44780_l_func>
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <hd44780_l_ems>:
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	e6 2f       	mov	r30, r22
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	bf 01       	movw	r22, r30
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	64 60       	ori	r22, 0x04	; 4
 5b2:	24 2f       	mov	r18, r20
 5b4:	26 2b       	or	r18, r22
 5b6:	08 e2       	ldi	r16, 0x28	; 40
 5b8:	10 e0       	ldi	r17, 0x00	; 0
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	d8 dd       	rcall	.-1104   	; 0x170 <_hd44780_l_func>
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <hd44780_l_disp>:
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	e6 2f       	mov	r30, r22
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	bf 01       	movw	r22, r30
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	68 60       	ori	r22, 0x08	; 8
 5da:	44 0f       	add	r20, r20
 5dc:	64 2b       	or	r22, r20
 5de:	26 2b       	or	r18, r22
 5e0:	08 e2       	ldi	r16, 0x28	; 40
 5e2:	10 e0       	ldi	r17, 0x00	; 0
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	c3 dd       	rcall	.-1146   	; 0x170 <_hd44780_l_func>
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <hd44780_l_fs>:
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	44 0f       	add	r20, r20
 5f6:	44 0f       	add	r20, r20
 5f8:	44 0f       	add	r20, r20
 5fa:	30 e1       	ldi	r19, 0x10	; 16
 5fc:	63 9f       	mul	r22, r19
 5fe:	b0 01       	movw	r22, r0
 600:	11 24       	eor	r1, r1
 602:	60 62       	ori	r22, 0x20	; 32
 604:	64 2b       	or	r22, r20
 606:	22 0f       	add	r18, r18
 608:	22 0f       	add	r18, r18
 60a:	26 2b       	or	r18, r22
 60c:	08 e2       	ldi	r16, 0x28	; 40
 60e:	10 e0       	ldi	r17, 0x00	; 0
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	ad dd       	rcall	.-1190   	; 0x170 <_hd44780_l_func>
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	08 95       	ret

0000061c <hd44780_l_init>:

void hd44780_l_init(const struct hd44780_l_conf* conf, uint8_t n, uint8_t f, uint8_t id, uint8_t s) {
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
 626:	12 2f       	mov	r17, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	8f ef       	ldi	r24, 0xFF	; 255
 62a:	97 ed       	ldi	r25, 0xD7	; 215
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <hd44780_l_init+0x10>
 630:	00 c0       	rjmp	.+0      	; 0x632 <hd44780_l_init+0x16>
 632:	00 00       	nop
 * Clears all pins.
 *
 * @param conf	HD44780 configuration
 */
static inline void _hd44780_l_ca(const struct hd44780_l_conf* conf) {
	*(conf->rs_port) &= ~_BV(conf->rs_i);
 634:	eb 85       	ldd	r30, Y+11	; 0x0b
 636:	fc 85       	ldd	r31, Y+12	; 0x0c
 638:	50 81       	ld	r21, Z
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	9c 01       	movw	r18, r24
 640:	08 80       	ld	r0, Y
 642:	02 c0       	rjmp	.+4      	; 0x648 <hd44780_l_init+0x2c>
 644:	22 0f       	add	r18, r18
 646:	33 1f       	adc	r19, r19
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <hd44780_l_init+0x28>
 64c:	20 95       	com	r18
 64e:	25 23       	and	r18, r21
 650:	20 83       	st	Z, r18
	*(conf->rw_port) &= ~_BV(conf->rw_i);
 652:	ed 85       	ldd	r30, Y+13	; 0x0d
 654:	fe 85       	ldd	r31, Y+14	; 0x0e
 656:	50 81       	ld	r21, Z
 658:	9c 01       	movw	r18, r24
 65a:	09 80       	ldd	r0, Y+1	; 0x01
 65c:	02 c0       	rjmp	.+4      	; 0x662 <hd44780_l_init+0x46>
 65e:	22 0f       	add	r18, r18
 660:	33 1f       	adc	r19, r19
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <hd44780_l_init+0x42>
 666:	20 95       	com	r18
 668:	25 23       	and	r18, r21
 66a:	20 83       	st	Z, r18
	*(conf->en_port) &= ~_BV(conf->en_i);
 66c:	ef 85       	ldd	r30, Y+15	; 0x0f
 66e:	f8 89       	ldd	r31, Y+16	; 0x10
 670:	50 81       	ld	r21, Z
 672:	9c 01       	movw	r18, r24
 674:	0a 80       	ldd	r0, Y+2	; 0x02
 676:	02 c0       	rjmp	.+4      	; 0x67c <hd44780_l_init+0x60>
 678:	22 0f       	add	r18, r18
 67a:	33 1f       	adc	r19, r19
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <hd44780_l_init+0x5c>
 680:	20 95       	com	r18
 682:	25 23       	and	r18, r21
 684:	20 83       	st	Z, r18
	*(conf->db7_port) &= ~_BV(conf->db7_i);
 686:	e9 89       	ldd	r30, Y+17	; 0x11
 688:	fa 89       	ldd	r31, Y+18	; 0x12
 68a:	50 81       	ld	r21, Z
 68c:	9c 01       	movw	r18, r24
 68e:	0b 80       	ldd	r0, Y+3	; 0x03
 690:	02 c0       	rjmp	.+4      	; 0x696 <hd44780_l_init+0x7a>
 692:	22 0f       	add	r18, r18
 694:	33 1f       	adc	r19, r19
 696:	0a 94       	dec	r0
 698:	e2 f7       	brpl	.-8      	; 0x692 <hd44780_l_init+0x76>
 69a:	20 95       	com	r18
 69c:	25 23       	and	r18, r21
 69e:	20 83       	st	Z, r18
	*(conf->db6_port) &= ~_BV(conf->db6_i);
 6a0:	eb 89       	ldd	r30, Y+19	; 0x13
 6a2:	fc 89       	ldd	r31, Y+20	; 0x14
 6a4:	50 81       	ld	r21, Z
 6a6:	9c 01       	movw	r18, r24
 6a8:	0c 80       	ldd	r0, Y+4	; 0x04
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <hd44780_l_init+0x94>
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <hd44780_l_init+0x90>
 6b4:	20 95       	com	r18
 6b6:	25 23       	and	r18, r21
 6b8:	20 83       	st	Z, r18
	*(conf->db5_port) &= ~_BV(conf->db5_i);
 6ba:	ed 89       	ldd	r30, Y+21	; 0x15
 6bc:	fe 89       	ldd	r31, Y+22	; 0x16
 6be:	50 81       	ld	r21, Z
 6c0:	9c 01       	movw	r18, r24
 6c2:	0d 80       	ldd	r0, Y+5	; 0x05
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <hd44780_l_init+0xae>
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	0a 94       	dec	r0
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <hd44780_l_init+0xaa>
 6ce:	20 95       	com	r18
 6d0:	25 23       	and	r18, r21
 6d2:	20 83       	st	Z, r18
	*(conf->db4_port) &= ~_BV(conf->db4_i);
 6d4:	ef 89       	ldd	r30, Y+23	; 0x17
 6d6:	f8 8d       	ldd	r31, Y+24	; 0x18
 6d8:	20 81       	ld	r18, Z
 6da:	0e 80       	ldd	r0, Y+6	; 0x06
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <hd44780_l_init+0xc6>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	0a 94       	dec	r0
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <hd44780_l_init+0xc2>
 6e6:	80 95       	com	r24
 6e8:	82 23       	and	r24, r18
 6ea:	80 83       	st	Z, r24
	
	if (conf->dl == HD44780_L_FS_DL_8BIT) {
 6ec:	8b a1       	ldd	r24, Y+35	; 0x23
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	a9 f5       	brne	.+106    	; 0x75c <hd44780_l_init+0x140>
		*(conf->db3_port) &= ~_BV(conf->db3_i);
 6f2:	e9 8d       	ldd	r30, Y+25	; 0x19
 6f4:	fa 8d       	ldd	r31, Y+26	; 0x1a
 6f6:	50 81       	ld	r21, Z
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	9c 01       	movw	r18, r24
 6fe:	0f 80       	ldd	r0, Y+7	; 0x07
 700:	02 c0       	rjmp	.+4      	; 0x706 <hd44780_l_init+0xea>
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	0a 94       	dec	r0
 708:	e2 f7       	brpl	.-8      	; 0x702 <hd44780_l_init+0xe6>
 70a:	20 95       	com	r18
 70c:	25 23       	and	r18, r21
 70e:	20 83       	st	Z, r18
		*(conf->db2_port) &= ~_BV(conf->db2_i);
 710:	eb 8d       	ldd	r30, Y+27	; 0x1b
 712:	fc 8d       	ldd	r31, Y+28	; 0x1c
 714:	50 81       	ld	r21, Z
 716:	9c 01       	movw	r18, r24
 718:	08 84       	ldd	r0, Y+8	; 0x08
 71a:	02 c0       	rjmp	.+4      	; 0x720 <hd44780_l_init+0x104>
 71c:	22 0f       	add	r18, r18
 71e:	33 1f       	adc	r19, r19
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <hd44780_l_init+0x100>
 724:	20 95       	com	r18
 726:	25 23       	and	r18, r21
 728:	20 83       	st	Z, r18
		*(conf->db1_port) &= ~_BV(conf->db1_i);
 72a:	ed 8d       	ldd	r30, Y+29	; 0x1d
 72c:	fe 8d       	ldd	r31, Y+30	; 0x1e
 72e:	50 81       	ld	r21, Z
 730:	9c 01       	movw	r18, r24
 732:	09 84       	ldd	r0, Y+9	; 0x09
 734:	02 c0       	rjmp	.+4      	; 0x73a <hd44780_l_init+0x11e>
 736:	22 0f       	add	r18, r18
 738:	33 1f       	adc	r19, r19
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <hd44780_l_init+0x11a>
 73e:	20 95       	com	r18
 740:	25 23       	and	r18, r21
 742:	20 83       	st	Z, r18
		*(conf->db0_port) &= ~_BV(conf->db0_i);
 744:	ef 8d       	ldd	r30, Y+31	; 0x1f
 746:	f8 a1       	ldd	r31, Y+32	; 0x20
 748:	20 81       	ld	r18, Z
 74a:	0a 84       	ldd	r0, Y+10	; 0x0a
 74c:	02 c0       	rjmp	.+4      	; 0x752 <hd44780_l_init+0x136>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <hd44780_l_init+0x132>
 756:	80 95       	com	r24
 758:	82 23       	and	r24, r18
 75a:	80 83       	st	Z, r24
	
	/* Clear all pins: */
	_hd44780_l_ca(conf);
	
	/* Special function set (for data length): */
	*(conf->db5_port) |= _BV(conf->db5_i);
 75c:	ed 89       	ldd	r30, Y+21	; 0x15
 75e:	fe 89       	ldd	r31, Y+22	; 0x16
 760:	50 81       	ld	r21, Z
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9c 01       	movw	r18, r24
 768:	0d 80       	ldd	r0, Y+5	; 0x05
 76a:	02 c0       	rjmp	.+4      	; 0x770 <hd44780_l_init+0x154>
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <hd44780_l_init+0x150>
 774:	25 2b       	or	r18, r21
 776:	20 83       	st	Z, r18
	*(conf->db4_port) |= _BV(conf->db4_i);
 778:	ef 89       	ldd	r30, Y+23	; 0x17
 77a:	f8 8d       	ldd	r31, Y+24	; 0x18
 77c:	50 81       	ld	r21, Z
 77e:	9c 01       	movw	r18, r24
 780:	0e 80       	ldd	r0, Y+6	; 0x06
 782:	02 c0       	rjmp	.+4      	; 0x788 <hd44780_l_init+0x16c>
 784:	22 0f       	add	r18, r18
 786:	33 1f       	adc	r19, r19
 788:	0a 94       	dec	r0
 78a:	e2 f7       	brpl	.-8      	; 0x784 <hd44780_l_init+0x168>
 78c:	25 2b       	or	r18, r21
 78e:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 790:	00 c0       	rjmp	.+0      	; 0x792 <hd44780_l_init+0x176>
static inline void _hd44780_l_ec(const struct hd44780_l_conf* conf) {
	/* Max write setup time (data) is 80 ns: */
	_delay_us(0.08); /* _delay_us overhead is probably > 80 ns here... */
	
	/* Set EN: */
	*(conf->en_port) |= _BV(conf->en_i);
 792:	ef 85       	ldd	r30, Y+15	; 0x0f
 794:	f8 89       	ldd	r31, Y+16	; 0x10
 796:	50 81       	ld	r21, Z
 798:	9c 01       	movw	r18, r24
 79a:	0a 80       	ldd	r0, Y+2	; 0x02
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <hd44780_l_init+0x186>
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	0a 94       	dec	r0
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <hd44780_l_init+0x182>
 7a6:	25 2b       	or	r18, r21
 7a8:	20 83       	st	Z, r18
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <hd44780_l_init+0x190>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <hd44780_l_init+0x192>
	
	/* Wait for EN pulse width (high level), 230 ns: */
	_delay_us(0.230);
	
	/* Clear EN: */
	*(conf->en_port) &= ~_BV(conf->en_i);
 7ae:	ef 85       	ldd	r30, Y+15	; 0x0f
 7b0:	f8 89       	ldd	r31, Y+16	; 0x10
 7b2:	50 81       	ld	r21, Z
 7b4:	9c 01       	movw	r18, r24
 7b6:	0a 80       	ldd	r0, Y+2	; 0x02
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <hd44780_l_init+0x1a2>
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	0a 94       	dec	r0
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <hd44780_l_init+0x19e>
 7c2:	20 95       	com	r18
 7c4:	25 23       	and	r18, r21
 7c6:	20 83       	st	Z, r18
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <hd44780_l_init+0x1ae>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <hd44780_l_init+0x1b0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7cc:	ea e0       	ldi	r30, 0x0A	; 10
 7ce:	fb e3       	ldi	r31, 0x3B	; 59
 7d0:	31 97       	sbiw	r30, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <hd44780_l_init+0x1b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <hd44780_l_init+0x1ba>
static inline void _hd44780_l_ec(const struct hd44780_l_conf* conf) {
	/* Max write setup time (data) is 80 ns: */
	_delay_us(0.08); /* _delay_us overhead is probably > 80 ns here... */
	
	/* Set EN: */
	*(conf->en_port) |= _BV(conf->en_i);
 7d6:	ef 85       	ldd	r30, Y+15	; 0x0f
 7d8:	f8 89       	ldd	r31, Y+16	; 0x10
 7da:	50 81       	ld	r21, Z
 7dc:	9c 01       	movw	r18, r24
 7de:	0a 80       	ldd	r0, Y+2	; 0x02
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <hd44780_l_init+0x1ca>
 7e2:	22 0f       	add	r18, r18
 7e4:	33 1f       	adc	r19, r19
 7e6:	0a 94       	dec	r0
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <hd44780_l_init+0x1c6>
 7ea:	25 2b       	or	r18, r21
 7ec:	20 83       	st	Z, r18
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <hd44780_l_init+0x1d4>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <hd44780_l_init+0x1d6>
	
	/* Wait for EN pulse width (high level), 230 ns: */
	_delay_us(0.230);
	
	/* Clear EN: */
	*(conf->en_port) &= ~_BV(conf->en_i);
 7f2:	ef 85       	ldd	r30, Y+15	; 0x0f
 7f4:	f8 89       	ldd	r31, Y+16	; 0x10
 7f6:	50 81       	ld	r21, Z
 7f8:	9c 01       	movw	r18, r24
 7fa:	0a 80       	ldd	r0, Y+2	; 0x02
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <hd44780_l_init+0x1e6>
 7fe:	22 0f       	add	r18, r18
 800:	33 1f       	adc	r19, r19
 802:	0a 94       	dec	r0
 804:	e2 f7       	brpl	.-8      	; 0x7fe <hd44780_l_init+0x1e2>
 806:	20 95       	com	r18
 808:	25 23       	and	r18, r21
 80a:	20 83       	st	Z, r18
 80c:	00 c0       	rjmp	.+0      	; 0x80e <hd44780_l_init+0x1f2>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <hd44780_l_init+0x1f4>
 810:	e0 e7       	ldi	r30, 0x70	; 112
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	31 97       	sbiw	r30, 0x01	; 1
 816:	f1 f7       	brne	.-4      	; 0x814 <hd44780_l_init+0x1f8>
 818:	00 c0       	rjmp	.+0      	; 0x81a <hd44780_l_init+0x1fe>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <hd44780_l_init+0x200>
static inline void _hd44780_l_ec(const struct hd44780_l_conf* conf) {
	/* Max write setup time (data) is 80 ns: */
	_delay_us(0.08); /* _delay_us overhead is probably > 80 ns here... */
	
	/* Set EN: */
	*(conf->en_port) |= _BV(conf->en_i);
 81c:	ef 85       	ldd	r30, Y+15	; 0x0f
 81e:	f8 89       	ldd	r31, Y+16	; 0x10
 820:	50 81       	ld	r21, Z
 822:	9c 01       	movw	r18, r24
 824:	0a 80       	ldd	r0, Y+2	; 0x02
 826:	02 c0       	rjmp	.+4      	; 0x82c <hd44780_l_init+0x210>
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	0a 94       	dec	r0
 82e:	e2 f7       	brpl	.-8      	; 0x828 <hd44780_l_init+0x20c>
 830:	25 2b       	or	r18, r21
 832:	20 83       	st	Z, r18
 834:	00 c0       	rjmp	.+0      	; 0x836 <hd44780_l_init+0x21a>
 836:	00 c0       	rjmp	.+0      	; 0x838 <hd44780_l_init+0x21c>
	
	/* Wait for EN pulse width (high level), 230 ns: */
	_delay_us(0.230);
	
	/* Clear EN: */
	*(conf->en_port) &= ~_BV(conf->en_i);
 838:	ef 85       	ldd	r30, Y+15	; 0x0f
 83a:	f8 89       	ldd	r31, Y+16	; 0x10
 83c:	20 81       	ld	r18, Z
 83e:	0a 80       	ldd	r0, Y+2	; 0x02
 840:	02 c0       	rjmp	.+4      	; 0x846 <hd44780_l_init+0x22a>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	0a 94       	dec	r0
 848:	e2 f7       	brpl	.-8      	; 0x842 <hd44780_l_init+0x226>
 84a:	80 95       	com	r24
 84c:	82 23       	and	r24, r18
 84e:	80 83       	st	Z, r24
 850:	00 c0       	rjmp	.+0      	; 0x852 <hd44780_l_init+0x236>
 852:	00 c0       	rjmp	.+0      	; 0x854 <hd44780_l_init+0x238>
	
	/* Special function set (for data length): */
	_hd44780_l_ec(conf);
	
	/* 4-bit specific: */
	if (conf->dl == HD44780_L_FS_DL_4BIT) {
 854:	8b a1       	ldd	r24, Y+35	; 0x23
 856:	81 11       	cpse	r24, r1
 858:	2c c0       	rjmp	.+88     	; 0x8b2 <hd44780_l_init+0x296>
		*(conf->db4_port) &= ~_BV(conf->db4_i);
 85a:	ef 89       	ldd	r30, Y+23	; 0x17
 85c:	f8 8d       	ldd	r31, Y+24	; 0x18
 85e:	50 81       	ld	r21, Z
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	9c 01       	movw	r18, r24
 866:	0e 80       	ldd	r0, Y+6	; 0x06
 868:	02 c0       	rjmp	.+4      	; 0x86e <hd44780_l_init+0x252>
 86a:	22 0f       	add	r18, r18
 86c:	33 1f       	adc	r19, r19
 86e:	0a 94       	dec	r0
 870:	e2 f7       	brpl	.-8      	; 0x86a <hd44780_l_init+0x24e>
 872:	20 95       	com	r18
 874:	25 23       	and	r18, r21
 876:	20 83       	st	Z, r18
 878:	00 c0       	rjmp	.+0      	; 0x87a <hd44780_l_init+0x25e>
static inline void _hd44780_l_ec(const struct hd44780_l_conf* conf) {
	/* Max write setup time (data) is 80 ns: */
	_delay_us(0.08); /* _delay_us overhead is probably > 80 ns here... */
	
	/* Set EN: */
	*(conf->en_port) |= _BV(conf->en_i);
 87a:	ef 85       	ldd	r30, Y+15	; 0x0f
 87c:	f8 89       	ldd	r31, Y+16	; 0x10
 87e:	50 81       	ld	r21, Z
 880:	9c 01       	movw	r18, r24
 882:	0a 80       	ldd	r0, Y+2	; 0x02
 884:	02 c0       	rjmp	.+4      	; 0x88a <hd44780_l_init+0x26e>
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	0a 94       	dec	r0
 88c:	e2 f7       	brpl	.-8      	; 0x886 <hd44780_l_init+0x26a>
 88e:	25 2b       	or	r18, r21
 890:	20 83       	st	Z, r18
 892:	00 c0       	rjmp	.+0      	; 0x894 <hd44780_l_init+0x278>
 894:	00 c0       	rjmp	.+0      	; 0x896 <hd44780_l_init+0x27a>
	
	/* Wait for EN pulse width (high level), 230 ns: */
	_delay_us(0.230);
	
	/* Clear EN: */
	*(conf->en_port) &= ~_BV(conf->en_i);
 896:	ef 85       	ldd	r30, Y+15	; 0x0f
 898:	f8 89       	ldd	r31, Y+16	; 0x10
 89a:	20 81       	ld	r18, Z
 89c:	0a 80       	ldd	r0, Y+2	; 0x02
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <hd44780_l_init+0x288>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	0a 94       	dec	r0
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <hd44780_l_init+0x284>
 8a8:	80 95       	com	r24
 8aa:	82 23       	and	r24, r18
 8ac:	80 83       	st	Z, r24
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <hd44780_l_init+0x294>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <hd44780_l_init+0x296>
		*(conf->db4_port) &= ~_BV(conf->db4_i);
		_hd44780_l_ec(conf);
	}
	
	/* Remaining process: */
	hd44780_l_fs(conf, conf->dl, n, f);
 8b2:	24 2f       	mov	r18, r20
 8b4:	46 2f       	mov	r20, r22
 8b6:	6b a1       	ldd	r22, Y+35	; 0x23
 8b8:	ce 01       	movw	r24, r28
 8ba:	9a de       	rcall	.-716    	; 0x5f0 <hd44780_l_fs>
	hd44780_l_disp(conf, HD44780_L_DISP_D_OFF, HD44780_L_DISP_C_OFF, HD44780_L_DISP_B_OFF);
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	ce 01       	movw	r24, r28
 8c4:	80 de       	rcall	.-768    	; 0x5c6 <hd44780_l_disp>
	hd44780_l_clear_disp(conf);
 8c6:	ce 01       	movw	r24, r28
 8c8:	61 de       	rcall	.-830    	; 0x58c <hd44780_l_clear_disp>
	hd44780_l_ems(conf, id, s);
 8ca:	40 2f       	mov	r20, r16
 8cc:	61 2f       	mov	r22, r17
 8ce:	ce 01       	movw	r24, r28
 8d0:	68 de       	rcall	.-816    	; 0x5a2 <hd44780_l_ems>
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <__vector_20>:
	{
		pickUpMode();
	}
	else
	{
		deliveryMode();
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	0b b6       	in	r0, 0x3b	; 59
 8e8:	0f 92       	push	r0
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	ef 93       	push	r30
 8f0:	ff 93       	push	r31
 8f2:	80 91 0c 01 	lds	r24, 0x010C
 8f6:	90 91 c6 00 	lds	r25, 0x00C6
 8fa:	e8 2f       	mov	r30, r24
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	e0 50       	subi	r30, 0x00	; 0
 900:	ff 4f       	sbci	r31, 0xFF	; 255
 902:	90 83       	st	Z, r25
 904:	8f 5f       	subi	r24, 0xFF	; 255
 906:	8c 30       	cpi	r24, 0x0C	; 12
 908:	19 f0       	breq	.+6      	; 0x910 <__vector_20+0x34>
 90a:	80 93 0c 01 	sts	0x010C, r24
 90e:	05 c0       	rjmp	.+10     	; 0x91a <__vector_20+0x3e>
 910:	10 92 0c 01 	sts	0x010C, r1
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	80 93 10 01 	sts	0x0110, r24
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	9f 91       	pop	r25
 920:	8f 91       	pop	r24
 922:	0f 90       	pop	r0
 924:	0b be       	out	0x3b, r0	; 59
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <setupLCD>:
	

}


void setupLCD(){
 930:	0f 93       	push	r16
 932:	cf 93       	push	r28
	// setting I/O configuration for pins
	DDRA = 0xFF; //data outputs to the LCD
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	81 b9       	out	0x01, r24	; 1
	DDRB = (1 << DDB2)|(1 << DDB1)|(1 << DDB0); //rs, rw and en are outputs
 938:	97 e0       	ldi	r25, 0x07	; 7
 93a:	94 b9       	out	0x04, r25	; 4
	// setting pin numbers and which ports on the LCD the ports on the AVR are hooked up to
	low_conf.rs_i = 2;
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	80 93 12 01 	sts	0x0112, r24
	low_conf.rw_i = 1;
 942:	21 e0       	ldi	r18, 0x01	; 1
 944:	20 93 13 01 	sts	0x0113, r18
	low_conf.en_i = 0;
 948:	10 92 14 01 	sts	0x0114, r1
	
	low_conf.db7_i = 7;
 94c:	90 93 15 01 	sts	0x0115, r25
	low_conf.db6_i = 6;
 950:	c6 e0       	ldi	r28, 0x06	; 6
 952:	c0 93 16 01 	sts	0x0116, r28
	low_conf.db5_i = 5;
 956:	95 e0       	ldi	r25, 0x05	; 5
 958:	90 93 17 01 	sts	0x0117, r25
	low_conf.db4_i = 4;
 95c:	94 e0       	ldi	r25, 0x04	; 4
 95e:	90 93 18 01 	sts	0x0118, r25
	low_conf.db3_i = 3;
 962:	93 e0       	ldi	r25, 0x03	; 3
 964:	90 93 19 01 	sts	0x0119, r25
	low_conf.db2_i = 2;
 968:	80 93 1a 01 	sts	0x011A, r24
	low_conf.db1_i = 1;
 96c:	20 93 1b 01 	sts	0x011B, r18
	low_conf.db0_i = 0;
 970:	10 92 1c 01 	sts	0x011C, r1
	low_conf.rs_port = &PORTB;
 974:	85 e2       	ldi	r24, 0x25	; 37
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	90 93 1e 01 	sts	0x011E, r25
 97c:	80 93 1d 01 	sts	0x011D, r24
	low_conf.rw_port = &PORTB;
 980:	90 93 20 01 	sts	0x0120, r25
 984:	80 93 1f 01 	sts	0x011F, r24
	low_conf.en_port = &PORTB;
 988:	90 93 22 01 	sts	0x0122, r25
 98c:	80 93 21 01 	sts	0x0121, r24
	low_conf.db7_port = &PORTA;
 990:	82 e2       	ldi	r24, 0x22	; 34
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	90 93 24 01 	sts	0x0124, r25
 998:	80 93 23 01 	sts	0x0123, r24
	low_conf.db6_port = &PORTA;
 99c:	90 93 26 01 	sts	0x0126, r25
 9a0:	80 93 25 01 	sts	0x0125, r24
	low_conf.db5_port = &PORTA;
 9a4:	90 93 28 01 	sts	0x0128, r25
 9a8:	80 93 27 01 	sts	0x0127, r24
	low_conf.db4_port = &PORTA;
 9ac:	90 93 2a 01 	sts	0x012A, r25
 9b0:	80 93 29 01 	sts	0x0129, r24
	low_conf.db3_port = &PORTA;
 9b4:	90 93 2c 01 	sts	0x012C, r25
 9b8:	80 93 2b 01 	sts	0x012B, r24
	low_conf.db2_port = &PORTA;
 9bc:	90 93 2e 01 	sts	0x012E, r25
 9c0:	80 93 2d 01 	sts	0x012D, r24
	low_conf.db1_port = &PORTA;
 9c4:	90 93 30 01 	sts	0x0130, r25
 9c8:	80 93 2f 01 	sts	0x012F, r24
	low_conf.db0_port = &PORTA;
 9cc:	90 93 32 01 	sts	0x0132, r25
 9d0:	80 93 31 01 	sts	0x0131, r24
	low_conf.line1_base_addr = 0x00;
 9d4:	10 92 33 01 	sts	0x0133, r1
	low_conf.line2_base_addr = 0x40;
 9d8:	80 e4       	ldi	r24, 0x40	; 64
 9da:	80 93 34 01 	sts	0x0134, r24
	low_conf.dl = HD44780_L_FS_DL_8BIT;
 9de:	20 93 35 01 	sts	0x0135, r18
	hd44780_l_init(&low_conf, HD44780_L_FS_N_DUAL, HD44780_L_FS_F_58, HD44780_L_EMS_ID_INC, HD44780_L_EMS_S_OFF);
 9e2:	00 e0       	ldi	r16, 0x00	; 0
 9e4:	40 e0       	ldi	r20, 0x00	; 0
 9e6:	61 e0       	ldi	r22, 0x01	; 1
 9e8:	82 e1       	ldi	r24, 0x12	; 18
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	17 de       	rcall	.-978    	; 0x61c <hd44780_l_init>
	hd44780_l_disp(&low_conf, HD44780_L_DISP_D_ON, HD44780_L_DISP_C_OFF, HD44780_L_DISP_B_OFF);
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	40 e0       	ldi	r20, 0x00	; 0
 9f2:	61 e0       	ldi	r22, 0x01	; 1
 9f4:	82 e1       	ldi	r24, 0x12	; 18
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	e6 dd       	rcall	.-1076   	; 0x5c6 <hd44780_l_disp>
	UCSR0B = (1<<RXEN0 | 1<<TXEN0); //Enable RX0 and TX0
 9fa:	e1 ec       	ldi	r30, 0xC1	; 193
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	88 e1       	ldi	r24, 0x18	; 24
 a00:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01 | 1 << UCSZ00); //set data length to 8-bit;
 a02:	c0 93 c2 00 	sts	0x00C2, r28
	UBRR0H = 0b00000000;
 a06:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0b00011001; //Sets baudvalue in AVR to 25(1mhz), which gives baude rate 2400. baudvalue = (Fcpu/baudrate*16)-1
 a0a:	89 e1       	ldi	r24, 0x19	; 25
 a0c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1 << RXCIE0); //Enables the rc complete interrupt
 a10:	80 81       	ld	r24, Z
 a12:	80 68       	ori	r24, 0x80	; 128
 a14:	80 83       	st	Z, r24
	
 a16:	cf 91       	pop	r28
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <main>:
	}
}

int main(void)
{
	setupLCD();
 a1c:	89 df       	rcall	.-238    	; 0x930 <setupLCD>
 a1e:	ff cf       	rjmp	.-2      	; 0xa1e <main+0x2>

00000a20 <_exit>:
 a20:	f8 94       	cli

00000a22 <__stop_program>:
 a22:	ff cf       	rjmp	.-2      	; 0xa22 <__stop_program>
