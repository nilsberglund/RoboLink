
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000050  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000202  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000134  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000219  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000114  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013d  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001dc  00000000  00000000  00001281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__vector_24>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 31       	cpi	r26, 0x19	; 25
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1d d0       	rcall	.+58     	; 0xe4 <main>
  aa:	dc c0       	rjmp	.+440    	; 0x264 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initADC>:
			
		}
		

		void initADC() {
			ch = 0;										// Make sure that we start on first channel
  ae:	10 92 02 01 	sts	0x0102, r1
  b2:	10 92 01 01 	sts	0x0101, r1
			DDRA = 0x00;								// Configure PortA as input for analog readings
  b6:	11 b8       	out	0x01, r1	; 1
			DDRB |= (1<<DDB2) | (1<<DDB1) | (1<<DDB0); 	// Configure PortB as output, pin PB0, PB1, PB2.
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	84 b9       	out	0x04, r24	; 4
			PORTB = 0;									// MUX-address = 0,		ändra sen till bara dom lägsta bitarna.
  be:	15 b8       	out	0x05, r1	; 5
			ADMUX = 0x20;								// AREF, left justify (msb-lsb configuration), Data registers and select ADC0 as input channel. skapa loop som växlar mellan ADC0 och ADC6.
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA = 0x8B;								// Enable the ADC and its interrupt feature
  c6:	8b e8       	ldi	r24, 0x8B	; 139
  c8:	80 93 7a 00 	sts	0x007A, r24
			// and set the ACD clock pre-scalar to clk/64
			EICRA |=(1<<ISC00);							// Sets the ISC00 to 1 rising edge triggering
  cc:	e9 e6       	ldi	r30, 0x69	; 105
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
			EICRA |=(1<<ISC01);							// Sets ISC01 to 1
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
			EIMSK =0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8d bb       	out	0x1d, r24	; 29
  e0:	08 95       	ret

000000e2 <waitForButton>:
		}
		
		void waitForButton() {
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <waitForButton>

000000e4 <main>:

		
		int main(void)										// borde heta initADC() sen kanske?
		{

			initADC();
  e4:	e4 df       	rcall	.-56     	; 0xae <initADC>
			sei(); 								// Enable Global Interrupts
  e6:	78 94       	sei
			//calibrateSensors();
			
			waitForButton();
  e8:	fc df       	rcall	.-8      	; 0xe2 <waitForButton>

000000ea <analogRead>:
			}
		}
		
		
		void analogRead (int ch){
			ADMUX &= 0xF8;									// Set 3 lsb:s to 0
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	98 7f       	andi	r25, 0xF8	; 248
  f2:	90 83       	st	Z, r25
			ADMUX |= ch;									// Select pin ADC0..ADC6 using MUX.
  f4:	90 81       	ld	r25, Z
  f6:	89 2b       	or	r24, r25
  f8:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADSC);								// Start conversion
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <__vector_1>:
			}
		}

		

		ISR(INT0_vect) {						// First ADC conversion after button press
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	0b b6       	in	r0, 0x3b	; 59
 112:	0f 92       	push	r0
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
			//EICRA |= (1<<INTF0); 
			EICRA |=(1<<ISC00);							// Sets the ISC00 to 1 rising edge triggering
 12c:	e9 e6       	ldi	r30, 0x69	; 105
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
			EICRA |=(1<<ISC01);							// Sets ISC01 to 1
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
			EIMSK =0x01;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8d bb       	out	0x1d, r24	; 29
			analogRead(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	d2 df       	rcall	.-92     	; 0xea <analogRead>
			

		}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0b be       	out	0x3b, r0	; 59
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <calcThresholds>:
		
		
		void calcThresholds(){
			for (int channel=0; channel<7; channel++)
			{
				channelThresholds[ch] = ((lightVector[ch] - darkVector[ch]) / 2);
 16c:	80 91 01 01 	lds	r24, 0x0101
 170:	90 91 02 01 	lds	r25, 0x0102
 174:	fc 01       	movw	r30, r24
 176:	ee 5e       	subi	r30, 0xEE	; 238
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	dc 01       	movw	r26, r24
 17c:	ac 5f       	subi	r26, 0xFC	; 252
 17e:	be 4f       	sbci	r27, 0xFE	; 254
 180:	2c 91       	ld	r18, X
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	dc 01       	movw	r26, r24
 186:	a5 5f       	subi	r26, 0xF5	; 245
 188:	be 4f       	sbci	r27, 0xFE	; 254
 18a:	8c 91       	ld	r24, X
 18c:	a9 01       	movw	r20, r18
 18e:	48 1b       	sub	r20, r24
 190:	51 09       	sbc	r21, r1
 192:	ca 01       	movw	r24, r20
 194:	99 23       	and	r25, r25
 196:	0c f4       	brge	.+2      	; 0x19a <calcThresholds+0x2e>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	95 95       	asr	r25
 19c:	87 95       	ror	r24
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <__vector_24>:
		uint8_t darkVector[7];			//Nulla på något sätt??
		uint8_t lightVector[7];		//Nulla på något sätt??


		ISR(ADC_vect) //Interrupt Service Routine (ADC Conversion Complete)
		{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
			adcValue = ADCL;					// Must read ADCL before ADCH
 1c8:	80 91 78 00 	lds	r24, 0x0078
 1cc:	80 93 03 01 	sts	0x0103, r24
			adcValue = ADCH;					// Output ADCH to managable byte adcValue
 1d0:	20 91 79 00 	lds	r18, 0x0079
 1d4:	20 93 03 01 	sts	0x0103, r18
			
			if (darkComplete == 0){
 1d8:	80 91 00 01 	lds	r24, 0x0100
 1dc:	81 11       	cpse	r24, r1
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <__vector_24+0x4e>
				darkVector[ch] = adcValue;	//Add values in darkVector for first calibration
 1e0:	e0 91 01 01 	lds	r30, 0x0101
 1e4:	f0 91 02 01 	lds	r31, 0x0102
 1e8:	e5 5f       	subi	r30, 0xF5	; 245
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	20 83       	st	Z, r18
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <__vector_24+0x68>
			}
			
			if (darkComplete == 1){
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <__vector_24+0x68>
				lightVector[ch] = adcValue;		//Add values in lightVector for second calibration
 1f4:	80 91 01 01 	lds	r24, 0x0101
 1f8:	90 91 02 01 	lds	r25, 0x0102
 1fc:	fc 01       	movw	r30, r24
 1fe:	ec 5f       	subi	r30, 0xFC	; 252
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	20 83       	st	Z, r18
				if (ch == 6){
 204:	06 97       	sbiw	r24, 0x06	; 6
 206:	09 f4       	brne	.+2      	; 0x20a <__vector_24+0x68>
					calcThresholds();
 208:	b1 df       	rcall	.-158    	; 0x16c <calcThresholds>
				}
			}
			
			ch++;								//go to next channel
 20a:	80 91 01 01 	lds	r24, 0x0101
 20e:	90 91 02 01 	lds	r25, 0x0102
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 02 01 	sts	0x0102, r25
 218:	80 93 01 01 	sts	0x0101, r24
			
			if (ch==7) {
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	91 05       	cpc	r25, r1
 220:	41 f4       	brne	.+16     	; 0x232 <__vector_24+0x90>
				darkComplete = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 00 01 	sts	0x0100, r24
				ch = 0; 
 228:	10 92 02 01 	sts	0x0102, r1
 22c:	10 92 01 01 	sts	0x0101, r1
 230:	06 c0       	rjmp	.+12     	; 0x23e <__vector_24+0x9c>
			}
			else {
			
			PORTB = ch;							//Light up new channel, GLÖM EJ måste maskas istället för att överskirvas!
 232:	85 b9       	out	0x05, r24	; 5
			analogRead(ch);						//Read analog value on new channel
 234:	80 91 01 01 	lds	r24, 0x0101
 238:	90 91 02 01 	lds	r25, 0x0102
 23c:	56 df       	rcall	.-340    	; 0xea <analogRead>
			
			}
		}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
