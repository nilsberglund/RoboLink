
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000260  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009c3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000015b  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000011b  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001b4  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c8  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000ea  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000147  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c0       	rjmp	.+200    	; 0x12a <__vector_24>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8d d0       	rcall	.+282    	; 0x1c4 <main>
  aa:	8e c0       	rjmp	.+284    	; 0x1c8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
						analogRead(i);
						

					}

					ISR(INT0_vect) { //vid kalibrering via knapp 
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	8f 93       	push	r24
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
				
						ADCSRA |=(1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
						//while(!(ADCSRA & (1<<ADIF)));

					}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0b be       	out	0x3b, r0	; 59
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <initADC>:

		void initADC() {
			
			DDRA = 0x00;				// Configure PortA as input, all pins
  e0:	11 b8       	out	0x01, r1	; 1
			DDRB |= (1<<DDB2) | (1<<DDB1) | (1<<DDB0); 				// Configure PortB as output, pin PB0, PB1, PB2.
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	84 b9       	out	0x04, r24	; 4
			PORTB = 0; //ändra sen till bara dom lägsta bitarna. 
  e8:	15 b8       	out	0x05, r1	; 5
			ADMUX = 0x20;			// AREF, left justify
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	80 93 7c 00 	sts	0x007C, r24
			// data registers and select ADC0 as input channel. skapa loop som växlar mellan ADC0 och ADC6.
			ADCSRA = 0x8B;			// Enable the ADC and its interrupt feature
  f0:	8b e8       	ldi	r24, 0x8B	; 139
  f2:	80 93 7a 00 	sts	0x007A, r24
			// and set the ACD clock pre-scalar to clk/8
			
			EICRA |=(1<<ISC00);   //Sets the ISC00 to 1 rising edge triggering
  f6:	e9 e6       	ldi	r30, 0x69	; 105
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
			EICRA |=(1<<ISC01);	  //Sets ISC01 to 1
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
			EIMSK =0x01;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	8d bb       	out	0x1d, r24	; 29
			
			sei(); 				// Enable Global Interrupts
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <analogRead>:
		}
		
		
		void analogRead (int i){
			ADMUX &= 0xF8; //nollställ de tre minst signifikanta bitarna.
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	98 7f       	andi	r25, 0xF8	; 248
 116:	90 83       	st	Z, r25
			ADMUX |= i; //Select pin ADC0..ADC6 using MUX.
 118:	90 81       	ld	r25, Z
 11a:	89 2b       	or	r24, r25
 11c:	80 83       	st	Z, r24
			
			ADCSRA |=(1<<ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <__vector_24>:
		 int i = 0; 
		 uint8_t res_tot[7];  


					ISR(ADC_vect) //Interrupt Service Routine (ADC Conversion Complete)
					{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
						adc_res = ADCL;			// OBS! Must read ADCL before ADCH
 150:	80 91 78 00 	lds	r24, 0x0078
 154:	80 93 02 01 	sts	0x0102, r24
						adc_res = ADCH;  // Output ADCH to internal version 
 158:	80 91 79 00 	lds	r24, 0x0079
 15c:	80 93 02 01 	sts	0x0102, r24
						res_tot[i] = adc_res; 
 160:	80 91 00 01 	lds	r24, 0x0100
 164:	90 91 01 01 	lds	r25, 0x0101
 168:	20 91 02 01 	lds	r18, 0x0102
 16c:	fc 01       	movw	r30, r24
 16e:	ed 5f       	subi	r30, 0xFD	; 253
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	20 83       	st	Z, r18
						
						i++; 
 174:	01 96       	adiw	r24, 0x01	; 1
						if (i==7) {
 176:	87 30       	cpi	r24, 0x07	; 7
 178:	91 05       	cpc	r25, r1
 17a:	29 f0       	breq	.+10     	; 0x186 <__vector_24+0x5c>
					{
						adc_res = ADCL;			// OBS! Must read ADCL before ADCH
						adc_res = ADCH;  // Output ADCH to internal version 
						res_tot[i] = adc_res; 
						
						i++; 
 17c:	90 93 01 01 	sts	0x0101, r25
 180:	80 93 00 01 	sts	0x0100, r24
 184:	04 c0       	rjmp	.+8      	; 0x18e <__vector_24+0x64>
						if (i==7) {
							i = 0; 
 186:	10 92 01 01 	sts	0x0101, r1
 18a:	10 92 00 01 	sts	0x0100, r1
						}

						PORTB = i; 
 18e:	80 91 00 01 	lds	r24, 0x0100
 192:	85 b9       	out	0x05, r24	; 5
						//tillkalla funktion som tar hand om adc_res. 
						 //välj rätt diod och rätt mux-kanal genom att sätta portarna till rätt värde.

						analogRead(i);
 194:	80 91 00 01 	lds	r24, 0x0100
 198:	90 91 01 01 	lds	r25, 0x0101
 19c:	b8 df       	rcall	.-144    	; 0x10e <analogRead>
						

					}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0b be       	out	0x3b, r0	; 59
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:
		//}		

		int main(void) // borde heta initADC() sen kanske? 
		{
	
						initADC(); 
 1c4:	8d df       	rcall	.-230    	; 0xe0 <initADC>
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0x2>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
