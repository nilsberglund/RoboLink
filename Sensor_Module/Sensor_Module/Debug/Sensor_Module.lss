
Sensor_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000450  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  000004e4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000536  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002cc  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005dc  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d7  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ee  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	7d c0       	rjmp	.+250    	; 0x100 <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	cf c1       	rjmp	.+926    	; 0x3ec <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	7c c1       	rjmp	.+760    	; 0x35a <__vector_24>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 32       	cpi	r26, 0x25	; 37
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8f d1       	rcall	.+798    	; 0x3c8 <main>
  aa:	d0 c1       	rjmp	.+928    	; 0x44c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initADC>:
}
*/


void initADC() {
	ch = 0;										// Make sure that we start on first channel
  ae:	10 92 24 01 	sts	0x0124, r1
  b2:	10 92 23 01 	sts	0x0123, r1
	DDRA = 0x00;								// Configure PortA as input for analog readings
  b6:	11 b8       	out	0x01, r1	; 1
	DDRB |= (1<<DDB2) | (1<<DDB1) | (1<<DDB0); 	// Configure PortB as output, pin PB0, PB1, PB2.
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);									// MUX-address = 0 =>Tänd lampa 0,		ändra sen till bara dom lägsta bitarna.
  be:	28 98       	cbi	0x05, 0	; 5
	ADMUX = 0x20;								// AREF, left justify (msb-lsb configuration), Data registers and select ADC0 as input channel. skapa loop som växlar mellan ADC0 och ADC6.
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0x8B;								// Enable the ADC and its interrupt feature
  c6:	8b e8       	ldi	r24, 0x8B	; 139
  c8:	80 93 7a 00 	sts	0x007A, r24
	// and set the ACD clock pre-scalar to clk/64
	EICRA |=(1<<ISC00);							// Sets the ISC00 to 1 rising edge triggering
  cc:	e9 e6       	ldi	r30, 0x69	; 105
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	EICRA |=(1<<ISC01);							// Sets ISC01 to 1
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
	EIMSK =0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8d bb       	out	0x1d, r24	; 29
	
	sei(); 
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <analogRead>:
}

void analogRead (int ch){
	ADMUX &= 0xF8;									// Set 3 lsb:s to 0
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	98 7f       	andi	r25, 0xF8	; 248
  ec:	90 83       	st	Z, r25
	ADMUX |= ch;									// Select pin ADC0..ADC6 using MUX.
  ee:	90 81       	ld	r25, Z
  f0:	89 2b       	or	r24, r25
  f2:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADSC);								// Start conversion
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <__vector_1>:
	}


}

ISR(INT0_vect) {						// First ADC conversion after button press
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	ch = 0;
 126:	10 92 24 01 	sts	0x0124, r1
 12a:	10 92 23 01 	sts	0x0123, r1
	caliMode = 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 1a 01 	sts	0x011A, r25
 136:	80 93 19 01 	sts	0x0119, r24
	buttonPushed++;
 13a:	80 91 02 01 	lds	r24, 0x0102
 13e:	90 91 03 01 	lds	r25, 0x0103
 142:	01 96       	adiw	r24, 0x01	; 1
	if (buttonPushed == 3)
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	91 05       	cpc	r25, r1
 148:	29 f0       	breq	.+10     	; 0x154 <__vector_1+0x54>
}

ISR(INT0_vect) {						// First ADC conversion after button press
	ch = 0;
	caliMode = 1;
	buttonPushed++;
 14a:	90 93 03 01 	sts	0x0103, r25
 14e:	80 93 02 01 	sts	0x0102, r24
 152:	06 c0       	rjmp	.+12     	; 0x160 <__vector_1+0x60>
	if (buttonPushed == 3)
	{
		buttonPushed = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 03 01 	sts	0x0103, r25
 15c:	80 93 02 01 	sts	0x0102, r24
	}
	analogRead(ch);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	bf df       	rcall	.-130    	; 0xe4 <analogRead>
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0b be       	out	0x3b, r0	; 59
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <calcThresholds>:



////////////////////////////Mathematical functions//////////////////////////////////////////

void calcThresholds(){
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	e2 e1       	ldi	r30, 0x12	; 18
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	cb e0       	ldi	r28, 0x0B	; 11
 196:	d1 e0       	ldi	r29, 0x01	; 1
 198:	ab e1       	ldi	r26, 0x1B	; 27
 19a:	b1 e0       	ldi	r27, 0x01	; 1
 19c:	29 e1       	ldi	r18, 0x19	; 25
 19e:	31 e0       	ldi	r19, 0x01	; 1
	for (int i=0; i<7; i++)
	{
		channelThresholds[i] = lightVector[i] + ((darkVector[i] - lightVector[i]) / 2);
 1a0:	81 91       	ld	r24, Z+
 1a2:	49 91       	ld	r20, Y+
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	84 1b       	sub	r24, r20
 1a8:	91 09       	sbc	r25, r1
 1aa:	0a f4       	brpl	.+2      	; 0x1ae <calcThresholds+0x22>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	84 0f       	add	r24, r20
 1b4:	8d 93       	st	X+, r24


////////////////////////////Mathematical functions//////////////////////////////////////////

void calcThresholds(){
	for (int i=0; i<7; i++)
 1b6:	e2 17       	cp	r30, r18
 1b8:	f3 07       	cpc	r31, r19
 1ba:	91 f7       	brne	.-28     	; 0x1a0 <calcThresholds+0x14>
	{
		channelThresholds[i] = lightVector[i] + ((darkVector[i] - lightVector[i]) / 2);
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <calibrationMode>:
	

}

void calibrationMode() {
	if (buttonPushed == 1){ //calibrate light 
 1c2:	80 91 02 01 	lds	r24, 0x0102
 1c6:	90 91 03 01 	lds	r25, 0x0103
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	51 f4       	brne	.+20     	; 0x1e4 <calibrationMode+0x22>
		lightVector[ch] = adcValue;	//Add values in darkVector for first calibration
 1d0:	e0 91 23 01 	lds	r30, 0x0123
 1d4:	f0 91 24 01 	lds	r31, 0x0124
 1d8:	e5 5f       	subi	r30, 0xF5	; 245
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 91 22 01 	lds	r24, 0x0122
 1e0:	80 83       	st	Z, r24
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <calibrationMode+0x40>
	}
	
	if (buttonPushed == 2){ //calibrate dark
 1e4:	02 97       	sbiw	r24, 0x02	; 2
 1e6:	69 f4       	brne	.+26     	; 0x202 <calibrationMode+0x40>
		darkVector[ch] = adcValue;		//Add values in lightVector for second calibration
 1e8:	80 91 23 01 	lds	r24, 0x0123
 1ec:	90 91 24 01 	lds	r25, 0x0124
 1f0:	fc 01       	movw	r30, r24
 1f2:	ee 5e       	subi	r30, 0xEE	; 238
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	20 91 22 01 	lds	r18, 0x0122
 1fa:	20 83       	st	Z, r18
		if (ch == 6){
 1fc:	06 97       	sbiw	r24, 0x06	; 6
 1fe:	09 f4       	brne	.+2      	; 0x202 <calibrationMode+0x40>
			calcThresholds();
 200:	c5 df       	rcall	.-118    	; 0x18c <calcThresholds>
		}
	}
	
	ch++;
 202:	80 91 23 01 	lds	r24, 0x0123
 206:	90 91 24 01 	lds	r25, 0x0124
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 24 01 	sts	0x0124, r25
 210:	80 93 23 01 	sts	0x0123, r24
	if (ch == 7){								//go to next channel
 214:	87 30       	cpi	r24, 0x07	; 7
 216:	91 05       	cpc	r25, r1
 218:	49 f4       	brne	.+18     	; 0x22c <calibrationMode+0x6a>
		caliMode = 0;
 21a:	10 92 1a 01 	sts	0x011A, r1
 21e:	10 92 19 01 	sts	0x0119, r1
		ch = 0;
 222:	10 92 24 01 	sts	0x0124, r1
 226:	10 92 23 01 	sts	0x0123, r1
 22a:	15 c0       	rjmp	.+42     	; 0x256 <calibrationMode+0x94>
	}
	
	switch (ch)
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	91 05       	cpc	r25, r1
 230:	b9 f0       	breq	.+46     	; 0x260 <calibrationMode+0x9e>
 232:	3c f4       	brge	.+14     	; 0x242 <calibrationMode+0x80>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	79 f0       	breq	.+30     	; 0x258 <calibrationMode+0x96>
 23a:	84 f4       	brge	.+32     	; 0x25c <calibrationMode+0x9a>
 23c:	89 2b       	or	r24, r25
 23e:	59 f0       	breq	.+22     	; 0x256 <calibrationMode+0x94>
 240:	20 c0       	rjmp	.+64     	; 0x282 <calibrationMode+0xc0>
 242:	85 30       	cpi	r24, 0x05	; 5
 244:	91 05       	cpc	r25, r1
 246:	91 f0       	breq	.+36     	; 0x26c <calibrationMode+0xaa>
 248:	7c f0       	brlt	.+30     	; 0x268 <calibrationMode+0xa6>
 24a:	86 30       	cpi	r24, 0x06	; 6
 24c:	91 05       	cpc	r25, r1
 24e:	91 f0       	breq	.+36     	; 0x274 <calibrationMode+0xb2>
 250:	07 97       	sbiw	r24, 0x07	; 7
 252:	b9 f4       	brne	.+46     	; 0x282 <calibrationMode+0xc0>
 254:	13 c0       	rjmp	.+38     	; 0x27c <calibrationMode+0xba>
	{
		case 0 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 256:	28 98       	cbi	0x05, 0	; 5
		case 1 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 258:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB0);
 25a:	28 9a       	sbi	0x05, 0	; 5
		case 2 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 25c:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB1);
 25e:	29 9a       	sbi	0x05, 1	; 5
		case 3 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 260:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB1)|(1<<PORTB0);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	83 60       	ori	r24, 0x03	; 3
 266:	85 b9       	out	0x05, r24	; 5
		
		case 4 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 268:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB2);
 26a:	2a 9a       	sbi	0x05, 2	; 5
		case 5 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 26c:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB2)|(1<<PORTB0);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	85 60       	ori	r24, 0x05	; 5
 272:	85 b9       	out	0x05, r24	; 5
		case 6 :
		PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 274:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB2)|(1<<PORTB1);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	86 60       	ori	r24, 0x06	; 6
 27a:	85 b9       	out	0x05, r24	; 5
		case 7 :
		PORTB |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	87 60       	ori	r24, 0x07	; 7
 280:	85 b9       	out	0x05, r24	; 5
	}
	//PORTB = ch;							//Light up new channel, GLÖM EJ måste maskas istället för att överskrivas!
	analogRead(ch);						//Read analog value on new channel
 282:	80 91 23 01 	lds	r24, 0x0123
 286:	90 91 24 01 	lds	r25, 0x0124
 28a:	2c cf       	rjmp	.-424    	; 0xe4 <analogRead>

0000028c <calcOneByteLineVector>:

void calcOneByteLineVector(){
	
	//Add millis or counter
	
	sensor_data = 0;
 28c:	10 92 00 01 	sts	0x0100, r1
 290:	a4 e0       	ldi	r26, 0x04	; 4
 292:	b1 e0       	ldi	r27, 0x01	; 1
 294:	eb e1       	ldi	r30, 0x1B	; 27
 296:	f1 e0       	ldi	r31, 0x01	; 1
	
	for (int i=0; i<7; i++)
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (newSensorValues[i] > channelThresholds[i])
		{
			sensor_data |= (1<<i);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
	
	sensor_data = 0;
	
	for (int i=0; i<7; i++)
	{
		if (newSensorValues[i] > channelThresholds[i])
 2a0:	3d 91       	ld	r19, X+
 2a2:	21 91       	ld	r18, Z+
 2a4:	23 17       	cp	r18, r19
 2a6:	60 f4       	brcc	.+24     	; 0x2c0 <calcOneByteLineVector+0x34>
		{
			sensor_data |= (1<<i);
 2a8:	60 91 00 01 	lds	r22, 0x0100
 2ac:	9a 01       	movw	r18, r20
 2ae:	08 2e       	mov	r0, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <calcOneByteLineVector+0x2a>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <calcOneByteLineVector+0x26>
 2ba:	26 2b       	or	r18, r22
 2bc:	20 93 00 01 	sts	0x0100, r18
	
	//Add millis or counter
	
	sensor_data = 0;
	
	for (int i=0; i<7; i++)
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	87 30       	cpi	r24, 0x07	; 7
 2c4:	91 05       	cpc	r25, r1
 2c6:	61 f7       	brne	.-40     	; 0x2a0 <calcOneByteLineVector+0x14>
		{
			sensor_data |= (1<<i);
		}
	}
	//Send to other avr
}
 2c8:	08 95       	ret

000002ca <defaultMode>:


////////////////////////////Modes for sensor value handlings//////////////////////////////////////////

void defaultMode() {
	newSensorValues[ch] = adcValue;
 2ca:	80 91 23 01 	lds	r24, 0x0123
 2ce:	90 91 24 01 	lds	r25, 0x0124
 2d2:	fc 01       	movw	r30, r24
 2d4:	ec 5f       	subi	r30, 0xFC	; 252
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	20 91 22 01 	lds	r18, 0x0122
 2dc:	20 83       	st	Z, r18
	ch++;									//go to next channel
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 24 01 	sts	0x0124, r25
 2e4:	80 93 23 01 	sts	0x0123, r24
	if (ch==7)
 2e8:	87 30       	cpi	r24, 0x07	; 7
 2ea:	91 05       	cpc	r25, r1
 2ec:	31 f4       	brne	.+12     	; 0x2fa <defaultMode+0x30>
	{
		calcOneByteLineVector();
 2ee:	ce df       	rcall	.-100    	; 0x28c <calcOneByteLineVector>
		ch = 0;
 2f0:	10 92 24 01 	sts	0x0124, r1
 2f4:	10 92 23 01 	sts	0x0123, r1
 2f8:	15 c0       	rjmp	.+42     	; 0x324 <defaultMode+0x5a>
	}
	
	switch (ch)
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	91 05       	cpc	r25, r1
 2fe:	b9 f0       	breq	.+46     	; 0x32e <defaultMode+0x64>
 300:	3c f4       	brge	.+14     	; 0x310 <defaultMode+0x46>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	91 05       	cpc	r25, r1
 306:	79 f0       	breq	.+30     	; 0x326 <defaultMode+0x5c>
 308:	84 f4       	brge	.+32     	; 0x32a <defaultMode+0x60>
 30a:	89 2b       	or	r24, r25
 30c:	59 f0       	breq	.+22     	; 0x324 <defaultMode+0x5a>
 30e:	20 c0       	rjmp	.+64     	; 0x350 <defaultMode+0x86>
 310:	85 30       	cpi	r24, 0x05	; 5
 312:	91 05       	cpc	r25, r1
 314:	91 f0       	breq	.+36     	; 0x33a <defaultMode+0x70>
 316:	7c f0       	brlt	.+30     	; 0x336 <defaultMode+0x6c>
 318:	86 30       	cpi	r24, 0x06	; 6
 31a:	91 05       	cpc	r25, r1
 31c:	91 f0       	breq	.+36     	; 0x342 <defaultMode+0x78>
 31e:	07 97       	sbiw	r24, 0x07	; 7
 320:	b9 f4       	brne	.+46     	; 0x350 <defaultMode+0x86>
 322:	13 c0       	rjmp	.+38     	; 0x34a <defaultMode+0x80>
	{
		case 0 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 324:	28 98       	cbi	0x05, 0	; 5
		case 1 : 
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 326:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB0);
 328:	28 9a       	sbi	0x05, 0	; 5
		case 2 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 32a:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB1);
 32c:	29 9a       	sbi	0x05, 1	; 5
		case 3 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 32e:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB1)|(1<<PORTB0);
 330:	85 b1       	in	r24, 0x05	; 5
 332:	83 60       	ori	r24, 0x03	; 3
 334:	85 b9       	out	0x05, r24	; 5
			
		case 4 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 336:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB2);
 338:	2a 9a       	sbi	0x05, 2	; 5
		case 5 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 33a:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB2)|(1<<PORTB0);
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	85 60       	ori	r24, 0x05	; 5
 340:	85 b9       	out	0x05, r24	; 5
		case 6 :
			PORTB &= ~(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 342:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1<<PORTB2)|(1<<PORTB1);
 344:	85 b1       	in	r24, 0x05	; 5
 346:	86 60       	ori	r24, 0x06	; 6
 348:	85 b9       	out	0x05, r24	; 5
		case 7 :
			PORTB |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	87 60       	ori	r24, 0x07	; 7
 34e:	85 b9       	out	0x05, r24	; 5
	}
	//PORTB = ch;							//Light up new channel, GLÖM EJ måste maskas istället för att överskirvas!
	analogRead(ch);						//Read analog value on new channel
 350:	80 91 23 01 	lds	r24, 0x0123
 354:	90 91 24 01 	lds	r25, 0x0124
 358:	c5 ce       	rjmp	.-630    	; 0xe4 <analogRead>

0000035a <__vector_24>:
uint8_t sensor_data = 0;
*/

////////////Interupts///////////////
ISR(ADC_vect) //Interrupt Service Routine (ADC Conversion Complete)
{
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	0b b6       	in	r0, 0x3b	; 59
 366:	0f 92       	push	r0
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	4f 93       	push	r20
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	adcValue = ADCL;					// Must read ADCL before ADCH
 380:	80 91 78 00 	lds	r24, 0x0078
 384:	80 93 22 01 	sts	0x0122, r24
	adcValue = ADCH;					// Output ADCH to managable byte adcValue
 388:	80 91 79 00 	lds	r24, 0x0079
 38c:	80 93 22 01 	sts	0x0122, r24
	if (caliMode == 1)
 390:	80 91 19 01 	lds	r24, 0x0119
 394:	90 91 1a 01 	lds	r25, 0x011A
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	11 f4       	brne	.+4      	; 0x3a0 <__vector_24+0x46>
	{
		calibrationMode();
 39c:	12 df       	rcall	.-476    	; 0x1c2 <calibrationMode>
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <__vector_24+0x48>
	}
	else
	{
		defaultMode();
 3a0:	94 df       	rcall	.-216    	; 0x2ca <defaultMode>
	}


}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0b be       	out	0x3b, r0	; 59
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <main>:
#include "SensorCalMajor.h"
#include "Slave_sensor.h"

int main(void)
{
	SPI_Init_Slave();
 3c8:	05 d0       	rcall	.+10     	; 0x3d4 <SPI_Init_Slave>
	initADC();
 3ca:	71 de       	rcall	.-798    	; 0xae <initADC>
	analogRead(0);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	89 de       	rcall	.-750    	; 0xe4 <analogRead>
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <main+0xa>

000003d4 <SPI_Init_Slave>:
}
*/

void SPI_Init_Slave()
	{
			DDRD = 0xFF;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	8a b9       	out	0x0a, r24	; 10
			DDRB = 0x48;
 3d8:	88 e4       	ldi	r24, 0x48	; 72
 3da:	84 b9       	out	0x04, r24	; 4
			
			SPCR = 0xC3;
 3dc:	83 ec       	ldi	r24, 0xC3	; 195
 3de:	8c bd       	out	0x2c, r24	; 44
			
			sei(); 
 3e0:	78 94       	sei
 3e2:	08 95       	ret

000003e4 <Slave_TX>:
	}
	
	
void Slave_TX(uint8_t data)
	{
		SPDR = data;
 3e4:	8e bd       	out	0x2e, r24	; 46
		PORTB |= (1 << PORTB3); // Sets INT_Req high. I.e throws interrupt.
 3e6:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << PORTB3); // Sets INT_Req low. Interrupt finished.
 3e8:	2b 98       	cbi	0x05, 3	; 5
 3ea:	08 95       	ret

000003ec <__vector_19>:
void SPI_Init_Slave();
void Slave_TX(uint8_t);
*/

ISR(SPI_STC_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	0b b6       	in	r0, 0x3b	; 59
 3f8:	0f 92       	push	r0
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	instruction_data = SPDR;
 412:	8e b5       	in	r24, 0x2e	; 46
 414:	80 93 01 01 	sts	0x0101, r24
	if(instruction_data == 0b00000100)
 418:	80 91 01 01 	lds	r24, 0x0101
 41c:	84 30       	cpi	r24, 0x04	; 4
 41e:	19 f4       	brne	.+6      	; 0x426 <__vector_19+0x3a>
	{
		Slave_TX(sensor_data);
 420:	80 91 00 01 	lds	r24, 0x0100
 424:	df df       	rcall	.-66     	; 0x3e4 <Slave_TX>
	}
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0b be       	out	0x3b, r0	; 59
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
